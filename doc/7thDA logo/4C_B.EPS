%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: 4C_B.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/30/07%%BoundingBox: 0 0 324 67%%HiResBoundingBox: 0 0 323.4014 66.4751%%CropBox: 0 0 323.4014 66.4751%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: (PANTONE 402 CV)%%CMYKCustomColor: 0 0.0600 0.1500 0.3400 (PANTONE 402 CV)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-30T17:13:03-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-30T17:13:03-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-30T17:13:03-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>56</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqlfmLzFZaHZfWLisk0h4Wtqm8k0h6Ko/We2Yms1kMEOKW5PIdSW7BgOQ0P&#xA;iUu8haleanpl3e3jK0813Jy4f3a0RFCIe4SnGvc+OY3ZWaWXHKcuZkfuH3NusxiEgBypkubRxHYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVK6uY7W1m&#xA;uZa+lAjSPTrxQFj+AyGSYjEyPIC2UY2QB1eH6pq2o6xqT3E6vJeXDGCOKOpZVOwtbcU2O/71/o7/&#xA;ABcLn1E80+I7yO23+5j/AL4/g9BjxxhGhyH4s/oZn9efyT5fsLWSRW1S4nFzc2UfHiIAv71RUNRU&#xA;RAA1d28d83XinRYYxJ/eGVkeXX5Ac+9weD8xMn+ECr83oKsGUMOhFR2zogbdW3hV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrJ4Vmgkhb7Misjd9mFMjO&#xA;PFEjvTE0bYf5B8oppZuLq9j5anDI9rE5B4pCnQxcgP7yvIt3r8803ZPZ4xXKQ9YPD8PL387c7Wan&#xA;joD6ebAbuPUdZ1+cLWa+vZ2RE68+DfTxt4OO/wDMR/wPPTE82U9ZyP4/zY/bXy2UTHHAdwH4+Je2&#xA;WluLa0htw3IQxrGGPU8QBX8M7nHDhiI9wp0EpWSVXJsXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUPqF/a6fYXF9dv6dtaxtNM9CxCIORoBUk7dB1xQTT5Z8&#xA;z63+fXnnXLm70Sx1vTtEuSUsbSH1rSH0AOI5yExo5YbsS1K7dMns4kjOR2tAad+T/wCavl/UrXzJ&#xA;q2iveRWUqSzKl4rzRgOP3n7iQyHh1PGvvtjbHw5DemQedfIH5t+ab17/AMv6O1ho4cm0jF0kM83G&#xA;qiZvVkVwD+wDT4d6b1zA0WjhhBlVTlz/AFOZq82TKa/gHL9aXeVde/PjyPrdrd65Y63qGh25Ed9a&#xA;zia6hEB+ElH/AHioy9Uow326Zn7OJGU4ne30p5Xv9Uv7Rr27KPaXPGbT3QceUTjkDx+0NqbN8Xjl&#xA;Qvq5tgjZOskrsVdirsVdirsVdirsVdirsVdirsVdiqWT+Y9KgMvJpXjgLLPNFBNLEhX7QZ0RlqO+&#xA;+3fI8QTSPtrmC6t47m3cSQTKHjcdCrCoOSBQqYq7FXYq7FXYq7FXYq7FXYq7FXYqoPf2aXsVi8oF&#xA;3MjSRxdyqEBj+OC1pXwq7FXYq7FXYq7FXYq7FVssiRRvJIeKICzt4ACpOKoSLWtKk086itygsgKm&#xA;ZqqB8+VDU12GDiFWmlE+ZNIUI0sksEchASaeCeGOp2H7yRFQV7b4OILSZI6OiujBkYAqwNQQehBy&#xA;SG8VdirsVdirsVdirDoJPNnluNrUacur6Uju0U0DUuFSRy9HQ15n4uw+nK94s9igl1fTV1HlFqV1&#xA;Z6NJpyXVrBDUem3N43QLxkpT0/vyNj4LSdaLNd2Gsvp97eS3cV3ax3FlPMQDWPaddtq1YN8vlk47&#xA;FBS26uLhJNNv7jU7qCx1C7uKIjHa3Mbtb0AVjvwDdOje2RSqte6lbLaajpV1capbyzXCyWs9AzxR&#xA;VDhBRfjVo2KbCvTGzzCoq7lOs3mmvpupz29rewyu5hYf7paPahrxajsp/VthO/JHJSs7DUbvU9Xs&#xA;W1i9WOxeFLZg0df3kAclyEBb4m8RiBud1tT0nXFPlWc3N3O99/pP74rIWBR3VKMq8fsqMRLZJG6a&#xA;aTq9nFoWlfpC+UXd7bwsPUcerJJMoPwjr9ptqDbJA7II3QehW+pX2lTTrqVwl6lxcRQysQ6UikZE&#xA;DxkcSKDfv75GIJClC3/mm+ufL1pJbPHa6pMkk8oZgFAs3IkVa/79kUKo8CfDEy2SBuiLzWZbZ7Hz&#xA;FHLLPol5EFntV+L0pJAPTdQOtWHBgehOJPXoiuidaLbXdppw+v3DzXDkyymRgwj5f7rDfyoNq9+u&#xA;SiKCCwnVdRR3XzTHHcm7t7pXhH1e4Ef6PWsZX1Snp/vFYyV5d6ZWT1ZgdGTSXE115ngt4buRbGfT&#xA;2ulWMgAsJUVWBIr9l8nzLHolWranrOlasIpbySe0sxFeSNRAzWjyejKsgVQC0bUYEUqK1yJJBSBa&#xA;Z+Ybi9klufqV3JbpYWMtxMY+JBkYEwDcH+RmP0eOSkgJfYagb3TfVt9Xumu108zzoVUKsnAHkpKL&#xA;uG7bimRBsc0q0HmC8u9BvYLpzZa5aWjXIMdKSIE5JNHUEFWP2h2O2HiseaK3XanaarZ3mlwDWLpv&#xA;rt08UxHpCicHkAUFDSnECpJxII6pC4/pi08wNZxXs14P0fPcwQzcADMrqkYYqFr9r2x3tHRD6dfQ&#xA;anNb2iavfWOqD4ryznUJI9FJYIrpwHxb/B27Yg31SVaxsr+71TWLGXVbpoLNoY4lb0WDCWFXYSD0&#xA;/iFW9tsQNzui1l1a2dv5r0PSIolisIo57qOAdGnAorGvUoKkYkbgL0ZTcW8NxBJBOgkhlUpIjdCr&#xA;ChGWFixjR7uHS9Z1LTZrmd7SyjtY7ONw8vFWiq32VPgOuVg0aZHcIOC8vZ7KeZL+4oNaS0jPIg/V&#xA;3lROG4r9mQ++AH70sl11Jfq8EkU8kDLc26t6bU5JLMkbK30Pk5MQxR9Uu0n1GKDU7g6rDqH1fTrR&#xA;iHjdDwPBgy06M+/KopkL892VMjE1xqWtX1kJ3t7TThEjLCeLySSp6lS9KhVUigXqa1yfMseSA8yp&#xA;q+maNqFxFqEpgiEL2jEj1UYycJFLAfGhVhTlU1yMrASF2uaxGzaTDZXU6NJewwSkLIhaJ6hgWZRv&#xA;sPfGR5KAi9PsPMtlaLYrc20sMQ4QXUiSeosY2UNGDxYqNvtDCAQpIQlp5a1TT75prKS3lhFotoi3&#xA;HPkaO0ru/EUPJ5G2GARIW0Xq3l241KwtIpbrhe28nJrmJfTrHICk0agE8QY2IHyGExsKCq6rpmoS&#xA;3mmz2BgSPT2d/Tl5ANziMQA4jYBWOEg9EAqcena8b+1uJ5rYxRSO7wxoyACReJ4nck7liT1Phgo2&#xA;mwuh8tQ2/mE6tbSGOKRJPWtB9gzSFayrv8JYL8Xjth4d7Rey7TdM1K21TVbyVoWW/ZXhVeQK+kgj&#xA;QNUd1XenfEA2VJUtL0XUbPy5NpcjwtOwnEUq8uH79mf4gRXYvgANUkndX0XRI7KztBcQwSahawJb&#xA;C6RfiKRDivxMOQ264RFBKE0jSfMFhaTWomtVEsssyThZGZDM5c/ASoahbbcYACEkhU0Hy7+j2uBc&#xA;CKZDxS1Y1Z1iSp4sWHVnZnJHdjjGNKSgH8sax+hrvSY5bdbaW6Fxaj4/3UfrCf0qU3+Jdvng4TVL&#xA;YTjX7LU7/SZLOzkihluF9OaR+RARhRwtN9xtkpAkICKltjJpr2pjjq8JiMW/pVK8ePjx/hhrZWM6&#xA;L5Z8zaZcWkpubS4+qWrWaBhICYmkEg3HdeIA26ZARIZEhPYtH9SW7uNQZZ5ryL6s6oCsaQDl+7Wp&#xA;JNS5LE9fbJV3sbQdn5cuLTy3daYtwJ7y5jeNrqWoBBT0o603+CJVH0YBHak3utj0nzCNOjsTLaKk&#xA;NsbZWVXLPWP0/iY/ZXoxoNyBjRpbDtU8rHUtEt7WWQQalaxenBdxVoPh4MprQlHXZlxMbCg7orWd&#xA;Mv7y+0y4tniVLGYzSLJyqxKFKCnsxwyFoBUr/R9Sn1tr6CeOGJrKWyVhy9VGkIf1B2qrKNsSDaQd&#xA;lT9Galdz2UmpNb/6DJ6ytArcnk4FOrfYX4qkb1xo9UW3pWmX1tq2qXlw8TR38iPGsfLkoiQRqDXx&#xA;Vd/fEDdSW9d0FdTNtcQzm01GycyWd0oDcSRRlZTTkrdxjKNqCtlh80zW/o/WLS2dgQ91GkjsPdI2&#xA;IAPzJx3XZT0TRL7T9TvZ5JUlt7mOCNDVjL/o6empYkUJYbn3wRjRSShovLF89lqVtPcJE91eG/tZ&#xA;4QxaKXmHWoagPEoMeFbR31DWLt7cahLAsNvIkzLbq/KR4zVN3PwqGoab/PDRPNFhAp5XuZoNUt7y&#xA;SNVvbo3ttPDy9SGaihGFafZ4Dp7jBwptWt9G1i2vDqUVxA17cxpHqMTKwhlaIcUlUj4kYLsRuMaP&#xA;NbC3WNF1zU9Nu7aW6gDXPprHEqsI41jfmTyqWdmIA6AYmJIUEIjW9M1LUIdP9JoUmtLmK6lD8ipa&#xA;IH4VoK0JOGQJQC//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:36923793F8D011DBAAE2975E5D9B4AE7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:36923794F8D011DBAAE2975E5D9B4AE7</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -66.4751 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 66.4751 li323.401 66.4751 li323.401 0 licpclp[1 0 0 1 0 0 ] concat158.295 34.8555 mo158.295 33.1069 li160.776 33.1069 li160.776 32.9424 li160.776 31.1914 159.969 29.9092 154.408 30.8726 cv145.262 32.5015 li139.999 39.8013 li152.628 37.5615 li156.412 36.9121 159.733 36.7769 160.776 39.7852 cv160.776 34.8555 li158.295 34.8555 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0.6 0 0.3 0.72 cmykf162.502 39.7847 mo162.502 37.4038 163.909 35.7676 166.78 32.8965 cv168.804 30.8726 li178.053 32.5015 li183.324 39.7935 li171.197 37.7012 li167.085 36.9121 163.6 36.6357 162.502 39.7847 cvcpf163.014 33.103 mo163.931 31.1372 165.882 29.3599 167.003 28.2383 cv167.802 27.4272 li171.198 24.0308 171.851 22.626 172.057 20.2871 cv172.066 20.165 172.241 20.7451 172.293 21.1563 cv172.469 22.5342 172.367 23.5347 171.899 24.915 cv171.198 26.9775 169.54 28.6206 167.388 30.7725 cv165.047 33.103 li163.014 33.103 licp0 0.27 1 0.18 cmykf164.986 4.62354 mo164.986 4.60547 165.043 4.59473 165.043 4.62354 cv165.043 7.33252 li165.043 9.78223 161.895 12.6079 160.641 13.854 cv156.028 18.479 li154.434 20.0737 151.242 23.2227 152.582 26.2607 cv152.626 26.3618 152.667 26.4487 152.497 26.3276 cv152.156 26.0854 151.639 25.2354 151.501 23.6812 cv151.255 20.9116 153.144 18.4321 155.473 16.103 cv159.872 11.6978 li164.334 7.23584 164.77 6.44922 164.986 4.62354 cvcpf160.641 18.4897 mo161.895 17.2441 165.043 14.418 165.043 11.9683 cv165.043 9.25928 li165.043 9.23096 164.986 9.24072 164.986 9.25928 cv164.77 11.085 164.334 11.8716 159.872 16.334 cv155.785 20.4272 li154.301 21.9121 152.939 23.4688 153.001 25.9819 cv153.04 27.522 153.814 28.7983 154.979 29.0991 cv155.459 29.2026 155.43 29.1401 155.316 29.0913 cv153.67 28.3145 153.788 25.3428 156.448 22.6826 cv160.641 18.4897 licpf155.51 14.3926 mo152.114 17.7891 151.461 19.1938 151.255 21.5327 cv151.246 21.6548 151.071 21.0747 151.019 20.6641 cv150.843 19.2856 150.944 18.2852 151.413 16.9048 cv152.113 14.8428 153.772 13.1992 155.924 11.0474 cv159.872 7.09229 li164.334 2.62988 164.77 1.84375 164.986 0.0180664 cv164.986 -0.000488281 165.043 -0.0107422 165.043 0.0180664 cv165.043 2.72705 li165.043 5.17676 161.895 8.00244 160.641 9.24854 cv155.51 14.3926 licpf162.56 37.5474 mo162.558 37.5684 162.502 37.5684 162.502 37.5474 cv162.502 34.8555 li163.629 34.8555 li162.992 35.7681 162.667 36.6519 162.56 37.5474 cvcpf162.568 33.1069 mo162.566 33.1279 162.511 33.1279 162.511 33.1069 cv162.511 30.3662 li162.511 28.3076 164.528 26.082 166.528 24.0952 cv167.826 22.7983 li168.873 21.7515 172.07 18.5972 170.73 15.5591 cv170.686 15.458 170.645 15.3711 170.815 15.4922 cv171.156 15.7344 171.673 16.5845 171.811 18.1387 cv172.057 20.9077 170.168 23.3877 167.839 25.7168 cv166.64 26.9219 li163.748 29.814 162.786 31.1104 162.568 33.1069 cvcpf162.565 28.354 mo162.563 28.375 162.507 28.375 162.507 28.354 cv162.507 25.5723 li162.507 23.6094 164.454 21.4907 165.399 20.5459 cv166.863 19.0845 li169.523 16.4243 169.642 13.4526 167.996 12.6758 cv167.882 12.6274 167.853 12.5649 168.332 12.6685 cv169.498 12.9688 170.272 14.2451 170.311 15.7852 cv170.373 18.2988 169.034 19.8452 167.549 21.3301 cv166.362 22.5171 li163.878 25.001 162.791 26.4526 162.565 28.354 cvcpf255.748 54.3281 mo255.729 52.9448 254.1 53.3237 254.1 52.9067 cv254.1 52.7363 254.251 52.6982 254.403 52.6982 cv255.104 52.6982 255.786 52.7739 256.487 52.7739 cv257.074 52.7739 257.662 52.6982 258.249 52.6982 cv258.571 52.6982 258.609 52.812 258.609 52.8877 cv258.609 53.2666 257.245 52.9067 257.245 54.3281 cv257.245 58.4204 li257.245 58.6855 257.245 58.7612 257.529 58.7612 cv264.464 58.7612 li264.653 58.7612 264.615 58.2876 264.615 58.2119 cv264.615 54.3281 li264.615 53.0205 263.194 53.3428 263.194 52.9067 cv263.194 52.793 263.232 52.6982 263.517 52.6982 cv264.142 52.6982 265.127 52.7739 265.487 52.7739 cv266.188 52.7739 266.472 52.6982 266.851 52.6982 cv267.344 52.6982 267.382 52.8877 267.382 53.0015 cv267.382 53.3428 266.112 53.0205 266.112 54.3281 cv266.112 64.3696 li266.112 65.7529 267.836 65.4116 267.836 65.8857 cv267.836 65.9424 267.761 66.1128 267.628 66.1128 cv267.116 66.1128 266.529 66.0371 265.847 66.0371 cv264.634 66.0371 264.104 66.1128 263.744 66.1128 cv263.573 66.1128 263.289 66.1699 263.289 65.8667 cv263.289 65.4116 264.615 65.6772 264.615 64.4834 cv264.615 59.936 li264.615 59.6333 264.691 59.4624 264.464 59.4624 cv257.472 59.4624 li257.245 59.4624 257.245 59.5762 257.245 59.7847 cv257.245 64.5024 li257.245 65.791 259.045 65.374 259.045 65.9614 cv259.045 66.0562 258.912 66.1128 258.742 66.1128 cv258.496 66.1128 257.112 66.0371 256.108 66.0371 cv254.763 66.0371 254.555 66.1128 254.479 66.1128 cv254.327 66.1128 254.27 66.0181 254.27 65.8286 cv254.27 65.2793 255.748 65.9043 255.748 64.0288 cv255.748 54.3281 licp0 0.06 0.15 0.34 cmykf271.547 61.0542 mo271.547 64.0854 273.518 65.4688 276.076 65.4688 cv279.638 65.4688 280.453 63.1191 280.453 60.8838 cv280.453 54.7446 li280.453 52.812 278.69 53.6079 278.69 52.8877 cv278.69 52.793 278.823 52.6982 278.88 52.6982 cv279.619 52.6982 280.358 52.7739 281.097 52.7739 cv281.457 52.7739 281.798 52.6982 282.139 52.6982 cv282.234 52.6982 282.385 52.793 282.385 52.9067 cv282.385 53.4375 281.267 53.0205 281.267 54.7637 cv281.267 60.6372 li281.267 61.5654 281.495 66.2456 275.981 66.2456 cv270.998 66.2456 270.051 63.4604 270.051 60.5425 cv270.051 54.1572 li270.051 53.0396 268.516 53.4941 268.516 52.8877 cv268.516 52.7554 268.838 52.6982 268.933 52.6982 cv269.425 52.6982 269.899 52.7739 270.411 52.7739 cv271.017 52.7739 271.623 52.6982 272.21 52.6982 cv272.305 52.6982 272.817 52.6606 272.817 52.8877 cv272.817 53.4185 271.547 52.8877 271.547 54.252 cv271.547 61.0542 licpf286.628 58.8374 mo286.628 59.1973 287.803 59.1025 288.693 59.1025 cv289.508 59.1025 291.327 58.7612 291.327 56.4121 cv291.327 54.1006 289.565 53.3237 287.708 53.3237 cv287.026 53.3237 286.628 53.2856 286.628 54.0249 cv286.628 58.8374 licp293.525 64.0479 mo294.889 66.1318 295.817 65.4312 295.817 65.8857 cv295.817 66.1128 294.756 66.1128 294.586 66.1128 cv293.203 66.1128 292.464 65.1465 291.744 64.0664 cv289.641 60.751 li288.958 59.6899 289.243 59.7466 287.121 59.7466 cv286.515 59.7466 286.628 60.0879 286.628 60.2773 cv286.628 64.2749 li286.628 65.9043 288.599 65.3174 288.599 65.9614 cv288.599 66.1509 288.428 66.1128 288.276 66.1128 cv288.106 66.1128 287.67 66.0371 286.098 66.0371 cv285.378 66.0371 284.658 66.1128 283.938 66.1128 cv283.824 66.1128 283.749 66.0181 283.749 65.9043 cv283.749 65.4312 285.131 65.6963 285.131 64.2563 cv285.131 54.6118 li285.131 52.793 283.502 53.5698 283.502 52.9258 cv283.502 52.812 283.653 52.6982 283.881 52.6982 cv284.222 52.6982 284.127 52.7739 285.094 52.7739 cv286.192 52.7739 287.272 52.6982 288.258 52.6982 cv288.561 52.6982 292.748 52.3193 292.748 55.9761 cv292.748 57.4541 291.687 58.7236 290.361 59.2539 cv293.525 64.0479 licpf302.479 52.5278 mo306.041 52.5278 307.026 53.9868 307.576 53.9868 cv307.728 53.9868 307.841 53.7974 308.031 53.7974 cv308.239 53.7974 308.239 54.1006 308.296 55.332 cv308.334 56.3364 308.504 56.9614 308.182 56.9614 cv307.955 56.9614 307.822 56.4688 307.747 56.3364 cv306.572 54.3091 305.227 53.0771 302.782 53.0771 cv299.087 53.0771 297.307 55.5405 297.307 59.0649 cv297.307 62.3613 299.201 65.6582 302.839 65.6582 cv305.814 65.6582 307.67 63.7637 307.955 62.8921 cv307.993 62.7593 308.106 62.6455 308.22 62.6455 cv308.315 62.6455 308.41 62.7593 308.391 62.854 cv307.955 64.749 li307.936 64.8247 306.591 66.2456 302.328 66.2456 cv298.443 66.2456 295.658 63.5742 295.658 59.6519 cv295.658 55.73 298.481 52.5278 302.479 52.5278 cvcpf311.313 54.3281 mo311.294 52.9448 309.665 53.3237 309.665 52.9067 cv309.665 52.7363 309.816 52.6982 309.968 52.6982 cv310.669 52.6982 311.351 52.7739 312.052 52.7739 cv312.64 52.7739 313.227 52.6982 313.814 52.6982 cv314.136 52.6982 314.174 52.812 314.174 52.8877 cv314.174 53.2666 312.81 52.9067 312.81 54.3281 cv312.81 58.4204 li312.81 58.6855 312.81 58.7612 313.094 58.7612 cv320.029 58.7612 li320.218 58.7612 320.181 58.2876 320.181 58.2119 cv320.181 54.3281 li320.181 53.0205 318.759 53.3428 318.759 52.9067 cv318.759 52.793 318.797 52.6982 319.082 52.6982 cv319.707 52.6982 320.692 52.7739 321.052 52.7739 cv321.753 52.7739 322.037 52.6982 322.417 52.6982 cv322.909 52.6982 322.947 52.8877 322.947 53.0015 cv322.947 53.3428 321.677 53.0205 321.677 54.3281 cv321.677 64.3696 li321.677 65.7529 323.401 65.4116 323.401 65.8857 cv323.401 65.9424 323.326 66.1128 323.193 66.1128 cv322.682 66.1128 322.094 66.0371 321.412 66.0371 cv320.199 66.0371 319.669 66.1128 319.309 66.1128 cv319.139 66.1128 318.854 66.1699 318.854 65.8667 cv318.854 65.4116 320.181 65.6772 320.181 64.4834 cv320.181 59.936 li320.181 59.6333 320.256 59.4624 320.029 59.4624 cv313.038 59.4624 li312.81 59.4624 312.81 59.5762 312.81 59.7847 cv312.81 64.5024 li312.81 65.791 314.61 65.374 314.61 65.9614 cv314.61 66.0562 314.478 66.1128 314.307 66.1128 cv314.061 66.1128 312.678 66.0371 311.673 66.0371 cv310.328 66.0371 310.12 66.1128 310.044 66.1128 cv309.892 66.1128 309.835 66.0181 309.835 65.8286 cv309.835 65.2793 311.313 65.9043 311.313 64.0288 cv311.313 54.3281 licpf96.6206 65.6689 mo99.3467 65.6689 101.892 64.2148 101.892 59.792 cv101.892 55.5513 99.1045 53.1885 95.4692 53.1279 cv93.6519 53.1279 93.5913 53.4307 93.5913 54.3394 cv93.5913 63.4272 li93.5913 63.7305 93.5308 64.6392 93.7124 64.7603 cv94.3184 65.4268 95.7725 65.6689 96.6206 65.6689 cvcp90.8042 52.7036 mo91.4102 52.7036 91.9556 52.7642 92.5005 52.7642 cv93.7729 52.7642 94.9849 52.7036 96.6206 52.7036 cv100.013 52.7036 103.345 55.248 103.345 58.7622 cv103.345 63.1245 101.286 66.1538 95.9541 66.1538 cv94.9849 66.1538 94.0151 66.0928 93.0459 66.0928 cv92.9248 66.0928 91.0464 66.1538 90.9253 66.1538 cv90.8042 66.1538 90.7437 66.0928 90.7437 65.9722 cv90.7437 65.5479 92.0767 66.0327 92.0767 64.2148 cv92.0767 54.7031 li92.0767 52.7642 90.562 53.3701 90.562 52.8853 cv90.562 52.7642 90.6831 52.7036 90.8042 52.7036 cvcpf110.797 60.0347 mo111.222 60.0347 111.222 59.9131 111.1 59.6709 cv109.222 55.0664 li109.162 54.8242 109.041 54.8242 108.919 55.0664 cv106.799 59.7314 li106.678 59.9741 106.799 60.0347 107.041 60.0347 cv110.797 60.0347 licp106.92 60.8828 mo106.557 60.8828 106.193 60.8828 106.011 61.3071 cv104.799 63.9727 li104.739 64.0938 104.618 64.3965 104.618 64.6392 cv104.618 65.9722 106.011 65.3662 106.011 65.8506 cv106.011 66.2144 105.708 66.1538 105.466 66.1538 cv104.921 66.1538 104.436 66.0928 103.891 66.0928 cv103.345 66.0928 102.861 66.1538 102.376 66.1538 cv102.255 66.1538 102.194 66.0928 102.194 65.9722 cv102.194 65.5479 103.103 65.8506 103.588 64.7603 cv108.132 55.0664 li109.222 52.7036 109.283 52.4009 109.586 52.4009 cv109.768 52.4009 109.889 52.9463 109.949 53.0674 cv113.948 62.8818 li114.251 63.6094 114.433 64.3965 114.856 65.063 cv115.462 65.9116 116.553 65.4873 116.553 65.9722 cv116.553 66.1538 116.432 66.1538 116.311 66.1538 cv115.523 66.1538 114.735 66.0928 113.948 66.0928 cv113.402 66.0928 112.918 66.1538 112.373 66.1538 cv112.312 66.1538 111.949 66.1538 111.949 65.9722 cv111.949 65.4873 113.1 65.7295 113.1 65.0024 cv113.1 64.5786 112.736 63.6694 112.555 63.1851 cv111.949 61.6099 li111.767 61.1855 111.646 60.8828 111.1 60.8828 cv106.92 60.8828 licpf114.06 52.7036 mo114.545 52.7036 114.909 52.7642 116.181 52.7642 cv116.847 52.7642 117.332 52.7036 117.514 52.7036 cv117.695 52.7036 117.877 52.7036 117.877 52.8853 cv117.877 53.1885 117.029 53.1885 117.029 53.7339 cv117.029 54.0972 117.271 54.3999 117.332 54.5215 cv119.634 58.2168 li119.816 58.4595 119.937 58.5806 120.058 58.5806 cv120.119 58.5806 120.24 58.4595 120.421 58.1563 cv122.36 55.0059 li122.481 54.7637 122.785 54.4609 122.785 53.9761 cv122.785 53.0068 121.331 53.4307 121.331 52.9463 cv121.331 52.7036 121.512 52.7036 121.754 52.7036 cv122.179 52.7036 122.664 52.7642 123.148 52.7642 cv123.693 52.7642 124.238 52.7036 124.784 52.7036 cv124.905 52.7036 124.966 52.8247 124.966 52.8853 cv124.966 53.1279 124.663 53.1885 124.542 53.249 cv123.996 53.5518 123.754 54.0972 123.451 54.582 cv120.785 58.7622 li120.482 59.1865 120.361 59.3076 120.361 59.6104 cv120.361 64.2754 li120.361 65.9116 121.876 65.3662 121.876 65.9722 cv121.876 66.1538 121.754 66.1538 121.452 66.1538 cv121.209 66.1538 120.058 66.0928 119.392 66.0928 cv118.543 66.0928 117.816 66.1538 117.635 66.1538 cv117.514 66.1538 117.393 66.1538 117.393 65.9116 cv117.393 65.4268 118.847 65.9116 118.847 64.5181 cv118.847 59.9131 li118.847 59.5498 118.543 59.1865 118.422 58.9438 cv115.211 53.855 li114.727 53.0674 113.818 53.3096 113.818 52.9463 cv113.818 52.8247 113.878 52.7036 114.06 52.7036 cvcpf205.336 52.7432 mo206.04 52.7432 206.701 52.8257 207.404 52.8257 cv208.025 52.8257 208.604 52.7432 209.183 52.7432 cv209.473 52.7432 209.555 52.7847 209.555 52.9087 cv209.555 53.3633 208.19 52.9497 208.19 54.3564 cv208.19 64.5313 li208.19 65.855 209.845 65.3999 209.845 65.979 cv209.845 66.103 209.804 66.1445 209.473 66.1445 cv209.059 66.1445 208.231 66.103 207.404 66.103 cv206.246 66.103 205.874 66.1445 205.584 66.1445 cv205.253 66.1445 205.212 66.0615 205.212 65.855 cv205.212 65.3174 206.66 65.9375 206.66 64.0762 cv206.66 54.3564 li206.66 52.9912 205.129 53.3633 205.129 52.9497 cv205.129 52.7847 205.171 52.7432 205.336 52.7432 cvcpf40.5791 58.8833 mo42.5786 58.8833 42.0332 57.3687 42.5181 57.3687 cv42.6997 57.3687 42.6997 57.5508 42.6997 57.7324 cv42.6997 58.3989 42.6997 59.0049 42.6997 59.6104 cv42.6997 60.0952 42.6997 60.6401 42.6997 61.125 cv42.6997 61.3071 42.6392 61.3677 42.5181 61.3677 cv41.9121 61.3677 42.5786 59.7314 41.0034 59.7314 cv38.1558 59.7314 li37.7314 59.7314 37.7925 60.0347 37.7925 60.3374 cv37.7925 63.791 li37.7925 64.9419 37.6714 65.4268 39.2461 65.4268 cv43.6689 65.4268 44.3354 63.4272 44.5776 63.4272 cv44.6992 63.4272 44.6992 63.6094 44.6992 63.6694 cv44.6992 64.3359 44.2144 65.0024 43.7295 65.4873 cv43.124 66.2144 42.6997 66.1538 41.9121 66.1538 cv40.458 66.1538 39.0039 66.0327 37.5498 66.0928 cv36.7622 66.0928 35.9746 66.1538 35.2476 66.1538 cv35.0659 66.1538 34.9448 66.0928 34.9448 65.9722 cv35.0054 65.7295 35.187 65.79 35.793 65.4873 cv36.2773 65.2446 36.3384 64.6997 36.3384 63.791 cv36.3384 55.127 li36.3384 54.2788 36.3384 53.3701 35.3081 53.1885 cv35.1265 53.1885 34.7021 53.1279 34.7021 52.8853 cv34.7021 52.7642 34.8237 52.7036 35.3687 52.7036 cv39.0039 52.7036 39.9731 52.7642 40.7607 52.7642 cv41.1245 52.7642 42.8813 52.7036 43.4873 52.7036 cv43.6689 52.7036 43.6689 52.8853 43.6689 53.0674 cv43.6689 55.1875 43.4268 55.3696 43.3057 55.3696 cv42.8208 55.3696 43.1841 54.4609 42.8208 54.0366 cv42.3359 53.3701 40.3369 53.4912 39.6099 53.4912 cv37.7925 53.4912 37.7925 53.4307 37.7925 54.7031 cv37.7925 58.2168 li37.7925 58.8833 37.7925 58.8833 38.5195 58.8833 cv40.5791 58.8833 licpf44.4565 52.7036 mo44.7598 52.7036 45.0625 52.7642 45.3652 52.7642 cv45.6079 52.7642 45.9106 52.7036 46.2134 52.7036 cv46.4556 52.7036 46.5771 53.0068 46.6982 53.1279 cv55.7861 63.2456 li55.9072 63.3667 55.9678 63.4272 56.0283 63.4272 cv56.0889 63.4272 56.0889 63.3667 56.0889 63.2456 cv56.0889 55.248 li56.0889 52.7642 53.9683 53.4912 53.9683 52.8853 cv53.9683 52.7642 54.0894 52.7036 54.2109 52.7036 cv54.7559 52.7036 55.3013 52.7642 55.9072 52.7642 cv56.5737 52.7642 57.3613 52.7036 57.8462 52.7036 cv57.9673 52.7036 58.0278 52.7642 58.0278 52.8247 cv58.0278 53.3701 56.8765 53.0068 56.8765 54.3999 cv56.8765 65.4268 li56.8765 65.9722 56.8765 66.2144 56.7554 66.2144 cv56.5737 66.2144 56.3921 66.1538 56.0283 65.7295 cv47.8496 56.46 li47.7886 56.46 47.5464 56.0967 47.4253 56.0967 cv47.3647 56.0967 47.3042 56.1572 47.3042 56.5811 cv47.3042 64.3359 li47.3042 66.0928 48.9399 65.4268 48.9399 65.9116 cv48.9399 66.0327 48.9399 66.1538 48.7583 66.1538 cv48.2734 66.1538 47.7886 66.0928 46.8193 66.0928 cv46.1528 66.0928 45.1836 66.1538 45.0625 66.1538 cv44.8203 66.1538 44.8203 66.0327 44.8203 65.9722 cv44.8203 65.3057 46.4556 66.1538 46.4556 63.4272 cv46.4556 56.3994 li46.4556 52.4614 44.1538 53.5518 44.1538 52.8853 cv44.1538 52.7642 44.3354 52.7036 44.4565 52.7036 cvcpf60.0874 53.7339 mo58.876 53.7339 58.876 54.0366 58.5122 55.0664 cv58.4517 55.248 58.4517 55.4907 58.2095 55.4907 cv58.0884 55.4907 58.0278 55.3696 58.0278 55.248 cv58.2095 53.4307 li58.27 53.1885 58.2095 52.7036 58.5728 52.7036 cv60.0269 52.7036 61.5415 52.7642 63.9648 52.7642 cv67.4185 52.7642 69.1753 52.7036 69.5391 52.7036 cv69.9629 52.7036 70.0234 52.7642 70.084 53.249 cv70.2051 54.7637 li70.2051 54.9453 70.2051 55.1875 69.9629 55.1875 cv69.2964 55.1875 70.3267 53.7339 68.3877 53.7339 cv65.6611 53.7339 li64.8135 53.7339 64.874 53.6733 64.874 54.6426 cv64.874 64.3965 li64.874 65.9722 66.4492 65.3662 66.4492 65.9116 cv66.4492 65.9722 66.4492 66.1538 66.2671 66.1538 cv65.7827 66.1538 65.2373 66.0928 64.6919 66.0928 cv62.5718 66.0928 62.208 66.1538 62.0869 66.1538 cv61.9053 66.1538 61.8447 66.0928 61.8447 65.9116 cv61.8447 65.4268 63.3594 65.6689 63.3594 64.5181 cv63.3594 54.582 li63.3594 54.4609 63.4805 53.7339 63.1772 53.7339 cv60.0874 53.7339 licpf70.1445 52.7036 mo70.8716 52.7036 71.5381 52.7642 72.2651 52.7642 cv72.8711 52.7642 73.4771 52.7036 74.022 52.7036 cv74.3857 52.7036 74.3857 52.7642 74.3857 52.8853 cv74.3857 53.249 73.0527 52.8853 73.0527 54.3394 cv73.0527 58.4595 li73.0527 58.7017 73.0527 58.7622 73.2954 58.7622 cv80.2627 58.7622 li80.5049 58.7622 80.4443 58.2773 80.4443 58.2168 cv80.4443 54.3394 li80.4443 53.0068 78.9902 53.3096 78.9902 52.8853 cv78.9902 52.7642 79.0508 52.7036 79.3535 52.7036 cv79.9595 52.7036 80.9287 52.7642 81.2925 52.7642 cv82.0195 52.7642 82.3223 52.7036 82.686 52.7036 cv83.1704 52.7036 83.231 52.8853 83.231 53.0068 cv83.231 53.3096 81.959 53.0068 81.959 54.3394 cv81.959 64.3965 li81.959 65.79 83.6553 65.4268 83.6553 65.9116 cv83.6553 65.9722 83.5947 66.1538 83.4736 66.1538 cv82.9282 66.1538 82.3828 66.0928 81.6558 66.0928 cv80.4443 66.0928 79.8989 66.1538 79.5356 66.1538 cv79.4141 66.1538 79.1113 66.2144 79.1113 65.9116 cv79.1113 65.4268 80.4443 65.7295 80.4443 64.5181 cv80.4443 59.9741 li80.4443 59.6709 80.5049 59.4893 80.2627 59.4893 cv73.2344 59.4893 li73.0527 59.4893 73.0527 59.6104 73.0527 59.792 cv73.0527 64.5181 li73.0527 65.8506 74.8096 65.4268 74.8096 66.0327 cv74.8096 66.0928 74.6885 66.1538 74.5068 66.1538 cv74.2646 66.1538 72.8711 66.0928 71.9019 66.0928 cv70.5083 66.0928 70.3267 66.1538 70.2661 66.1538 cv70.084 66.1538 70.0234 66.0928 70.0234 65.8506 cv70.0234 65.3057 71.5381 65.9722 71.5381 64.0938 cv71.5381 54.3394 li71.5381 52.9463 69.8418 53.3096 69.8418 52.8853 cv69.8418 52.7036 70.0234 52.7036 70.1445 52.7036 cvcpf89.9561 59.3682 mo89.9561 60.2769 90.0166 60.2769 89.2896 60.519 cv85.4121 61.8521 li85.0488 61.9731 84.7456 62.1553 84.564 62.1553 cv84.2612 62.1553 84.3218 61.7915 84.3218 61.6099 cv84.3218 60.6401 84.2612 60.6401 84.9883 60.3979 cv88.8652 59.0654 li89.1685 58.9438 89.5322 58.7622 89.7139 58.7622 cv90.0166 58.7622 89.9561 59.1865 89.9561 59.3682 cvcpf175.308 58.9063 mo177.293 58.9063 176.796 57.3755 177.251 57.3755 cv177.375 57.3755 177.458 57.5825 177.458 57.748 cv177.458 58.4097 177.417 59.0303 177.417 59.6504 cv177.417 60.147 177.458 60.6431 177.458 61.1396 cv177.458 61.3052 177.375 61.3877 177.251 61.3877 cv176.672 61.3877 177.293 59.7334 175.721 59.7334 cv172.909 59.7334 li172.495 59.7334 172.578 60.064 172.578 60.3535 cv172.578 63.8281 li172.578 64.9448 172.412 65.3999 173.984 65.3999 cv178.368 65.3999 179.03 63.4561 179.278 63.4561 cv179.402 63.4561 179.402 63.6211 179.402 63.6626 cv179.402 64.3657 178.906 65.0278 178.493 65.5239 cv177.872 66.1855 177.458 66.1445 176.631 66.1445 cv175.184 66.1445 173.736 66.0615 172.288 66.103 cv171.543 66.103 170.758 66.1445 169.972 66.1445 cv169.806 66.1445 169.682 66.103 169.682 65.979 cv169.724 65.731 169.931 65.772 170.509 65.4824 cv171.006 65.2344 171.047 64.7383 171.047 63.8281 cv171.047 55.1836 li171.047 54.3149 171.047 53.4048 170.055 53.2808 cv169.889 53.2393 169.476 53.1982 169.476 52.9497 cv169.476 52.8257 169.6 52.7432 170.137 52.7432 cv173.694 52.7432 174.687 52.8257 175.514 52.8257 cv175.887 52.8257 177.624 52.7432 178.203 52.7432 cv178.368 52.7432 178.41 52.9087 178.41 53.1567 cv178.41 55.2661 178.12 55.3901 178.038 55.3901 cv177.583 55.3901 177.872 54.4805 177.583 54.0664 cv177.086 53.4048 175.101 53.5288 174.356 53.5288 cv172.536 53.5288 172.578 53.4463 172.578 54.7285 cv172.578 58.2441 li172.578 58.9063 172.536 58.9063 173.281 58.9063 cv175.308 58.9063 licpf179.485 52.7432 mo179.816 52.7432 180.105 52.8257 180.395 52.8257 cv180.685 52.8257 180.974 52.7432 181.264 52.7432 cv181.471 52.7432 181.636 53.0327 181.76 53.1567 cv190.818 63.249 li190.901 63.373 190.984 63.4561 191.025 63.4561 cv191.066 63.4561 191.108 63.373 191.108 63.249 cv191.108 55.3076 li191.108 52.8257 188.999 53.5703 188.999 52.9087 cv188.999 52.7847 189.081 52.7432 189.205 52.7432 cv189.743 52.7432 190.322 52.8257 190.901 52.8257 cv191.563 52.8257 192.39 52.7432 192.845 52.7432 cv192.928 52.7432 193.01 52.7847 193.01 52.9087 cv193.01 53.4048 191.894 53.0737 191.894 54.439 cv191.894 65.3999 li191.894 65.979 191.894 66.2271 191.729 66.2271 cv191.604 66.2271 191.397 66.1445 191.025 65.6895 cv182.877 56.5068 li182.835 56.5068 182.587 56.1763 182.463 56.1763 cv182.38 56.1763 182.339 56.2173 182.339 56.5898 cv182.339 64.3657 li182.339 66.0615 183.994 65.3999 183.994 65.896 cv183.994 66.02 183.994 66.1445 183.787 66.1445 cv183.332 66.1445 182.794 66.103 181.884 66.103 cv181.222 66.103 180.229 66.1445 180.105 66.1445 cv179.857 66.1445 179.857 66.0615 179.857 65.9375 cv179.857 65.2754 181.512 66.103 181.512 63.4561 cv181.512 56.4658 li181.512 52.5361 179.237 53.6118 179.237 52.9087 cv179.237 52.8257 179.402 52.7432 179.485 52.7432 cvcpf195.037 53.7769 mo193.838 53.7769 193.796 54.0664 193.465 55.1006 cv193.383 55.3076 193.383 55.5557 193.135 55.5557 cv193.01 55.5557 192.969 55.3901 192.969 55.3076 cv193.176 53.4873 li193.176 53.2393 193.176 52.7432 193.507 52.7432 cv194.996 52.7432 196.443 52.8257 198.884 52.8257 cv202.317 52.8257 204.054 52.7432 204.426 52.7432 cv204.881 52.7432 204.964 52.8672 205.005 53.2808 cv205.088 54.811 li205.088 54.9766 205.129 55.2246 204.881 55.2246 cv204.178 55.2246 205.212 53.7769 203.268 53.7769 cv200.539 53.7769 li199.835 53.7769 199.794 53.8184 199.794 54.687 cv199.794 64.3657 li199.794 65.979 201.324 65.3584 201.324 65.9375 cv201.324 65.979 201.365 66.1445 201.159 66.1445 cv200.704 66.1445 200.166 66.103 199.628 66.103 cv197.519 66.103 197.146 66.1445 197.022 66.1445 cv196.857 66.1445 196.816 66.103 196.816 65.896 cv196.816 65.4409 198.305 65.6479 198.305 64.4897 cv198.305 54.6455 li198.305 54.5215 198.346 53.7769 198.057 53.7769 cv195.037 53.7769 licpf28.9468 65.3662 mo28.7651 65.8506 28.5835 66.4565 28.3408 66.4565 cv28.0381 66.4565 27.7954 65.6689 27.6138 65.2446 cv22.8882 54.1577 li22.4038 53.0068 21.4341 53.3701 21.4341 52.9463 cv21.4341 52.7642 21.5552 52.7036 21.7373 52.7036 cv22.2827 52.7036 22.8882 52.7642 23.4941 52.7642 cv23.9785 52.7642 24.7061 52.7036 24.9482 52.7036 cv25.0693 52.7036 25.251 52.7642 25.251 52.8853 cv25.251 53.1279 24.4634 53.1279 24.4634 53.855 cv24.4634 54.0972 24.5845 54.3999 24.6455 54.582 cv27.9775 62.458 li28.4014 63.4272 28.5225 63.8516 28.7046 63.8516 cv28.8862 63.8516 28.9468 63.5483 29.0679 63.3667 cv32.4004 55.1875 li32.5215 54.8848 32.7031 54.2788 32.6426 53.855 cv32.6426 53.0068 31.4307 53.3701 31.4307 52.9463 cv31.4307 52.7642 31.5518 52.7036 31.7339 52.7036 cv32.1577 52.7036 32.582 52.7642 32.9453 52.7642 cv33.9146 52.7642 34.1572 52.7036 34.46 52.7036 cv34.6416 52.7036 34.7632 52.7642 34.7632 52.9463 cv34.7632 53.3701 34.2178 52.8853 33.6724 54.1577 cv28.9468 65.3662 licpf19.5562 66.1538 mo18.1021 66.1538 16.6479 66.0327 15.1938 66.0928 cv14.4668 66.0928 13.6187 66.1538 12.8916 66.1538 cv12.71 66.1538 12.5889 66.0928 12.5889 65.9722 cv12.6494 65.7295 12.8311 65.79 13.437 65.4873 cv13.9214 65.2446 13.9824 64.6997 13.9824 63.791 cv13.9824 55.127 li13.9824 54.2788 13.9824 53.3701 12.9521 53.1885 cv12.7705 53.1885 12.3467 53.1279 12.3467 52.8853 cv12.3467 52.7642 12.4678 52.7036 13.0127 52.7036 cv16.6479 52.7036 17.6172 52.7642 18.4048 52.7642 cv18.8291 52.7642 20.5254 52.7036 21.1313 52.7036 cv21.313 52.7036 21.313 52.8853 21.313 53.0674 cv21.313 55.1875 21.0708 55.3696 20.9497 55.3696 cv20.4648 55.3696 20.8281 54.4609 20.4648 54.0366 cv20.0405 53.3701 18.0415 53.4912 17.2539 53.4912 cv15.4365 53.4912 15.4971 53.4307 15.4971 54.7031 cv15.4971 58.2168 li15.4971 58.8833 15.4365 58.8833 16.1631 58.8833 cv18.2231 58.8833 li20.2227 58.8833 19.7378 57.3687 20.1621 57.3687 cv20.3438 57.3687 20.4043 57.5508 20.4043 57.7324 cv20.4043 58.3989 20.3438 59.0049 20.3438 59.6104 cv20.3438 60.0952 20.4043 60.6401 20.4043 61.125 cv20.4043 61.3071 20.2832 61.3677 20.1621 61.3677 cv19.5562 61.3677 20.2227 59.7314 18.647 59.7314 cv15.7998 59.7314 li15.4365 59.7314 15.4971 60.0347 15.4971 60.3374 cv15.4971 63.791 li15.4971 64.9419 15.3149 65.4268 16.8901 65.4268 cv21.313 65.4268 21.9795 63.4272 22.2217 63.4272 cv22.3428 63.4272 22.3428 63.6094 22.3428 63.6694 cv22.3428 64.3359 21.8584 65.0024 21.4341 65.4873 cv20.7676 66.2144 20.4043 66.1538 19.5562 66.1538 cvcpf163.768 65.3584 mo163.561 65.855 163.437 66.4751 163.147 66.4751 cv162.816 66.4751 162.609 65.6479 162.444 65.2754 cv157.77 54.1909 li157.315 53.0737 156.281 53.4048 156.281 52.9912 cv156.281 52.8257 156.405 52.7432 156.571 52.7432 cv157.15 52.7432 157.729 52.8257 158.308 52.8257 cv158.804 52.8257 159.549 52.7432 159.797 52.7432 cv159.921 52.7432 160.045 52.8257 160.045 52.9087 cv160.086 53.1982 159.3 53.1982 159.3 53.9014 cv159.3 54.1494 159.383 54.439 159.466 54.6455 cv162.775 62.4219 li163.23 63.4561 163.313 63.8696 163.52 63.8696 cv163.726 63.8696 163.768 63.5801 163.892 63.3315 cv167.159 55.2246 li167.283 54.9351 167.531 54.3149 167.449 53.9424 cv167.449 53.0737 166.208 53.4048 166.208 52.9912 cv166.208 52.7847 166.332 52.7432 166.498 52.7432 cv166.911 52.7432 167.325 52.8257 167.78 52.8257 cv168.689 52.8257 168.938 52.7432 169.227 52.7432 cv169.434 52.7432 169.558 52.8257 169.558 52.9912 cv169.558 53.4048 169.021 52.9087 168.483 54.1909 cv163.768 65.3584 licpf0.65332 64.9419 mo0.0478516 61.6704 li-0.0737305 61.1855 0.0478516 60.8828 0.290039 60.8828 cv0.65332 60.8828 0.65332 61.1855 0.774414 61.731 cv1.07764 62.8818 2.59229 65.5479 6.10596 65.5479 cv8.52979 65.5479 10.8921 64.2148 10.8921 61.5493 cv10.8921 56.6416 0.592773 59.3682 0.592773 52.7642 cv0.592773 49.5532 3.31934 47.978 6.22705 47.978 cv9.31689 47.978 10.105 48.8867 10.4683 48.8867 cv10.7109 48.8867 10.771 48.584 11.0137 48.584 cv11.1953 48.584 11.3164 48.7051 11.3164 48.9473 cv11.6802 52.4009 li11.7407 52.6431 11.6802 52.8247 11.4375 52.8247 cv11.1348 52.8247 10.9531 52.2798 10.8921 52.0371 cv10.1655 49.8564 8.28711 48.7656 6.04541 48.7656 cv4.04639 48.7656 1.92578 49.7349 1.92578 52.0371 cv1.92578 56.8237 12.2251 54.0366 12.2251 61.0039 cv12.2251 63.1851 10.7109 66.3354 4.95508 66.3354 cv3.07666 66.3354 0.713867 65.4268 0.65332 64.9419 cvcpf136.345 51.585 mo133.491 57.665 li133.325 58.0371 133.491 58.1201 133.821 58.1201 cv138.785 58.1201 li139.364 58.1201 139.323 57.9546 139.199 57.624 cv136.758 51.585 li136.634 51.2539 136.51 51.2539 136.345 51.585 cvcp147.678 54.3975 mo147.678 63.4146 li147.678 63.7041 147.636 64.6138 147.802 64.7793 cv148.422 65.3999 149.87 65.6479 150.739 65.6479 cv153.427 65.6479 155.992 64.2002 155.992 59.8159 cv155.992 55.5972 153.179 53.2393 149.581 53.1982 cv147.76 53.1982 147.678 53.5288 147.678 54.3975 cvcp147.181 66.103 mo147.057 66.103 146.023 66.1445 145.444 66.1445 cv144.41 66.1445 143.79 66.103 142.962 66.103 cv142.259 66.103 141.598 66.1855 140.895 66.1855 cv140.771 66.1855 140.357 66.1855 140.357 65.9375 cv140.357 65.3174 141.846 65.5654 141.846 64.6138 cv141.846 64.0762 141.35 62.918 141.101 62.2563 cv140.274 60.1885 li140.026 59.6094 139.902 59.2368 139.199 59.2368 cv133.656 59.2368 li133.16 59.2368 132.705 59.2368 132.457 59.7744 cv130.885 63.2905 li130.802 63.4561 130.678 63.8281 130.678 64.1592 cv130.678 65.896 132.457 65.1519 132.457 65.8135 cv132.457 66.2686 132.125 66.1855 131.795 66.1855 cv131.092 66.1855 130.388 66.103 129.685 66.103 cv129.023 66.103 128.32 66.1855 127.659 66.1855 cv127.535 66.1855 127.452 66.0615 127.452 65.896 cv127.452 65.3999 128.61 65.8135 129.271 64.3657 cv135.269 51.585 li136.758 48.3999 136.841 47.9863 137.172 47.9863 cv137.461 47.9863 137.627 48.731 137.709 48.9375 cv142.921 61.8838 li143.293 62.7939 143.583 63.8281 144.162 64.7383 cv144.576 65.3174 144.948 65.5239 145.444 65.5239 cv145.858 65.5239 146.189 65.0278 146.189 64.2002 cv146.189 54.7695 li146.189 52.8257 144.658 53.4463 144.658 52.9087 cv144.658 52.7847 144.782 52.7432 144.906 52.7432 cv145.485 52.7432 146.064 52.8257 146.603 52.8257 cv147.885 52.8257 149.084 52.7432 150.739 52.7432 cv154.089 52.7432 157.398 55.2661 157.398 58.7817 cv157.398 63.125 155.33 66.1445 150.077 66.1445 cv149.084 66.1445 148.133 66.103 147.181 66.103 cvcpf231.725 53.2808 mo231.808 54.811 li231.808 54.9766 231.849 55.2246 231.601 55.2246 cv230.898 55.2246 231.932 53.7769 229.988 53.7769 cv227.258 53.7769 li226.514 53.7769 226.514 53.8184 226.514 54.687 cv226.514 64.3657 li226.514 65.979 228.044 65.3584 228.044 65.9375 cv228.044 65.979 228.085 66.1445 227.879 66.1445 cv227.424 66.1445 226.886 66.103 226.348 66.103 cv224.239 66.103 223.867 66.1445 223.742 66.1445 cv223.577 66.1445 223.536 66.103 223.536 65.896 cv223.536 65.4409 225.024 65.6479 225.024 64.4897 cv225.024 54.6455 li225.024 54.5215 225.066 53.7769 224.776 53.7769 cv220.847 53.7769 li219.689 53.7769 219.73 54.1909 219.73 54.8525 cv219.73 55.0591 219.896 55.8867 219.523 55.8867 cv219.317 55.8867 219.192 55.4731 219.11 55.3076 cv218.531 53.6943 217.207 53.1152 215.553 53.1152 cv214.022 53.1152 212.451 53.8599 212.451 55.5972 cv212.451 59.1543 220.144 57.0859 220.144 62.2979 cv220.144 63.9106 219.027 66.3101 214.726 66.3101 cv213.319 66.3101 211.582 65.6064 211.499 65.2344 cv211.044 62.7939 li210.961 62.4219 211.044 62.2148 211.251 62.2148 cv211.499 62.2148 211.499 62.4629 211.624 62.8354 cv211.83 63.7041 212.988 65.6895 215.594 65.6895 cv217.414 65.6895 219.151 64.6968 219.151 62.6699 cv219.151 59.0303 211.458 61.0566 211.458 56.1348 cv211.458 53.7358 213.485 52.5776 215.677 52.5776 cv217.952 52.5776 218.572 53.2393 218.862 53.2393 cv219.151 53.2393 219.192 52.7432 219.565 52.7432 cv221.054 52.7432 223.163 52.8257 225.604 52.8257 cv229.037 52.8257 230.774 52.7432 231.146 52.7432 cv231.601 52.7432 231.684 52.8672 231.725 53.2808 cvcpf245.917 48.126 mo250.639 48.126 251.945 50.0596 252.673 50.0596 cv252.874 50.0596 253.025 49.8086 253.276 49.8086 cv253.552 49.8086 253.552 50.2104 253.627 51.8428 cv253.678 53.1743 253.904 54.0029 253.477 54.0029 cv253.175 54.0029 253 53.3501 252.899 53.1743 cv251.342 50.4868 249.559 48.854 246.319 48.854 cv241.421 48.854 239.06 52.1191 239.06 56.791 cv239.06 61.1611 241.572 65.5313 246.394 65.5313 cv250.337 65.5313 252.799 63.0195 253.175 61.8643 cv253.226 61.6885 253.376 61.5381 253.527 61.5381 cv253.653 61.5381 253.778 61.6885 253.753 61.814 cv253.175 64.3257 li253.15 64.4263 251.367 66.3101 245.716 66.3101 cv240.567 66.3101 236.875 62.7686 236.875 57.5693 cv236.875 52.3706 240.617 48.126 245.917 48.126 cvcpf184.346 35.4033 mo184.541 35.4033 li184.846 35.4033 185 35.2559 185 34.959 cv185 34.8086 184.942 34.6836 184.828 34.582 cv184.714 34.4814 184.574 34.4307 184.406 34.4307 cv184.299 34.4307 184.246 34.4727 184.246 34.5576 cv184.25 34.6152 li184.25 35.3047 li184.25 35.3516 184.253 35.3789 184.263 35.3887 cv184.273 35.3984 184.3 35.4033 184.346 35.4033 cvcp184.896 35.4785 mo185.36 36.1563 li185.417 36.2383 li185.563 36.4502 185.694 36.5586 185.81 36.5645 cv185.865 36.5674 li185.902 36.5693 185.919 36.5859 185.917 36.6191 cv185.914 36.6758 185.822 36.7041 185.644 36.7041 cv185.439 36.7041 185.254 36.5801 185.09 36.334 cv184.656 35.6797 li184.632 35.6416 li184.609 35.6025 184.57 35.583 184.516 35.583 cv184.284 35.583 li184.257 35.5859 li184.25 35.6211 li184.25 36.2266 li184.25 36.3613 184.267 36.4492 184.303 36.4922 cv184.339 36.5332 184.421 36.5615 184.548 36.5752 cv184.605 36.5811 184.634 36.6016 184.636 36.6387 cv184.638 36.6777 184.611 36.6963 184.553 36.6963 cv184.536 36.6963 184.5 36.6934 184.447 36.6875 cv184.402 36.6816 184.329 36.6787 184.226 36.6787 cv183.964 36.6787 li183.931 36.6787 183.882 36.6826 183.82 36.6904 cv183.775 36.6943 183.746 36.6963 183.732 36.6963 cv183.681 36.6963 183.656 36.6768 183.656 36.6377 cv183.656 36.6084 183.677 36.5889 183.72 36.5791 cv183.81 36.5576 183.868 36.5186 183.892 36.4609 cv183.917 36.4033 183.929 36.2793 183.929 36.0879 cv183.929 34.8555 li183.925 34.6777 li183.925 34.5117 183.868 34.4209 183.751 34.4033 cv183.669 34.3916 li183.619 34.3818 183.593 34.3594 183.593 34.3242 cv183.593 34.2861 183.621 34.2666 183.674 34.2666 cv183.688 34.2666 183.73 34.2695 183.799 34.2754 cv183.836 34.2773 183.888 34.2783 183.954 34.2783 cv184.008 34.2783 184.098 34.2744 184.224 34.2666 cv184.32 34.2617 184.402 34.2588 184.472 34.2588 cv185.029 34.2588 185.308 34.4629 185.308 34.873 cv185.308 35.1309 185.17 35.332 184.896 35.4785 cvcp184.634 33.6338 mo184.124 33.6338 183.687 33.8145 183.326 34.1758 cv182.964 34.5381 182.785 34.9746 182.785 35.4854 cv182.785 35.9961 182.964 36.4326 183.326 36.7949 cv183.687 37.1563 184.124 37.3369 184.634 37.3369 cv185.144 37.3369 185.58 37.1563 185.941 36.7949 cv186.302 36.4326 186.484 35.9961 186.484 35.4854 cv186.484 34.9727 186.303 34.5352 185.943 34.1748 cv185.583 33.8145 185.146 33.6338 184.634 33.6338 cvcp184.634 33.4033 mo185.21 33.4033 185.701 33.6055 186.106 34.0117 cv186.511 34.417 186.714 34.9082 186.714 35.4844 cv186.714 36.0596 186.511 36.5498 186.105 36.9551 cv185.699 37.3613 185.208 37.5635 184.634 37.5635 cv183.99 37.5635 183.462 37.3193 183.052 36.8301 cv182.72 36.4355 182.554 35.9873 182.554 35.4844 cv182.554 34.9727 182.718 34.5225 183.048 34.1328 cv183.464 33.6465 183.994 33.4033 184.634 33.4033 cvcp/0 <</Name (PANTONE 402 CV)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.06 0.15 0.34 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf233.166 50.3184 mo233.359 50.3184 li233.666 50.3184 233.818 50.1699 233.818 49.873 cv233.818 49.7227 233.762 49.5977 233.646 49.4961 cv233.533 49.3965 233.393 49.3457 233.225 49.3457 cv233.119 49.3457 233.065 49.3877 233.065 49.4727 cv233.068 49.5293 li233.068 50.2197 li233.068 50.2656 233.073 50.2939 233.082 50.3027 cv233.092 50.3125 233.119 50.3184 233.166 50.3184 cvcp233.715 50.3926 mo234.18 51.0703 li234.237 51.1533 li234.383 51.3652 234.514 51.4727 234.629 51.4785 cv234.684 51.4824 li234.721 51.4844 234.738 51.501 234.736 51.5332 cv234.732 51.5898 234.642 51.6191 234.464 51.6191 cv234.259 51.6191 234.074 51.4951 233.91 51.248 cv233.475 50.5938 li233.451 50.5566 li233.428 50.5176 233.389 50.498 233.336 50.498 cv233.104 50.498 li233.077 50.5 li233.068 50.5352 li233.068 51.1416 li233.068 51.2754 233.086 51.3643 233.123 51.4063 cv233.158 51.4482 233.24 51.4766 233.367 51.4902 cv233.424 51.4961 233.453 51.5166 233.455 51.5527 cv233.457 51.5918 233.43 51.6113 233.373 51.6113 cv233.355 51.6113 233.32 51.6074 233.267 51.6016 cv233.222 51.5957 233.148 51.5938 233.046 51.5938 cv232.783 51.5938 li232.75 51.5938 232.702 51.5977 232.64 51.6055 cv232.594 51.6094 232.564 51.6113 232.551 51.6113 cv232.5 51.6113 232.475 51.5918 232.475 51.5527 cv232.475 51.5234 232.496 51.5039 232.539 51.4941 cv232.629 51.4727 232.688 51.4336 232.711 51.375 cv232.736 51.3184 232.748 51.1934 232.748 51.0029 cv232.748 49.7705 li232.745 49.5918 li232.745 49.4268 232.688 49.3359 232.571 49.3184 cv232.488 49.3066 li232.438 49.2969 232.412 49.2744 232.412 49.2393 cv232.412 49.2012 232.439 49.1816 232.494 49.1816 cv232.508 49.1816 232.549 49.1836 232.619 49.1895 cv232.656 49.1914 232.707 49.1934 232.773 49.1934 cv232.828 49.1934 232.918 49.1895 233.044 49.1816 cv233.139 49.1758 233.222 49.1738 233.291 49.1738 cv233.848 49.1738 234.127 49.3779 234.127 49.7871 cv234.127 50.0449 233.99 50.2471 233.715 50.3926 cvcp233.453 48.5488 mo232.943 48.5488 232.507 48.7285 232.146 49.0908 cv231.784 49.4531 231.604 49.8887 231.604 50.4004 cv231.604 50.9102 231.784 51.3477 232.146 51.709 cv232.507 52.0703 232.943 52.252 233.453 52.252 cv233.963 52.252 234.399 52.0703 234.761 51.709 cv235.122 51.3477 235.303 50.9102 235.303 50.4004 cv235.303 49.8867 235.123 49.4502 234.762 49.0898 cv234.402 48.7285 233.965 48.5488 233.453 48.5488 cvcp233.453 48.3184 mo234.029 48.3184 234.52 48.5205 234.926 48.9258 cv235.33 49.332 235.533 49.8223 235.533 50.3994 cv235.533 50.9746 235.33 51.4648 234.924 51.8691 cv234.518 52.2754 234.027 52.4785 233.453 52.4785 cv232.809 52.4785 232.281 52.2344 231.871 51.7451 cv231.539 51.3496 231.373 50.9023 231.373 50.3994 cv231.373 49.8867 231.538 49.4375 231.868 49.0479 cv232.284 48.5605 232.813 48.3184 233.453 48.3184 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (4C_B.EPS)%%CreationDate: 4/30/07 5:13 PM%AI9_DataStream%Gb!R&pKef^dOtIRJF5^RA[7[CYRNK.,D&WD3.M1RJ-j)U=F77GO)s]dW]H2Q7\d35hX>[6mp4[1lKMDVWN3T\Q'LLTe+MPGbt@Tb%Me1Z;b&6:+]eD'c^/_14[dH=<g;u,#aK\u$=S83*J^REGEU9prH#Y^M>Sk+YCL4\:2P)r7Xl`WYh-Oq^1gB@do'5-*Vt+a(#(EP<%cPd<)c$u![*pQi$V94R1s'k$VTs<!]4k;^VW+mJf3u9D#G7W;P09;HZemd<V/0Am+JuUqN6X<M?rgUaY:KJ&[f8Tm2ZuNeX#X>fg%L[]opIG!b*?m*f0>O1A89=rZ#'RcK4pontL^UIPC/>p.,1(=CgGL(H>6AoEUCfR%1Cr?;*Onuq<4J.*Y94b1)9DIuuf1W.]8lYsC%l,*ISN[j(9@42N:r;TQ@qqS]lCNitTc<^&+a#"b+;<.3BU#'M1o!h_*ouiroWdjP:0XlE1!I!J&m9"NlYhZ5t`c4"tK5)+@0e9>k%YOU4Mj'R_KAlj1PSS%bbc25?5'jIpRXj5n]s1f6M[KCY3%/p+pctFFah0!*d$&[DK]?TZ]",H*pNJBPIL.2."<rZ_7Np<a97L'4'%q=&t<?7\S^rs@n_<r]eZ@Om9Elp!G#Ng_?F><<1#N4rk)K-9[,6.q:#W,13p<-Drd!V.5eS4u`3XBqt3lO]>:0`MAC3;]hiS%GRe%hR2i^ZZUJoL^=hL@fN.Y=!R,4@e"rLRkWhsVt%^;%HP46X6QsklL$./\GgT`g3ggB!91,^^m[L(7XAb)Yi"NVknj-mjdGe5rk@$#%6>9ORW3`j$^I/kC%kmG$Aukau]`%K'=do2+h7RQg&*f]ifRSsZlh5FgA*hMsqZ>-uh-UVG<U4kTe%,,l[?+.$b57O?)cn'TQilV\%LG*kB7dl3EYAfq6jd"CiqmLn%Cd,r>R6Sf2EgTZSs525D!IaIEs28N\]-Uc+fb3Y2s127(FES&]j*u.;X7_7']:2k"q=a5+Xau_o%AP;C!4rT&:hJ0"Xktgia"j$9'a33V_?2IJrUP9c<>FiC,LW8<1m7u]HGAV,T?Q`1QBd7`ul*&)oo3(CT7-[S"jY-;XF'dD,9Y^"e%Y$m+4ITFqMI!eCpTmV)hIr8),41?/.nur*35Lc=jXYSk@8n:.O^VJ/hQGbI[WIFr-;.k=KoD(MrA\[`*!Fh\%,DVi@*H\uZp_sn[%:iATN!dPehm,)5J%8)nD(\g3<]r^ehht6)%pucPqs&Jd8]B*rqXR\7-Vk;pt[(7=/T3,C0L4<DFJ1(=Ss*UQ05LY+U,^!Z'rc6ul%Io12),^YsZcQfJEclfFN:_e'ld4nsdJ4(P>XBHBQ&:-?f-&VPBeP3J'YXHmS#GJ,`,9Thh1mkHB"I:$"S>_L!6m9nBSf*)*LCto1%L4D[cd-[DCJVg,AV0,7].*ib?%Re<bIh8qn:iYh!r;bRA_Tl*O?Vg;aH*K4!%6-iUje;9U]"G7KIr(A48dgDuTOB`H&Z`QOZ8f8L%Q]U]irjG`\p-JO-TKRftfBIElJSja4V=F[E$i`j?KFt3Ooc3!Xr;dV2#'Jq`ZBV19A!boG/e.[8Wb\L?[Et*:s-omSr[9uY^VEHf%=9S-T^J!C+!rjt+9JA[G[KD!3_fRRsPQh;=H*AKj<Qnc61fK#5e-VseeYp8+`+`HB-RSAfRfAGd:f.;<W1<T^=>4O`:*$dtK(p;K%(]V(Y_Y(+ArapYPmah*I2G*l;9mQ$]Nt5%Uo/uBgf%oF\VZGNB*#AM"C=W@A<&'"$[8L)8?rONQ:TTLR?J("#Oh]n*3e-0j^gF!G%5IE0DWjg]#J0Q2UK77_QrN#qe,0D+dc7&Digk6F&4_Yjbr@a_4b<,9SfEET,-4u3E4dq,^1SgA/qp1;mWVMe/AUSq:c)^`]Fciqc%Os=00+\-J6NkWlOhUO8$)FXqHk=Y_lg?=HE(#J4XoKQ$g34pd4ir*LMffqu^MsWPTC+/\(FVH.BIsbTg?iGtpo)FJNgA^cKs'f^?%+5R4hLV'VemCX:u@&;P(a<'DRZNH/ff(dd(Y3@.2h#5KIQ6QW#eI0(#]^WI/cPc"bj6l'<#R?J<s0KU`*Ok<:[aT"ss15i1g_LbC%0DM.['gMHaH]@=JL%roBH8P3^ZH$YX/i&m1s!sm0Z+\';9C&TD#IaYPnIItO5M_%67]1\Eg<d)&Lkk?;`&2a''Hnj+n6F,MY_6\g%5MU8LP0d^PIEr3^&>]80^V3GKQ1f9_=!!69ErCAeAWY6#X6)cBp?BJ<q85k'=oMZEG8dTqs%/*I&)4Nu5%lh-NRhHrnknH)SauXM%?)N-spMea[>P=40VR"Vl6cYPT>5d^JV1-lA+#KV;q+n?jD7=M5p[VEe-bqsRq+IcCT<:(UX=p-M17p.nX($t0pJ51S2IAN,)g:M^%=Ig`bn&'<RhJKW<jhSuVW:btm[Ujiks3c1I.eCF&3Y[pQld*rBp>+cP6X:E5I,FVYXMs:IX)lsq\$!nUGa_sIb:R-jB8l6gR]L]O%j\%_NV/ob02.DiA<rK#r>R*m9qA\STmM\-[X_pVWS5L>7U"S7CTNSN%H5=2.28j+m=]UQokPV7goIR"b5c8@tr(GJfZ_6dL?]EVm%H6&4H0C](ie\g3AUYP:EReMenKfcMao)!G"E;'e>7T8d50Guf70>)2WdPdNm8W-,Zria=A#=a&CJ#GS;8WEn;Hduq<2m0dg9mL0N%feIraFg?F1WjsP84]/,GD)r7[:fSnZA3n>\Kmu<gNUBpuAQm]fFqpAkOS*a>WTSF>=9-X_;kqSb89..oi6C;1os*AbD`<1EW\Q0:%CL8H)^9(a$>2#FBGOjA/e!41^mYY*a^.P,\;o%ISTC/jI/dPe8ohGDLWS,CmpmG-_.a=?RX6*?9S9m8-*c,*4H7->OYGY.gqVf!X%X/U#oe7.g3b;QQGc"O9M=5tI56^N!f;7T,e)E5H%s2lE#%L\T,D6i[gMJT[5baV!g>037Eac(6onZ[!o`b*OGa#HV=8`0rd9fAWI%RQV"bF!chQ>ef@BjrC[\c]sf[2?ZK;O77EmX6QF.k/GNHlKYXSlBs]9*`gHk)OKR9-HO'io(T-$0Dc"3VosQMq-A_iSm0HHG7P-]%DC3L+mq^]Aj_PI-LP_%la1q'N'l8&2)_Eerg6$2XGFK*R%H=jD\J*fe4B/LeNPr><48IFeB=tl\a<KM(?fPTXjKH;SWTWTaPqu$o%?_hT3k>kB1_(rZG/glnZSh-dBj'eH\8p<^7f6)j7WPJ%Qacb1rFtUs]RXC=rEEnKtr5(&9LG8(#>aKh:5]`TX>aI,D0!D[5PIC#u%")E21Q0n!oXqJ(->tCU#S>nhX[i7Jgh'S#%mlE!gH>n%qhp"e:OS7MT;a$b\@mSfpQeVf6=\rT^\`N,DbIc&04bq'f;-#"mKR2u1%r6SQYmQ#T,Be2-BKFh0l?KR1d91l>V&u33_b-nIRc.3oTMs&DJ(An=Kn@%$H+4H6EQ6HK4Y:G<EW7@AP/tqhkIqb?qHE$U<rLkD"%l<3PYr%YX`Sfb-7c4PJ(k3Aq:8+9?P",=@j#IDGUX7T5<mQD)n>Ya0Ja6p(8A#VA@O;+En.aE:Ng-eBD!J9dqFl^!33e!r3!+GuR%16ZXQG9"WRF)Y3_B$Lm`,1"&_n",!ik\=(uV$/XIC(tO?bBg4[Z]8c'BETcH<1n2#)cElFXWF"g/?MR@!iDIPFb.E8f*0<3]m_2s%?"ihY&7:[Le1KspEloK4o6aQLiD4#ddGeNp(B8%'ijY(>pUM7%86Qctr+PC$LIF;C$5`"?/)/mV*fbeneXn*1lj]'+2`[<P(2Mgb%4bI9jb)n5WX9GJ5X51RG>PTRB\#sonBdE2QH&4i2)?Fq3T9t-rh%(2LG8)RHgk?+`bX]"64$a:9,V-R]WaDN+Uk!=EU<I[NZB&bQ%$OioQO2st`r5_WTC-U\BlDB6+K4Dk-O,atDGBiJT^;e4*T,?LUDK8]bWFf*Qf"n'iYpo3IB`W2o5na3:\@T?oq.gG(93CNHP.u2/%/ar^EZE@OV^8F2^iiQ:seIV(?j@6u;i:6-fq4AVNn;D'fCS,HL1fdh_V>A['_o_AjQ(P[\5(&`EZ@BMi[SNX*M<gN$;Is]flh_3>%k!Sq)O0)0,o%NN4:UA4lQODB]m&oB^rNu@>>s@PTXSn#8n$aW-^T4R:ZHecsYKlLHcb]#$jR^ckZ+8WH>@Y!@e]QP"`V$^F3G7Ak%Chg![@mT%SlIOt"fqio=(#I)Ma'F"_IesOZrqORH>lVIRs7Q!D16&-Ad.[LT^CHmJMST#@dDjXt1DQOq.TKlJC`:=-l<3G"q^-o\%UR0Z1c*>l,gM-,6C84MtbF=>qnE8p9I!`:K#$u)S>&W,%><gsalrskSi=tsM)MM3oZ^^Z4n+=%HQeLYaS!C,"7K_iJ_H9j6Q`]k5%fe:^0fdq&`De47Sq"^VLenBEi4BT^?FDL,>piM[4'O.8C^$4#!2comgBoTQ-IP+C?<8NZ69P`/3Ya40Y1`B'#MVe8gM3:fWlCE@4%2NCg%V2fYFj*@o8J%,;8[F*6UAhDCYh_3LGjN!^uRl/%&Xm]?:7r3:YCO.q[^UP#n1C9\!c)rp0Hj-RsRm!./9WY7<'Q-*2UTg4?%f?Hd7[!nNMIa2VKn\RN)^0+9lQ7?(EkOV2jR>lq/^CDX?)gse+h.eUg[aQ0Y#g]1Z:;:(ED,2dTfboeG\'pNkNQq)b^$-WFDr3Zl%,DB1j<NZ-3ItF$CZpq0WSPLaRN<U%25Ot-s)Ek\49&=5&*Mnd=I.Pn#f<rWcEGD8<T;%ONl.pYK5?>I/NNRcGhZ+SD-[:$M4o'Pe%-?uDgdB/<ss3Joq"c\8_a[U(#HTubMBCf&YOd7Jj?`ecWbo1*j\mj225DA?]DNDP#[Bln^[F+r.`g1?Rf#;HKVu#S%/u-g4ZdrRP%cV&SZ477B2@q0d8X\i2eU[>\\bcr5W#"Lna)I9[EXReEbdG"N:dIkK&)eu`Z8WNK)r*;Cjd?CQL`H,(T]@N>Ejd!2B9,2,`IJ1k]%W3r'T_-cAcc8-F<4ap@7a_:<n@/[&(S>A];`Y)e;42/=6XR+3.2L9h$HBHloZ`uW8PLaEHK$E^e5M'[dknC^LClb335&I2Tg1p$"%:[gh,h<DkTR>kk1?#$`GZ0UG@9p7(Z[U.`h$QGZ&C39L3e=Z@*e+_5Q]2kZRfu<+,*,kI5Sl(IK:W?us^V5[`;=:NUg"Rj+ph[)$%IG;\0kIY<jhYaE%pWW^q]%T_Nn+unL.Q*+L1:9<4@"jfrZ^`PVY812`9NKf5I2D:!_aYHR)\":Wn'8AMT[Ag1W_mG`e1#$As-AXe%H1=fj0u:Von(-r1UW^]cRQ8'cYeP+G,Z@!_3`sp^FZPRncJm;!f.OXaIsF3>?9^WOs6<=rVHNI/=hhCq(j>AtY9paNc46rK\,5LX%pF]b0lT;0@hKA&6D?g,`frBI,p<nC99)e\'Wa5&r=^S@9]453BXC'S]rN#>3=he9FLTC.i5%EE`J"*bS:F=)eI]ZdDmrt\8IeBi'%Ys27]CI5ao=fn$qOT41^WOAmlj0<gpfAnj]^4!@`DW[;7I\dqZ<jTNQMEbX"]k;a"elT2,4g;XqKKlbkrGDKmrAl08XR#WLU%RI?%YIU`AA*a'fNLTV,Hg;lcLt/[8)S9\9eX7FBj6QQ+*WL5)1Od$-YZG/'De./Gje9BZC&DJ\f2k[nn(tUuq"8se55W%b3rN.[r9<Fi%gWnEP)0=L:A!>@`pZP[kEbT:3r:Rs0FmJu=q_cLkSBf%)>OUTjode8=lMSk=h#a(W5+5bk[eCWnA+l<LpDLNi$IE'g--c)C`oXL3%H,%^o>hqAC%aW_?DO_`LI9h>,/KnkGXKGO+<``?<G%Pmom:YM]qr>!U[$E)p8MUI+bFtKu9l[n$h<8S$>'P8fJii!30ZRO=e`uTu%/DRqNS;(<+^>=l6/KP`;[l*SI^,q]p@Kc'<NQ^XIqR:/$1_Yl.\ko`ifdSeJg?A=Oog38cAERJ[$E>]13H\ULe&UaErQJttF$A.n%]mfp+68_Bh^MMDr7`e9^'9(ZF)q!m3K/(4&;gP4qi@EG,fRn?)ZVf0M21<\CN"rc#n*,gXBAYH`L$=#-&ri2,q?2HET@kW-s4:D5%2R49]p-,#cqNs9DdO?piNODZ]\B&FW;drHoQ%ci,`AucUqA6(%`NI`e0DD>/3MuK"$J"?7+0]dE><'%+oElHTGN/iXmE':IdR-q4%]L"Y!@kM5.eW,,tcQ1b]niu#R@i]/#-hUX"9g<9_Y_(3,&"erH%ph3"H`P:RVE@8t8&%rqs58KXd?S+r^qT0[)VTWZ<$^FL.TMeo%c/Sm+?<?oOlDL)jb^F)4j$M^CC\IUcp80`Qfk&O%egpY_F1Y.)2o6=Dlr]5IBQ2Lh5^hcr(2b(,(&SRRjKc1ah^'bhj@_t?k18_J%J,"EFC$rc439;gh;dQK&RHGe?]/k(^#@kHf8,rCT=?j^_UD3npGrKRDp%>qAR1Z!&2GMp#RW=6jiJ6[2Jf3Tq1L#An9?(N(<&QZD%Z&>k@Eo0!+*Xu[`^[1JH2=J'L#G6:p?B:XU.PP#V&<ld'HEM]tRgJ3Z/^HR!%7n(rPP(To&&[&LWmI:7)XEf?9ludeG@tufr8)Dg%6N?"c7ul&_\Qf)_17#nfds!)oCf5F&T_;,taJ$jS,_dYt`L(D@EDV).:(pN;)2<M-fR$T$fr3D&9QE@)[i4Z20>jsCZ]Yl9=1[X\%^:EhrTrT-U['ie]!bkhW^LU-a7CJGh)P,ml:-"K#R=15nad\Xa+Y#9:^AZiplRn_mb^LFUhef#"BfgA^l'1@B&p1hC3Q[P`1:U_?%_tii.Z6P-oZ(1S2hK@t8rZpU>0g_'3)O8RL9^sb"rL2!tQh>.%qMh,^F:WHm;jnJf[j9h&XsLW>=u7]iI7rb279L.[lEm*.QC,Zo%WoWH(C4/%)>W!srnlAi$`M!#!VHn[/\MXHUkrp.ee8(TDC6S>YEiLM/?#MbS?fR43?';n;s/>mZh5Q6)=fI]>J,Qn&%l8P3.T`mB%.(k!X$6>bD!\9Y*/?;X_3%df3qUoY1A\T03"&bHQ[H<aB!bJUY=B3*_s.#*c`_='`a;Ol_3;%E)1PS#/i6&Q:9DDpV97N2b8gIZA%3%LoiR;AfDmJ(9DdhF?5\kIs&!PO17/6`8eS"uo(G3-m2rV/p,jVFG=m,ZSsQ_?O43BQZ02`nE6L,-s^pVV+GVmtEHW^jn\>Z?(?%A5/uC)G;`\@!![MhT)c5[otOK,.W60?Nul2VeAT-Fm8<drjGU+L5UQ0"]T-6NOprEhPJodF=_,1)2U$/WCtC)%DDSN%:#R?T'IOk%1m$\GE.50dH8mcS$20Lh6%3bH;EOH\Ug$F;WQrFQ(r1<H!G'm\72Wi/m@k#^eAIL2r92@"p;=.6]0u2n.%uF!OJH'_b9s94H"sHk%c`I'$8;rU=Y50NGgVOnmmsSc4-Wb8$oD>/R-]=i/`mX#cc^ClY%A"ao]-keWimmHKrqMVaGc$U(l>@`^]B$\0*$=XmQ_<J9ai_Yb%3He^n7`D[Xg]Y;R,e[Kh0Jn-^kg2(Fs5QUnq;c4uQT^l%hJci@J#n</RH*5Hd[iWh.jrRC""I=!<_K3YKPoV\he1XApk&#i3_(92%@f0QH^8)8b_di9mf3a`]$8bOGWKL5XQPU/n$"_gr5->T=->'=,C;2n"R*,%DF16O5=42BsXn4+LGESD63^r7A0QXukn!J]GYbAb"%VP2*fnNOIGl:=hJA^Pe&P!eJlT>jRH2qWX1?6NZ_/d'bjP'5[1;CXLX#sjn=0mU@3OS_"!VPq\*SO0pS,d]ZgWK(F*-*IA2<P[GH%gOq^Q9KSe9ZhSQhhO=b2rC]6:JPW7]0RmkA<MdjbRh%H;?&0lkdOMERo[GQ/Y?$.!B%WYA[EPMu,0or[W+W:5hB^F1W1NhaI/b()%O/f2qdOpEJ<(p)3l^OeBl@_Ie@nEOpfH1?`obKK_Jp%t(/EbA-rJXO4^3a.g?TWs:U,;O!O/%9bi_M@&hG^NV\l_4[/&9Pm'h?GN%QQdF:UfiqWp%H12A]&OFBidW4,N*8&HZoU>*tR?9i'^j-efF]C#Y2d91_*ubMtL:M[:jKacX*TBKhSh%iO1cD:/Fg!/tdQnEQMha%%Y_9b_hD&AKa2qoXb%>79UBZ;d38tGqZ(dSIb7D,6CKgh>;J?(aZmkkA?oq4qbUGQ>((S/0_Q[]m'S723I<Ad9:'sAB3[;/eheLJ%i2])LC<pY:1?M8K:[`T61T1`n$.`$3oI,2.ZDut4//UU;.h1h)S$P[h=<F_\2N?\'mT1<U.2mW!BCV[T2&^BK;)2*/.fKADT/9]<%ie,K'1jcljc_[!CX,l_05`.iZaV1^@lPVtk&_1BNA5m`hhB,i<ie#G<qNLfCL5SuO$#,2t[MkgZ_%r,ed#i7;6D7=-$j/tkIZfLM%b;MnNWDjfllgtW["cTf1M6@gJbM:i!k:a-Q03X&d?%ZIhB.OmZE=".@1>bTd=pAJ#c#m;JMNC]+KfW4q,.]ZKpKJsIPI#:U2P1OS%?',eKLo!M`e`g5.?n)f"[Vtg(FtDB0R_?D_8S,;uC)[TpD2XYo&hPPF2eJp@YA@0+]Q,q0\qiR2ok^::-$ojRl=])oS,KX`(OW8^%6tVdMhi^$cm2.GqX/b6K[BOX*PAXOm2.2cUm,)\ESCB4Up6CX4ebertUSWV9ZlH[T%(`7c2eW\lSd3c96)SU=(bURr5D+tkX%/7=%Q_-R1OY,40%c(r=#+`sR*&<:%UJ[UKVmti-3HY'7F=LL6\/`*H7PTNJ1L%*0*4l%V3cjs!c_8P.TTaYK6fubWB@&@Dam_<4q&+;.%3V$-F6h8u8>-LYkc,T@*;I\Pp?N8+XFt)2mko@dM`'N-,PTFMLR'K%R2*EtCPQ,LEe:2hk;mrUu?ug'?o45G"dc-LKc;R'VGK6*h%#+)j1,s;^`#hLM!:MEh&I*!b]_W/h]S!,ml0uD.0ounjUmo"AlA+D=OkG2a6WOM%?B:_e';^c4[.o*&\_4Ik)'ag+d?+^)a5L\QY%.hlNbSAk^p]`m32kNhpZD5i?+$AS8&U:2#+m8p2V85+1W((AV9fe(BS>hmeda_leC>S8Y9/amhq5VPaT!sb3ZPY_p&=VNVZoZGBo%L0U4&l24"^M0t%NVjU@*'$fJn3\SR<0:eI-2(4u(=s(Kr0;V-I'hC);2r@)R![F:pojQUM(XhR*EG!F^kr;(:GKt;oCuWC7(JlId%S60'8k"%BT&$0CZ=O\3s*oHcd^-q66O0=o<25<78N%Pu&n<<;ZR7T(9<,!R7/M@<Ws)UeiAp/&kY8I%`o(]NHk=*uujmenc%pbU)%Wg]k97ICtq/Gm@J;3f?DaJl72^.j)5ArgiLP0s7rc'UTJN1#]5G"&2=l?'A_934(%7bISU$MINhUg:7YHY1H4ANpp.U)1_@]knS,%I(\,Ng=VUX;J3Q'mM<BT7MaPFlhh)^]rP7MRo';K/"JOB.$8l<ch:V;`5tQ=I$%#qAr9g=mFlV:P4AGP9LnR$fU5X"a9*EDf8hj5%WC7_Kjmpo)/"oHo5MA&e50V5E8d=8-QePu"oJf"#7l+5Q1STc;G7*PD^UH_>j)LAkpX[BBbu:'X-UFQ)8tgOqcb5P,\]W'SbP!dR%FK*G.UKMtul&p1g+-0*EL0\.-R@Go&c?mg(-ds=3Y*8M!?qO>#.-P+]RE(?l4>OUEeD+,`;m1rLa=uNHa,pPr4anA:";)'eS*Jo$%O>mo'r&D>Z#1kurOjQonqFX-@E<r0*aJ@teIiO/4#.*oS&C$3um[\*QZVqu,-V#AMb47m.ZM_A!T80Fi2"rD1.Eafjh]'#:po2[l%;Pg=ci@Z4-fr:aC8j?(ASH80g1FO+F2a*&jZ*)H-UjOVW=4coS@GU*UPZKeq*6=!QE&),!i(h*&P)1a)AKnZ;gBlSTpI]oSpVA&7%S4oNM!nMu@M@$lC_i`a+f/"MOe5&co_"hpuB<P.bW:SsPN_o*n+"ep-FbKR0_e5b\abMC:/N?]nSArUVN4;aJ_eCi,7g#W'UhmqZ%5+HL:opr*[3$5;fRLtlkQXTLE,ULVR!6g8b4!1WGWNVmH2RHFLnWl4J4^Y:09I*Tg,Fp_IJTM]MqMc7m=n[\I*uSF@Khe`?F-Van%7mcpPVpMgeq'WgSO(gcg3i[9J^;!@EirSTm9slNQoBuZ3OA:niK]KOIRRqD7p$\sW'3Hg\!g\BqTbc0=?tNE"<"/3X0,0j;q5;Tb%agtM"R:Fd>]pQC..=hs,CZCd;3/ZI@WLi(WTr<Z`_I;m#TR$sudeS+C:d)ctqb4u#EL;rm.qX+`2O,*7!96`IY^!la;3O&mTZ.tI%c`-.:rUI-GUWc:-1:iFo0;HW[rVgFT)6*?)r(&S@Tq2j,UgbpNa@O9r7Zigjq.msPJPONt1D`a<f4h.W]d&i+g[Lrf(#4S3gk8h>%RMX_578r/=.@-C(1Lqu*koIb@[=9A80)$F^Oeoo03_:;P'i)4g])tVoPmXFsdapALrM@ArMVM;h==Ti<(m=Q\W>]*OF6p4sDM2X8%q(-fbn8NYqpW8m9]2%5j7TEl.J+AYM2#"9ENFt54Z*I+*F01N6F-aILGeh3#QGV4$J<P#C<o35VaNPH@6sbUeaLk4T3gI5@]>)!>%/faMRpD(9o,GdR%`UKkQY<mUkr,<):V:sRL1k.5<Zh)0XRp5dfASgeqr"'qZ58p"Oq@MT"%^=aRf_j$KO&j]nIE9CT]B6f`AT?:1%-G*"6,eG'J=Sa"qX>BhkB7'2L;h"et9Qlo:I.d;!,O]IFHerg`kOYS+:F*QS"T''r"qsI0<&3.o4?(/qF3IE!.t7qPZZRT6:$,pH%]\N4(m"_!=Pt1rQo_u2JBHl-sc,9'X7\ftMbkj%LcWM-/hUu%<ZJ1A(fr2=K@k0XYY&_9rEg`J,=3kT&dost3[+2nd30@lRc`eAc%4qScI:%2EE8@MqReeGUZ4>fq7'!!,A]j0`ejQ6(_)F_f.n%Tet,9\j8[U(TSodk,'F-e(#2D0A=2jFrPq0/h2%_5;IYQq?RP@=$Z%5F$La#L&rgc?),o]I!g=Z$N$l<HF9TZ'Y#bUIc3D]I-4g>`J"p\MWbQk"Bt_?BQhKFHbb``E_N;Mq7L=O[NI3OH7KIo41gsgQ_p`%OXiOXo0VN&Hf,Qgq)RJ.L50DbM0VV_3n6$RZ9Xb4>P<A-Y4t-0]^KQ?OtTJ*LV"%X9paEu/L,C+flS)f2WAPa1i5)H/^?Ygl-b=;%FfWO/flUr=FID<W")$*UQ2*CY2P%9Mdb?mCf/c'a0$X1<.!\56F?QCl8!6T5-':]e9io8K4a].n=tUhTAYe"$3O(^lbbj\QTBjbW%4Rn!.l-eXJ]N8NPflUr02>'pjW,+Mi90AP9o8\hZRk?:ZNb*9j17Kn5rCg#U.'i*cEp9l9r>RkgDVu2b^9Zu1jB%?aRk?:ZDYP+8%nTIZW1KHK)/q(`/SP>GoN5@RS.'r0d.O\:dSP>HZ\!;/Z<7uA-\TBhj;.N\S,F^<f!gCN\,+C2:QS/*rj7(`DBt8?*hB,<I?!@)!%`[s$8e'XcgR(2,%*73WsFGVUV"0fP!<7:hPCj.2o9Wb.k(hU]l_*kl9B.>]YN)I'Am9X^2-Dj$)[57ec?)i'&e9c=P&!RfW2kftm%Fa5u_g:>jZY?*4^cdQ`/I.t-J-[TO?hkAT3PS7t<i2O;^?"22%q2`l<SYti!S9i@]c91cII5\K+h&HV['b%l5c.b\B=7Q6@ZA1j9%>J_TLN^##Q#0VDVY-2N;JY0JGaa`Q(kcV+66t9p.RCcmT(WE#W@p&ms*kE<-)8i&V)`g0ncnfmB65bNq5')L_1A-%YY2Em"g!AG"%.Ci7h@c,Meol2W)aG#HOM*[=Y4!VqTGhu#&(1lTb(.`+Gr%s"1St/3Q(ql(Ra6;.6@]aXpMaTCgH7.,M*J4=(dk*'TS!`&8BuM.1%^tB#!gqCo:S&d"Hl8FmsD7[OeSY7Jil5-EqSb8K)jX#>m"%P_@c9J=B.*DN22GP8K+,A^#(jM[F`%JIf!ql2T;k'*O"SE3%[O\DT%HiFQG:1F56:$0*P31@chDHWX9@B(i_p33:P=]4dsYMTei=FOh"%1atYa^f"O025tHmN"J+RS)CpS2K2N9u^#%F<B`keor<*B(j^N%@II43KWNS7@!FfV(CZ?0]HA?%pJ75F5?(A'Y,*F"o_ZW>f$f*m6h_N2<6lu`3G4PbB+J0AcI5rdXD4a/2M;O&@t,#._@*qVpGN.j%fR+nB&o6VKGC:f]AZ53($q\i`35>oGRI=2J2suD7Sc"2RiA2R6]Pps9V7`MnM8W&46Z9lt([h-I.<!!<mS[AZ1#BG+X"l70<+\qQ%$[:Fq]oFAbJq?tO1(;IK5e63CP-3<)?MBIhAVG/5F4D8hkD.3mThQ>jm7(jY7GjMor?g)f?XL+1i=g"A,Y[OjG7o8S;uDfYCi9%p%pKkB/P*kb$a^fA8E;AlMTf&kbGB'-+^^=tsMcO_EAKPV[4<prb,UStbb`&dLD"h4BAin8iD1QZB!l8!kYPUYuZG7\iVu7ttA_NCc%X[;d/jX2c7:/sm2B$(#NEa5;2\OfKKIH(KP>VE]a>RASR$qnQ\>ZX\(?a?W+a*Vp-n%K5IB4h]PMmXTa`t^)I]pd*j@=%%F?FK`\%mP0(.#'E^bYN/,0OYngXNpBiNa@g&,([=scMF\Nn_?7"8mukH_PhI0cK3Gn;E]UCKP2=7S%!2<+n3?B^B!83V0s,AZEr2kS/UjPL%aKH95j8Ul4dopV#daIlfq$u/hZP[=;F#X*0<67hOCVBYIcKhiG5'-JL\]K;?0(H@kXG`2ep,+Mtn$ek@W3u/2mkD)q;WY=bn_u#K%p[:03*O_5#X\gl3XZ^[Yd.6.7<uMabo]Oc"*,?`?DE9ic&#T),p5=!rqAZ])Q2;@k]__QiS7a/,rQ*0;CO:f-SB1Z`SGRSpg#usV%._O"u_Q.9,>,jio[E6Xt[bAbpA!r=:^&Kg:A?9Ji(<t=CpbJ'`e#QiZ*t+='5(@j*l<,a,piF/u\t:Ck:D8\Mr[k$0/g`;kkPL$f%dO@:6;ib4YF5s*^?q:(hM\:0#IUZ5[9fW[Z[[%[e3S5io#Ep)E/uDSYa\8SWs)"mQd&QFbJ\#XRUGuqqeOKOT4N1Z>=Xt%eQ0HRg%=FB#Wq?sFJS0q7W*@`RV-I]Ki2_2#NHO&C!PZAOpqQR7hij<aHQhnEhG4]0KMHaFb>0s+i/C$1;_pOBcBsmeS2#HB/G$qApYj7=0%2;-N%2nM+Xn&rbArFX4K#d0pcRnLKo1jCq,qY-2$>Im]^C&kGujHShDIaF/p,M=[)YLSth%'op=3jLZ=DD2H;=O/bb!%'Acm"uf8%2DKVdfpM/^=jN&U.d.t$2RL3#T6Bt^cDC-1QQ*C>LT,3Nc:5Nia7HoB.X^N@5/BN<]1TUA)C?ut1Ah2+]7`uA5'f[.@m2E,F>+1E%lFj1h[a\O,qKnO1VqslrZ5$"9luC?;?TD/RrS2IUrDMEqU.]oLj$oA/G@t5++IC/0WIQ>1+"W\@1o9N_T!-ub:??;gV<K6VM`rWV%Q//9<71qVYZC\8`'^?L;$WbiJk)0_T5V>k&b'KU`p,->Chp^h&`c;^?]$c9g[DV>N5i]dt+H*0h%\UIiA=tKhU,d`e[.,2?J8/Qa%Erc+--P-3NSttFuZ2fkJjQ$;a^LEKd-c<Tq-Z_]]ao^&q6#I0?=-cSCF:@c8*c_11ZN*o.PaXLpD'Kk=!_h!8NmgIOqH+s3i#d3.%:VFjC:HlpfkCjl2UO8J9\</tt=";ENHK5_$W[HUMM>tMhI-,cIs4!fk"n#8-_4uB@@c0cK-m--0\^hYX;*M<ZNRZe-Gk-44T3eM5%3Uch+>Iaq*L+;hu?gg[k;7u581:]ku2cTXcIXO]?%f!26ri:JMh$oY?Y$_0YdXA@u^[%5t9I%(e8q5GG5Kop9jD_qZrUOHp1i>>'%]7.9tqp$VH(W1IqHMNe_)Yj-sqW5aR)6qaCK>6_b%P@L<gAl]Ge9Cl^kqh^LL-a\h9?Xmc6%j"4?,-;sS!RJBP/fdt:?'@CO"t)8%lhu9DZ$60;G?sa?ZsfO28A$f6n@O-`rDM']Lhr+J7A5LI$G=D\3#=RS<PK-Za4DR3Zg`<h4l5kTYD).u%/m?$fqi5&?95R^s'7k"%F&HB<9AVrkkdu<>kpah@2Z119Rd<Y79!L"d^?_-cWh7?L)YRH$Pq&&r\dsmfemlp<H:5>^g&J[5q60XS@.2RVIRR#4LO[o/^D?J`%hsbn%frt8FruU&?O)l\T3P+,@)a*RTh9;C<7sFuY&,EF*A_Sm:^$@V)<a(W0rUSKaR5$PZ]7+A,P1JUmg3DnpIf4'BK=pN:;9MOP%B^8ZJf.Xn)!q5XgZ4.JT&<6APJ/(d*aaVcYTGr#OhY!A_IFYOuA0a+e,4f*T^9c6WomF%<WaAe=ID>7Ijm,T'Df%!!Y$[msp^6*@%(3rD'bF@&NH[LHk0Y?3%)u<=1PZRf'e)D>E?,)V&V#kk=p\V+#^0aNXi.la40.l?97>_QMY$YY"$*ueVSu[G!ouf;K9-\c70E3k-%S$A[DoeTXSlW(\^]/#"YV7u7SB_5\^n+u,rL<N7.ra!9$`UL0m0tj?,f5E,4<Bmc?7e!QfreV(uj!/g#0DE6jZYN)%Y2<.FX+'26%dbsTjAU->CDJg?Y?,,_Y@9A!@CVTg4qV(-oB-]#?Vdst=8VS:QQs.7b(Di7;?,2Vmfo/e(C9n!1'5<@/4Zt0?=KjaiX3)J?fB)2^%P<K;;-6Q6[lJk[@Hp0u1r3M=$C9+c7q<n2JkO$;#G4anCR9UY;UEZ("Kt0<9#PHYMjnnE10m!SY9qH:ZN`G!8r\44]ktaG=p<Dd,%fqZ1VVR=/;Hbinc4hkZIm!N!C2O\hIC\(IeDq2;j0!*deY8_9WTlFigm^fZG[!d.-*Ofs:=XR5TGNHsB],0eVr5k2rFmaM.qJeO0%Dk3Mmrj".?],g48HTGm>gn";kC:2V/>4(e'2m!nnl(mum&P]Y\_q1guI-tBSkN)Qsp"',n?Ms-facEVa@l(;=V['E"2\2SS<=TKt%5JFkFYDeO_$[Yec%p,$507LTaq>5:$m>OR>*.+*#p@`s`P-D=&%i\#/($el[)R+j+.L4qu;?LeC]kFl0TsQ^9^N/IN:I+Jp";b,p%->V"]l$3#6rHrrUh.l?%cXr1O>OeRdBA^:an#_S7SJ>r#f@<B,F+<Y`4`MNJ@d`LuDf=mdqWth-n!g_hEA<2.M4^mBPOO0qq6Lk1%)fpklUpc?*HdrF>l;@@][@o&6,A.'Zj7V'sgHBIkIUVdM1N(ga?EHX(@rp,fh]qi7D"c?Q?E&O5[sRo!o%<jFpNgXnpN11ek0F0h%[JhQ51sMW<FCpYR^9VBPm5M(io`Z:)Fn,H*D6-0aZa&rb7e!V!B7'(/AdSHZnq[,<XbHZB.Xg]uMB=pG2-!qT5ERBinULLTbeQ/A%e#^5iPCI37cWU81im^*i3R@`,H+X4:!hK"bq`cgDibr$C*h0S2LRg)*IK12J`4Vj<iO&GI+2QC;=m_"@X4;FRLXg\CK<t.AGaX#r%<gL01e5)`ah0]dkm+_)dF',ZhK=.rZDFS&\bF>PRg(.B1S(gr+Q#e`(b.c1g4VQ;iO7r#Yq!#+ZJ%EhDA+8ZtHWBeDWJH(Ab[HVO%d'4N?`(c=*7_hZ4&[8$Y=P/9)"nX@lOf\KP$@lWdG(qTo_SJ0T@JB9JKs-PFqBt,pi30K65kWN.330$8q'fMC#n%i&SR5U"^O<e?%o/(a*nTNacX\lApa4rfUU`6IN#A-^_(47p9g-hd68qC^\LS\a`5=V:)BQN54AE.??qjK`J$0++T"XP6NZYOWIQ]7uHm;6M4iF8N\%+]<qZF\bb!>pm#&rHXp73LJao$3!%nTIg0D3jn=tg@dB$l^Q/+hhB6pB.;\\@+?mq0)\Fh't=ZWeV,'kPKj0hrp57<]Z#AK`;_C+%hBtK@pZHfdSH1"ncWtdT6_!*/"L)Q'N;^a)m6qSpLGLc5biX>hqod[)U:s&r\BA71lPgYhhf`tn=)g;tZ%k4Vm<]7]hO<E8gE'^@%f&j`l_N'((-WU?D5,\j>X]A:^3G#WUr+B3uao9:H\oS!6K-3?'$UG`9B>#`niiCZ'eC:5Fa,;d5.=;#@nZBU`cOl.2TMG%Q%fdPK%NC!JU?f%tKN'D13F3go<g;gZsX.(2]l-5M(R">eD!:n4E=^!]SKU9%[e6phT0"lU4iLWH_IaU_6'pOCJ6L)MU]>O;WlalYoenVn1%H>Vq$Ul;tB@0RD\G?0bW4f*Z@L<obbMCO'u<Ub$Sn-=VRoYMYfIf7gmBLI%U3qi".;()k?A)dUnUg!6R5d/%CDBp`O\%emL%`OpS%>[<"C5m$&8DrY<TR=8BIO[>u4c1;k^BmQ4Xofk5P]-!Zap%)hJ:JSB<XfdY/8(r_QKA:tP#o]`3n8KBbi9UZ[,6DF!r@gCBr9ZdK%?Kn^uG$DmgqbUUVJ?LZIj6D>.m,g:V0$_\1+f<2h";@uUcdR6?cPQ1#+E:lCeIl*p!B''-JZb\Q3_bhl\;W(*hn.Tm.W<@rWo*0S%Vs]!]SueNI6utH]XlWjr?#J%bkfNH^$$D</&5(C*2ijSbIPcJ15>7lcqWqU?<]dG8V$_"(08*WU>R5QLW+-QJLr;&fH_6kMb*tV+%'gM=?Y4d(gWmK%SZMMAo'@6"KWrd4W)l=.1O"?W@TIQ>d,BkVG/@iZ+%o[ROnKU?sqNQ2fU#q&ub*q'qNGA+XL:Y#OjBJ@Kl63O_%<F[\>@9#j]ZaSEp04e'XB";Ui/<bJSXc9*@:WZg78/D7@H%AVMGA#c_auS>8@&W8gLiUd9X>KVJ+&U<VQ%XJ_O!s2T;)HeoImc:E%^SS*)s!,[3WKNuG:X3Q&kC`![PME'8TZ1D>Eo:H+PlJWN3R_D;e<83c'h[u98,a[q[;6*!a$8!qSeX\%RfU3%;,KbJrk4<+/kBR6%48]u)aEk63Z\/:jH\OaPdR')R+*r;n/Pc6V]BT8Vh(=;lm40U)-S76V`^.\V"`1kj)5deUcJO,<g@K**-FIU7:#9@;o$4V2AU?&t%i+Cl7eZmgZme@g2j6aDKYT\89%c5XH'V9-Crk/8MNBHia.E:t_[VnU.]kOJ=Y1T5OnL@W72rDrU]!*]tFm]48<:VTpWqp9[FPZN)%kEgrnCVP"9F8&Y*/%mA`I+Ympj/;5*7]XorCAb]Mf"?<SCclj_MrfX'LTB1aOh]JWC0ijAF2f_mR]"X(bdf6d)[0T$a00FEIr7*\%0<THRmC0,\D*FKf^0LKEqru"R\L79pRq;IB>+<$N=YEe+<k#gC+DOR>]TTGs#3E_Eg95bmIV[s7]DC57lYK/Aj@RgkHp7CZ^8rpY%d8\-J0!;sKbrH_u@oHTK(^gCX9TNYkJa)&[<j/$eM8MPUkEgeClH@o5NQ*F?HhGGAkL3gWom3-5P4'4@f5F9HNHjI^@/\8qp\`:f%g=$[nqXjZ?X^LLY#[81DFI$dihM6=jf%IT9kM7N)"!tqd"JbFZapgf5p<f%Q`p%]@1PHb&7>L=^^H*hCAP\F<c1eKO4gq!):o$=,%COU&]N@7!F=<Q`lX__-$&Pq7U$(7Ua])3^;p/gg?H2RuQ!N;9S"oY@^eJn=DXo5K7ncrakhMdI8:L2++18k.kj'BhMWn7Y\fO.(\%[i!`MRbpAmY\19O\[D>Qs88\EI<dW,1](mH'tJW*/oh[.XD50WYNF`9Jb*T,b]8e9=3K@>F[,D2Y<Et*[B:j$[Ot`WeiV@P*\rGE%H/38Ar;M\Ops1H$eXMs;#?SZTCHL9\LR.WL-*rd(#ff'r8OU:o37D(NDt@a<X07ahj/:Tm[4D4$_5kT<O0?sULVoH[GO&V>%kJ]c%Xm"C4nT+W#9:)u+=3;j#`hJ4%[N%nKq8*uFZhA)Jq<O@Nc?T:@;"s&^%%@-($\@i%>WPUWQcoA>HAU<XME5?pD/=R0/,RumMa-p)%;sRdkG!E-'5I:oN!<cW'b0%:q4mLntP-=@l5KPe/&()Ze5@PH79tg^*n!S2g#GXuI]Gj([9aV>g"n^'J&8G3W=`AN*pSO?D>lXdE%s'2'/?B_KO,sU@H'3q65.\-lUISuFn4CI#I0fNc]+nM7Gi!4j%?>BR*YZ%GRebG1gB0H3X]6B!&]@DeoUcWr_boPP=[eHj!hS4?F%+FHI4bOR<1Q;b:Y!5s)fcWJ$3=d(i*1qPnH>Bo*=2"*phI"Fc3>qqCG4(:u!19]9TIHaN&Pd#ARO4^&U4Yg*d:7"VO1Y%dk*-Af7%Ai?^HeqZcS3,6a+E<j_^1r$*eSu1L'fC1p,'4[;m=)5s,e`FGI=jSY&2bl;KFUCXqFOZ?.SP>5?>.@ct?7-(c\=6]-,+9;"aWH))%[2/3(T4Zn\Dr:O>YGJjYZF=>j^@'5W[X1l$"u>[I02/N-6]X3*Q>s&J4'g'W6rtP:!M.\fW7!tq\Dm-EH7n2?b4#si:\n&Q2?+7f%nPd%8PTL#([o8Ws5(<f'mqo?jkt5jTrRQ<iNP[G!O'7iZM-fN6G9QUkU\=Ynnu*#Y+p<OEVEc4qQ(0>jn_)mtYW+L!Uo3h9C3@8S%<!&&U<^A,3.9/VTSi,4,*A)]Z9JT"Sa(f1o:lWLRlTFNnl\4$a94kHao;\(SO,q8IV]:R[;on)qD/QJSVJr.+B]VK=9T(P%[S%?8%ZJt8RrT%V2TGTa@BD+7^3j_L3,0g-jPoM=_ENJaBWoU"6Z:b-WQ(6E:YPJd1jRf2;lc4KW-.hTQrT@/NUc/4uW8t<<8)?J.P,!Ep%`VYW^*0M's,/q%aL--_5E(%ihN.sA=/T=+84F,"8df6XQH;gi:n)n0Yl!!iYPU[D5%NCt*B.VtJX>Fh_Sndr5)m,9/B)gb?s,[0h%j0J&?A]OQ(%j03QASI%EQL3pWmAX'q=SU8.XPI0)m[?rEf&,RXKMH`,a4kCk`A/rj!G1/QVk?!""dFb6VU=(=!Bn(D=lg1`J#E;r%]tj[7Q`OqPbu\3G^X+FeQRpu8..]CqnIbcj)k_\G^%-(:gCL?4NLt\Q\[G_MD;Qdh[U6F)kk_'7"k>::]Q+H8^Zrj*R#/e5'q8<)%%;e0Z]=(cMUGr6!Y/[_ZQX),E3\Wi*=KWC(=%f]-<NQO2%',t2@nf_b<?jSK!OJf7jk*\I"[@?5cDeD%"LVoE*>^n*/<4S&>4d4Z%qZ$_<!l(i0$L4pjJlTL^I,q]"fr10b!?,!Ea)T)M+jH.fS>mCGfEMc:_/=Ktg\&Iile'b'Z2tpYr,5QK._1RD%33\q@t,o;Y#C<H%=!,'?7TJ3<@Q=(K0INf&Fr4&6%\F8F,.;l#++$t@\mlYj'0u*UhQOe`N_=A;C:\fhKa>c"3[#,0'k[*0`YQ,7H;KSPbGFaGk^8jO%CCn9*3^@E3$P36qH`g0)N?"I3*&u/'%bH9j;B_F(&3bI!j+n9<@GD@b&<J$A4[;?t#YYCG;2@*Ke\DZ.\IaW"L4sMuKj\'dgF'r5%@8RWAD&4VDJR3Yr9jN91UY)Hdh&s./W@5^R!^NKARLAL"QJM)2E<LDkM/EOIp"8dZ.-3a7bG4SfOb;QM8jmJQD'3Wl%fQdj%+XFh%;C7Wj'pQ',BYj:KfPs=.XCH7+gB[&^0`_=Y':9&R-X%h?WVRd5.ttgV3];p:pTBM:ikhM0^.0-[$ZPB:(p4+U%6'#ANBA2kCKFq6%BEYhVIF"\!NZ?]rXp#mM%S^CD=YL`'2_Cg]UiCpi>I7aiLbKo/'e:#Q%.S]u+9X_@ZSE\?*;g9`$Bbd+Oc@fiM!)gc631&AIfmNt%e@l%bO+1_L"h=K7)d&`l^l@#D6J<MHlc<%1Q`UCN(TNE7S:_*5dgp-2OJFusT0X%b2!]T),=3E[bMDKn8ujFS'UlDbJ6#[q44NE5%NjaZp'TZoR,Q`C;IG8",@.5lIM+%k?a4%X$8DjUW"?p$AWSYN0,<KA,Yn7%H\N!`,*ag,m8IL+2ZTUbsR*btt'CI9gFC:P)5A#i4%\U77!a(EL74"q\6(a?D<J9aYhG!O@'^r8LQNj:7/,XWDY2h@qrQKR`i_!JXcKbdQ),!PlcE7p\s6p'`cRm)Fm^"@A(Aj;/^es7%r%6pZ9PNM589BSXKCE3,-/"`s@h:'Jc)+t&/rnnj9f!0Sad+Bh^up08e5#D_EOfMN=hN$',b82l2/<Z.#(7*.]2Yk1a!pg?ee$#ASZ%%S+Hs@[_G[NJS_X('JM?[0Ljl;Q2A>fKKa@W)4(1f:tOG2#:Z3\M!3[7H9,j!#frnc\E9513D0DYs8it^t9@*!@$8VpB7d9f@0Hs%d#]=gU^-pUI$`<R`*s*f=!M0>CpB<06Ji[1%h'CXg*D0p.\%X.GaaDnd#']PL?+C9?;4Qg.G,l@85pu75fiUPAD2]p;G@u"h#O&u%$#-CB:nSUd-5IeRqEd\kWA7kh&JNd1c)]InF<s!eC"aBlBbYM</L2)5Ll6qNNo5,oZODK:F$l,4'#X)LU[eIN\g.E?"!aR0n]h`>%:(%4".[0<BgHi?!CJ;R$OT^6&D'/F8'\ot4aOEY@iBd^^D]o.56j3W:E=8.fgB'':W%OA+!b,!1@A+u6!nV)BH+%S]mm'bRK\8Z0%g&jY'&0$7%LmWYMd`/ZINa^q<Bc&6Jr.(S)M#N3T(bA'?dN(5\8/q^g!M9Q)Ck:mTOmV[]p&cQW#?BED9mT'>+"/;;>OGf[[A5c!%S8sk,@S%T[%t,hbh`@_.V'@&A%1;^Z3^2b0J.doW&l.YqV#fig8;D8Rh?0hGLE7OG&90lIiUl*'i]<3<!ni@W(]Z4.R+gKo(/oo2%47JVPiIjCm%]1Eo"p0BN.3>uD!_P(=(=3F;gfu.F]pQNdk"t8Om4jG2=CmDq/0FtjlM4-6U3/uga(W:9g-^U.Gs9ag_UYR#=FOdZ%%mUL2BG16iFnh&l#"HV>V:`'XEPrVW7^[u:e[Abd\W@e'0&]esZ[O@J0_H@*!G%FU(7GIH2QGbcJA[Fre9N$9I)<*#2hk3,W)Wno%N_u-5`"0-%3YKI6;R2%n-:A"TKW#XFNWfFT)4M1F:UWUZ1LRnpgo40slN<2J"QgLC\7<p@&.!Xg(f7cHQNGu,Z=CQp(IfCV7XKZr%YoT4.JFFOFX;GU$5\snY)MYkklno"oW2Ct.6hkc_G7oN[$S!YXWe!/gC8![tHUt2J=e[;X#hB1N(O;%XC4pl+)sCW1iqbh^@$cNQ%,dojB(WUc-CH@2>%[k<Z:i3"U>^DXg"sT@>@;,Ftcp0mUVMUaQ:d'?gc*[P7$-X+dC@FPk>?0SjYkGN1p-@f,'cEiU,/H=gC-qoN%`gkm,Cc^J`[U+jGY]?Qt"NH4/0`+USC_i[F^tSs.VA,cU?=FLSY)C_7_gl1j>R_-mFVEc.\R6OjCU63Db[jNZ7!qsj&.)k3Q,DAi%&n,hr]BFT<V//n0J4'Fi=.+%O&5F<X(WfRb>-q4>9dFdBUH)TAfF?%k[MAC3U_P?^L?D/AOr0Yk8W80Z:7r7Y9IDh:F>Al,Ee('W%A5!I:;D;po/DtGC`o=;4OZ:39.OQC")&lS)W?ED9C_Iu,L;)oWVcKNE>^5"3C^.hg6\nOhTL*%K4[sf[(3uT@V*JL7qAc9,A?J#b%3?)P#.V&q0P:I!Ik\th[lY`CKm:q=TE'p1FOGh/XcY0GS/`n?P=eK?4MF]cW"I;4C6N3Oo8<?K$KJPmm,71$4`^>=6/[c]ci6<7:%P[huQ1eT$s+b5_PUaaN#Aipqt,kmGV>`Yp'EM*<q*3+5HE)C2n^ijZl6%_N#d1@.N*Re7a%!lR`&aamu#oSB8/K+W16-';*+\M%`%(uq\MH8Sr5IK9NDW+0d-m(05R<p0Mh)Fn;*J<4\9j/\j90Y`r('QB72<J4P,ai6VXZ@'tH'J^2Renp6lZ(YYKW)Lq;",j7c<J@*?%'aMC@%"h,q!ceKY(p5Dkg;&#F)^+WIa2TF6Cf_e$*e!I3OJP4iMF(dQcn!G!FX0H&>=@?T%/L]bX:GXG\9/',)VAdu:BF^DF@7^d%NnIa[>Yn,-<.YGmfltYcL\;_6f1>uSEZf+KdB<n:91i!el9ejl6;tjE4h[SO\V6%*Ydj.kV#iU:h=QfZlA-FO`1S"#P%D$CQ.2')%.b6L]!8T`)mrG8XidM,rht;dg_Q\FO*pe))hO3C+\P\0c=l7([E#BUH&SE4Q`[XZ$0rW2)K*:1:JST3hF?;IbcB-F25lq7*%t-:9%4]EFa-G1O%K^_&[?S'2[aSGl\o!$<Y>u>k"-n_2-1rof`N@Fq=(d-PO#hEQC[t%cj3YkWTOc9c=7fm^iC(STNoU'qI1!YBudqGLJ%MfL<<%7J;e*<T44W"ehSWG)Be4P$DD^I,cE5,!dWYn_"/a9+_>7u!O#B6()s0&UrX[$k)`02a3/R:m&6_"2r['J*(V#q?sPR@9fl%5sN_"m+[JJctTBY0U5>C8LR%]]'U0+P*fd>&bF`7rbuid%3uENd;b1<#ndQh?a<rSY[o1-!=1$ud#=Yt9G=84]Pr@7>QUi(Wm]r1%/dnm;N@3(nL662r!QLY0W`1CB2>dP>T*di]Crho@@Li-6iJ+U.(kH*/UAr+5&J3VhCC@eBQpfR"7j_Z2f/,7;n&a&SW+5$07@b(i%l85Oi)_C,PpMDig#hu703CHlHJEo;Fl;EFr$7m-\`6_M<r"3^2)H3Li*gAXkh`8R954X;%0-r\$0X%O3TO&>;a[cnEksZ@_M3#\/%g`?ZjNd,+86OIW="(<N[7h$V,"DlIF:]PSL+J2mmH6JBh9Ua`"G6/oX\MutW^N-l7<gJkuR%XM@5#IZ+J_?^nJ:.V1bb_lC"$E=Z%">o%uaFtHBeRU\36<GVQ&6/^1b$epLZq@.CiBRIM96o@g*UqM0@D^i];9sktZFk\oo#O+7j.ghCnJ-ZH"6eDF6bO19S@".BbRX:`%$!?CpVk#0-#ds`AjTE8ACi9#m\:_";3j'(9's1]uHEL9uODH^\Wfe9MKQ<C+,d%L=5cAIC<!Lun7"F<m0*5e76O1:ip^3+X=>/e"%e\Ifc`LC=#.'7ceX^@&r5&kokGt1-\7SZpZJb`O[de,F=O-/6p04c<=pM%.?K.!]46.(NaCaRRj#$)PNr1GCgZ6P@e]=,\D1+*-n%90=`O4Cj9$*a<7=+U^D]H6tSPNX1&7@GF3S!4e7,Y7**U+i."X4IXa4=O[B1gL.ZS#l#:G`kd;3l32L%#S-oW/MH&F?:J]Q*W3]3%9>rWhM+J`jiEDhiKRYO<^!G.*@gZ's&qqe7R#Wp$R#WkL$V8Kh:<Gd:H;%2crF7"tR2bDi0gmQnLq1QJJ:#<^Umtp-&uJ7aZF*_>%+WV/QXtV$f!FZ4GEeZrJ\XN/5#gk"2lDkucOccChpS$KXl=%L+a]^.WY]$UiLd(7B>^+!!5kWB"T_drf0nh%5R#^]>^k7\EpPgUi%Xh2M.hjD96D_-jINaqCh0c^jP]>B5>/B#==h$XslMpaI?:[#B.3I7BLe!/?26TiKOXqm^V+sGUDYF"hT%TPB3D"<SJ>\6!s69kgM%E2\n39HhP7VIOu\3$h2;QirX\9L?lR-4-&b`UHYYD5;)CD'.jSK5Ch2':3jFR+dMY9-%GI0c^j40o9UN0nfq;=Ff6i9D=;m6s1Hi%`k5bHbTg-Kr!"klXD/2p91=tS'ETm)CSh9@;NP7ZZ/i]PD(kJP;I25(A"t68]tcG+%:nY1iMf21n,'](Tb-<$dkPm$8MMK,1'K)8%=I6*el5s[F/DuH=66'M!JE%em>8i5e(^a%AW'GmknJufV&97s3iPE4nlD<u`h065pI%-7Q7,U.'Ca*Jdb#5H<".r.tpg7)mOBp>g%Wl!-ML:4AI1\Hm-eUt!fJ=$l;9Mm"d:!kCm$9B6=5$pcA.)t5nH:e=T"-/*CPuc&J;P@D1H@>_,Cema0?:t"5AOQZV?/+=F0aKU(%ZsRb]U6q,d`bHn%lAm.?'Sk&<7+Yd?KB/KrG_jO;%G*J!OG1ERjs;@ho.BA=i`)&9SL\SfWDuDgjE_XRJ?*MXZO;A(Yuh.+(k=r/%3KT9)@5niAV]F9a*KO>mT^>.Sb"fn:.g6\B@O-S2@YECh&:pH?*FY/V59gHIHn:r3^hiYo,3"al"'p,dE$3)C*OZlpkLuHQCc<!P%-/dM0;4gNn2$qBm\hZr8@,jL.`6Z5*#Pj96M.T9q.L6%d@ZHJA)*t\4mR^kgNfV#60pA]D9/.cLq0pNl!rNS@L^]O<%j-EjFb#4h%C@VMV6#tMEo2s4kJ^B5qI&8S/>u=:LR#NV?7Y!!,fZ*oAej@^6pT'A&IbZg!2NX!I]UXJ0rMnM&/-S?d12B5!'i$+'?HAk8N)Gt+%s.UisL`NNMZ"3rm*S4;TJ:7!ia>(a=/M3Tr8rn5t@9nE29CE;DCk1.RgQ+PPZNr7?UHl!G1Hu4VZW(W."*pM='*^0M:XQ_3?X_/0%)Ad(^3TQ3@!c^aQnaHrT*:bpZaoE[m"%LOtB@1l3/KT72!XZ4HOSV5E>YTcDV#FCNVa5.9!H<u4!._p8oQ:Kq>/A`R$]phU:g5;)%1dr2]C5%[F.c_bbW[=6Za(u8@f.fl$319#](n63RnB!kN)$#D(A0M^2`nKF>cQ!jZpjU#G&C=BM#WmQ(2Fp-MWj)gGN@cDpq1rN(%g.[=LWJ\\IJ0?n<Vi]FC`ZlI:=IRnlkWfV+g`5Xe4@_[u&7_B.C'3![=->)3EfKWq$sd<P,V+h9Q(W#+74&YYAGLPgB9)oom`(Jj%0S3G52V6nAQ3:cd/>W,VF#TFN<`94Dod.V>8Q4-Wi$3(S2_``$5fBoKPFeJmQ#*9LKf2/$=+qXVmT9(7(t@a5&f)W+s.pM=im>q8%KLAn/&=]@Fo_LD_%`iV=0GG*"l_[*gpR%ua>/sKWYTs"ij+.8F5%Ah@NNg2-=J1P,+p=%TkMBG[ZRue4^SO>#>neK[$;n%+X]GYb%ag7CrPK269+\'mabfp>a&F2Y2gcYMm&.sd]"i0_kB5.Ej6RrGMW;mf6J<jlM.2+`TqeW5W,SpYjq$(1R]A*e=,n<J6f*Yq'VJFNl%7ZL!A8PkOg;9MilL6WX`&nC-nfc&;=DjuGIP/9aRk_q;05u81-)AXIVWmM(ZGD=@a[/aK\XIBo]8*:dSM$/c[UP!#I@_feKJ;soX%@@A=?0ZA?2';.g^CN7+'BEsJ+TRY05:SFKeil%Q@#1;rV"i"f>P[)RJVAolD7Nn5idP*;T`00Bk&s=EOJ3c6$Y5:c,QZ<BDLM=h%%H@ac<#$gu`V&\nT<&H\?omB\r&tD?CjOh&"1D#uUp)1o(%Z>dk^_#u:nC\Z`lQh*BpTH"O4TW:_Qdn@Nd^e_O(m3I;6CpXGa!ab.%Qg6!4FLn4Wj,h/6@`gm%TTP*#h5DG^eH$2TeG+3M]2L7s^s>cDK@WA%04L%s_\uBK"rIDWqn.B"=+OuH35QaUP"uFiaR^FcPfqKW%[$j648lH*0r6?PH2%#IERQ1q!'FG/6c]ro*0skoIM(c_=@c%W:`+RPV?O7.m1h=.%$M2nB@,4,aQ%&#$"C)]S`nD4?jg,L@4<HcP%raK7:@*O<>CD=YW+E>iQl4J(f&H!$![tJ278m/C8Su^IRJ_KHZApZdRTl:'j;O/hT6ql[j&3bL@S\XFh*.-U4(7tY+Z4mAQc!`V>%&ee2MdkPr&U,h.Ab[VX8V:5IAV1Y3N-AVYaR%O%l6:k'.RH_dpj-Y[+U1bKA3T;G&LlK$i-asLt*%p_:.cKs9=@01S/#$XX%0%9J%F^P1'%S=-p#](:b$sr`g#$OI8hi(bI!4=P?ldu,Z0Y^*V*MF:jpjsI"pp]G,g`4>8"Z7!Fi)bJcT@6H<.H*lF:)bJk8d)nM=>lPD%H6VJb_5]/>:"rF=Zq:Gj"(0QsZ%2X5CHCTd>c^G&P06pIANTSgl#R!nMM1k0QGRkZ5>p>I6sSjpjTp<jEKRMEQBDMVK-l34M")Ls%;aQO;=frPjdg#^11S(&h6Ys#:O7,qf$cplYE_0IO.F)lQS5;/tlkgC%4RTLB#8tgM)d8!dB-YqqNoh%[;>e@=XOi++nY'Chfsk]m%T_AeT0[SX,#/[bMqTeUuAaWF_(,q%d)sgWo!o%jW3Irb!o-gEM-Xs>`cli-m/2tof:+GTlL&jGfE:Ja3,f]e*)T#d1fEL#d4JfTn%Y/akAq:Q>L*IbFk)P;aT^!OPc%7LEkr1m/cjs%\LXHlWsnh<9sY6W`,75cZm(GVSS81t]eZqI@L'PVgoU:j*gT#sqDTs89eFI$SW%qXFH>8i^5!r&8_,Ka?eD#_3M4i7WrRQK<D7ma0*q^G>]3-<HO;.QfO(@<3hFE2)!QLHorFU.XYU=tCT/h8RBXdV:Ql&e)ms0hsHh%J$4#%(NLP7R,/KiMuLdW7V(3K,/iha:t[N<dYdMZMiO1fLo=<N.WfeP`e'L^2q6G!0h39pLf/+1l@p<%^)`WUA=7]U"Y@`f7Tekn%pPY)&EeMdW]jR=iaAg`X.q5bP0cO:FM9),2_?1em-B:K/3[UaJ_EJ*;fel0#DE9,ZK:6mV(aH7jgGS/TU)nGALJ=c&H;/Ed[,o.e%S_2C!3Pm&*'k*>'@%8Mc(.M`,'MPHBeg(i*lIgA$'.4bXT&=Zj`g0aNgkW_WaY4kkCH<eih)[l/C]Gk:>QEK.[3CX59/)>^\6Qi6%`Ar`Wa:ZDIeei!f)MX'k/1HqIXWkXBI6#10JmDlUV/1<Yj0Ha:"/-Purgi(`1;'Jo_W8(sMSRXs$OotAUQ2T(.ii'i?ssm?A0.+@%(_,cqVQlWpeH8nW2qD7)N%;ib"B6h7[B:\-"b4pB#o$23Z(Z_f>s^o3Cf_JCFHk@6_5Nqu7'Qa2L0UN;nil9=an'>G.E.un.lW<>%-t0/d>l4mK:Zn](k=#KgYrrhd7_ZT,^g-<N&=A2kR=kii@4C@iAd=)0DpeYYj[=X03s<FoBl%d#KpRraQV0mPTrM72]IkhYC(-kj%&a=U>V'PfN'L,ko>gY*!R"/3e&2#KT@ut!m)OlHL0_NVKoMTpt5]$4,0i-;[9kPD7i^^.]QAXl_:"=nIj0>ipV\s*63kgpK:t%-0%j3>^N5e;g'*(O*ICc[DQV=602UBDPE45<nT@)p,88l&kTl*(1j@"BSiR+pA_^#J=,j6<8VVHdNg+K;5JK$@ce*Z\3OkF4dPM_VHS%G@Cqh<Zk$9;(Mo-gC-9!g!P8I+7W3OQt(jN?q)^OJ>uLlA7cf%iFPAW_V'^4eW([dJ;EiUY_j,;"t(S1A2+rSN:euKKdc,R`.[Td%An'!+N<slrAZQnYQbh^g#['l1&u`qbJHh^S[2t/AK@nat/'QK3,@0YGp4s-!'H8K3_0&p14M2"a]d?GFE(jO?YF_s"?/m^P<g/7D%h+(n$F(#S'rN&Bf1+GO5r3W/05Rps:3^DP9m'VgmKR1]H??-WlKk^b$NpgX'\ocBG:JR!')F-]Aef)PS=jnOfjg^hlP[@B5C.`T,%9cP@NX\Z+CeJ*E<>dQ3p%dRU!Mge@YP%eZc$+X_C`B(nX0sK9W=f72@f7CKlGk"IDkrL;#%HH4>dOBiF!IgqTHkK8`O'R1.,U1iF%65l=k(q8<A9"+3kD3HG;m:6;D2MHshF"''-f-"aC_o7G,a=)a.R"gLYEkOeP;j%\k.?OV-C@^Tb%\l&0<O>*Bh*<Ep3ZnYT0f]EC%I<!9/&B1O]`fFaA''?+1g@bLIKZPWW%rhUD-SDY?.SS`mi]@T7a.iRB#W<<WkbV=>%,nu`^RSCj&Q&hc()`T=(bGb2^1@GZi2mdY%&N0bjN%@j[,l".7#_bi:0KD>C6rBej9NMtfZipaj-o;B58n]HL,)N6h*Z\aZY@R?!&5.\3(?'I8,Y4f/+<I4C2e\&DHJ5M/dFbs`%V<CbX0uXjk]cQp,d/fq6Oo#Jq)/pF0a-Bj2Tr[T0gG<;BR:h@1@*W8DK[IIPZY5dEh(jeJHP_eU<E#79+Fl!=b)1#m-pqG-=>c1Q%!hnffp)1o\1L-tO6R'+/%39L*O,h-VbZ!IFQQ:U&0"YO]*l$Zqabd2hPD@;JV[9E)P+!l6Pal3+[+@2"FKXc#pOEJ\_tmb9[S,4P%\ZWeS\iqTO3B]WWcp9'iKqtGajGJ@%qiP%(@2Y7=O&a^BRi)kXB(Pe(6sS"SB^=saKg>1S=Nj[e'3A^52"?l_?ka7L!=d86dBJ`R%7t^q*jR<;(hdPuDcn$IjasOTKC[k'a"N%;XA:Z-KWY+=GiaMuc&.s'k&>Nq49SE?:X=AKp@'Sbt%J*]E$f,I:[Y-UT7.&7Y3Nq5g%ie#CYUI[U27$Y[!\?Cjoq>bMG`K>o5GFjWHdRm*LM3';-LhDG(GF2B\8hO_rdfj"o]LF9EF<;1VoPPLmI'r1(1#e8&5udER&6Hjf%6&#5%dFJ1*<!oi#&Q^]k"%Beb8f[Ts"&)=((>P5d0_+#!O9`#[Ra<X(2M]N'&U/MV659Ht<MUetE#(1>%Y3UsreQj:/;:m:aWSDD%mQY[C'p=q4mK@>l"*UT-cRtKYYX[u8!][=OcWDeY.3g"`O2TDQ:DYWT"QSm+U1f+F_X=XT)]ateE[+%4[p[L.bVSNO9N*YWEEoLt%EVPPQ7G5[85"Z8k3&(0e40G0faG,t;72Do%ai,dc4RMp9d6T0uDIA/PMq'fQGL9.D`("fgGNbkkhCg0RWP:eR#l$=g4-a2Fom"HI%B/*bD:VjklO"3lVi!:QHcZ159'I.n1'WGTBN6G*gU5pno.,q:\8fS@kE^Pm2F=j(P3"POJljkTm3!e)'f@!7kYGUe_eq40g+.K?%%$49eD7.BmegK)C1MU6Vk;$<@pAh*9]%p)6$a^su:?)q^+6".0Lf3EGT(qeKP"WYM1CVkEIbQn`lAL"Y.17lfd<RNB0iTDM%i@t\s%ji;lPbGIZYFDPrmJD2/E'c7T"N"Zeh+g'BI@Sm]*V>+%E>"oXghC4.%)5.gIdkNQbT$)"fisG*"+9GRX-6a?jb(A(i%rXXNHuo!X%1C<]5Kj!B+cl-'a@TKkDnt7LqX7'Q2U;=9sk/+,\RLlSU/^5[Wi<>6F[j@aX:;b_m_9<hP'a_h"BGEiM%!oRQ$kqX+VIQ-i)b<4U%%s-hq0!,CfFa;uX-<Z53.@'[)["/g&0&,rjL`]&E.\-t\`dH#N6c<IE,F#C-^>Y=njFZFuX373;;Y<pGV)$)iR0Fu<P/ugY0hb..%RZ7]j8ls+!$A\o5ano(06'uMCbHCqOXQ+`16#=VF]_:%q&`B`)?Fn0)PK?sNBrMu:7$e^JTEA4%0AVQr2+"M_]ffagTt#;7P`c:o%XbKZjOn#!__Af`bY3VJ2A:UO]EJRNN6aj]1_Rld7`W.T_B6DYI'a>l'>[`cr$N3V1V'a)+MZ@h)I"'HR?&]>1fSd\E2]O'\ju3l+%dfU./o%B-eh%t$!h_AJp?qLV)H]`0nQm*g[@VerE<64WgKTn;)(10UT`LL4D(e;i(R%C#`aZ1R5"jkpq/4*l9.Gs95mW(pJQf!h(%EAL:$Ok8s(;@uP(e7o'V"@\+&*i@T2O9nc6N-I=:jT[7UNCC-dH5HjU;*%@o0>O[RR)a+V:dJheQTRfu\&T)^.q3](X&:^c:+eYn%Z(ac6&,a^C#=>LGm"<BC<*ss!ULG3WA,n$o)/GJ(`a9E,fIS?eZE%G2I7?6#&@D`P9R[fR\sDdEjfg(i!=1ZDDE7K:nS=f((uJ7.%nH]oj@sDpn/,VXeE=h=b`lCW!a(-p=SRaI2\:J/@`"BsRFc<J,7=)<]IQN8Pl[[<aWlD5%KQE0_7FVa%1'\(mi`<4Q6[.K]?o<X6%:l#F<JTB&TRF*6fI`/GA,PMosT#H[?])<W]45a17&;!bQW%E)^N0eS;]`@Wq"VD:6fToB<n/^Z)'7n+b'spGtj7&gKni,;?&FOoC%@L*>,d1OAp1e=/(@etV6q5(E'N&C>CThUpJ@-NeJW_]pp#VSJ"U,3DhA,SsI%Pa,>YT[$\L:B[/k3to)ehB1ke.&TD!_bslS=%5_%1g,Xd0=kQr_P;!+N+WM@_I@g[0F&a8I]N#EE4&$@h*Q:=F,d,Nh[gns*<C.C*e6g*a$`4R(G"R(;486pAgpK%kg8r.La&fYZ\Zh]%hrHDN?>G5A;^'(H1%GS^T<8We!INJZJ1"BRC!\S(<9Wf?[BLGfi$9T\\M+$lnCA?c.7t,hA"Ua"Agg]95Gk)RK_IWcj)7[ikkB,j%o,pHbi[V&W>YUbm=TkE7k\#_d;]$CWJ-o/+di^gT(rR\oK.*NKMRXa&CsUWG[R&+_6oU3HWh=8MQq<+#iokAEG)-rPMgI0-;?Sck%C_;HFUJ<Of1(*\Vd3)m71!5A-#>sQ.Lqj_Kq/c4=C.(07G4^YK6j0C6%54t-FGe[!ppR\-!J=-%$e!Yt1@[/JQ,M7+:,*d+EqH#'%KrCYCM.o8R$557t&@"8UjA:Mnnt8o$Ebsu+VjMWFkWD-4MNqidUQ,>6N^tO5]Wf71a\8k.@W)`TI5Mdr$pri+pmoU2):M4RGh\T,%EXIW6c:tZ9pFmHOBaCJ0KrC)3Ko(o?O?^j[U.GCEXu-f2M@"8RC.0WdG`a%eWlh8r;bTOcp^1ufjC""D*_VA.J1P,%7@[iLY9+UX%/A*@$M)5ufWXonbW\>0-WaclSWp5n"a,qm%B5:u(.mFHAdJ-iU%K?PQ>p>.;R0o<\(cc1d""&T(S"O=A?f^^4N!::73=Q</=UhAX%Ok66N4L7=?1:KPM,dSF(U@K7FN+FtV9pVhm36:&m)%MP%a\lT67%+0NU_e\&_NlTh/2P+./W'C'/=K7Ock2DuTJ2YhTJ2Md&6e("%0p0$IRl.Q)1Vl@p$rncb&%!a1*em\ZpYtuXW#l2GD&/9?bAT'GT&61pOl(]"Ipo/92b9K6YuSH/.2(6u@=Ei44Xig_ZA(NY&;^q.%Tu#TrE[-$?"O"Zf,JF_fW05%-"*js>:JV7CJjC^ib#4fUJr+mS)@,*f+Pd7sSV-j-R7VL39oUj837;GNgVV8dr)u,o1Cg*e_E,ZG%=NB$0;3rJ>D:9EC$`ZQepVUID]L_e7dSjnSk&\51f@&aY,eTA^hq1gaTm7G8ApYT6E'c2m"\-q36Bp5WJu+.!U,*(&8&aHd^2ClP%c#F#dfVb&i4=4pA$]kpcC[6njpMd\@R%/7A$dE2-6<HEc%)RRRO^G9<B.4spDVU:1jGK(ga!9AN.8G88N?15m,[S\^%5G5X@igs`%er9;@4fcD$&NTn_^>bn'^:7g0San`WV+1Mkbf/FJErt/0MK*tW>,TX_1dhn?_M$qaT?E=!o^&g%Ae0&%7liOT%-T;Zm'f84GdY7V%g(uT"O+:B<:3gp`F(@,jW=/B0F.R!eM,J64Nr\6D'M#OhBc*HFo__j\di8tH&fnAM=&X>Kl*S1NYD*dN(3E`mI49tS[N)A)0mDMb%`s_Id#d"fU%Kbt%D>hn=/%pD6'Lu\.FE]&naehEqp0Aq;1V/,?ltlY*N4;Ob-;E8#bRrA%@,sMdnr/q+`Q_Ta;BZLc97*Tt$,q.9%,\UoA:"s4lNoC^/6n*Qdo.5g-CZ?Ek0"lXAU\bi"C7?fh7'Jh8\`L1r*r?0dQAq%X5ZK?B'Z0_2e&+Fs.6lsNMm#o#Jsqc(n?[Z&%bGP]@TVT%uCj%nGL1%4jPDaZcLrJBSl)_D70^c*>TE_/&-!VQZ/4h%ekM36j9;-s[F.*3OeJBPB`J&%`0+m(9DXiWbEJ\Ojc_lcS%*nbWkXWK"q=!hDQX"*39/B\'0!o(UoLu+`?nB0`M+?RF1Gb?ooW=Z^\4H;RBE,^bC^*;/9"Y;gHA>>>EjL:!YK'e9_&hdS4k5dG<%L$@<dF<f:.agE,$6:<n(^fTB/FH,O&5Kcq*>g/lHLl;Q!DEeA)!aJCi763/pGDLc,X9j!$C+-7UiGM,?Q;aSbYYqFeoB,7_).Gq(%L>Z].\*ET`TMIQc#^<"X(f.AZaH=d$!lcf@^h7kAiE$A\N,+1P0/L]bUGL8jX$+NF%f)sV%_8h>Pr1Aurl1uTaCJgtcJu`bR'_]f%8jk4ZB3E$A'm7mF+;084K;pUD/CH^,-]](5#Z&pBA5#UsJ0?V[!=rBhOL@Uqq;8$-8&Q&B*J5pXi3S41=A:".Q@-3B3P(+)p.`J_%.-O1=>]qKrK6-8PqH?eSI)f?/]OT1JOn-/LcQ4<2UdGB/^1RuoSSRI%0Sn@:4,;AI<5g`1Z8niJ$J2j;,Au;0F#!ni+1;ZaCMZg+%(0=2X"CN&!<B&o*!!u(VUkWT[2VjA]T\1-%m`k#`CDM?@`:G]I*.U"l*!p"I%_g"$C1SBnU;Y&J2EDPs(,L[nG=<o47#T]WUY(-R%4Y9;C0B7[FLj56OC/fbp64oQDm(.(id_>m4J&UEa/04tkYn%QcA`;[@Oe\8[qi,i21^g3Z#gtD4Ff$k8@\H&5%HDaGp4;,GbX+W)%J1K@m`q;M`ps%Pu`M11.M5)[;h3N$1O<TE!1\,XQcE_`ZMl-8P%c<,CPUk1(A5,8&9i#[\dW.0un`&2`*il%IS#'%=_i%siE_D`^%,O38Ed?*H]Bd1iDA>`BM]O"?dN&)'.'I;\p7f7t-7*K""HrLY4Rts5:Va5Kb6UQClL)*H"&UIQI8Bp[Lce.V;nm(%g2a"WBcR_mQ%JHB6nk]m$r?Z)dIB2g0c8Uttr87+s0j,Z7\;nMs=3d)-OH0hh>Bq)@rp*7I]P;=EBQ','60u^Y?FC`?N_B[/&f4L$ga(>"rTYg$b%$]IUW;2&hPVM.:nfmuJOdTq=r'Si&\JnDB!KQo,M.e[O;#eB$#pM$fFQ]h;p+H0[V'eum=,-FRNO+nLh]2JBsOYQ(i$dD6o4VAMi%gsIO1KbYqpKb4W#:YCar@jI>I@prVQ\Q_HNH:L@D&0fH*Gf$XD(60B3Gj<>dOj.fCP929)M'hc%3YN9jFsJU^EO(L8K`SrGR@OU6%7%FT&R.r;BoU$.WJiF@uM.4X!oFOj_!52:([WH%9-!*;DVTZ_`]i57F)X1nJGk"hmpdT=L1`2"^=\>KIaEh*_o-2J422E7Xj/J^7%l0]jOVupIbBd^bY`f>^>EVY>o3'<UfK@!_?FDhDXDlbpEI4_&T_nST(0Y^>DR3+J!q%fG&M4k-0>%,L#mk3uX'Ik8UF]9RO4!&pG%Q*S>,%nsOLqnCa+%4ZN(0>eE@@SdabHIs6X>9BDHTT`=[n/e9Z+6^m7Gj`D#EL8gm!h9f#ho;g1a,\o1I_ks"C]l!k#A!G>F:n`_%0X/5EK'Wn3*[h%5.?KNOr]Y`OA@&HQ+:Bd`Ls9.7nQDrnK<HU9'Wfh%-6YHqV\sY$]d`'3>%Xko*7NQ#T'\S3]['9qjmZn,Otk6I%D3q8O42f2W3*Xt6Hg5W"`cnqAEO>L+o0TPO-qqIUHRW:q;3qr_[[@nVX+)Y-OA%Ud=r#a]'817=^hO1$gZe3b'HFPWa#L"Dc`F>!%<=VULP)[70Fm?WYq2iU9\<&%8ClJL)1\(NICLt'@k$D0r4QgI_(=O,g3LBiT?d;Z.:-0#.fZT),`,+gA#[VmjYLFnUVlkJb%SSf1%=/e'sk8C0L5+Cj`6rnoq!eq\L4ma#hNk?EI4,RJB6XW18]kP+3=0@uG->U<pgpNQO;H;]LQVZ'`2D<sq1Xh3U+PoA3p[Q0/P"8m*%Gq!aI+!_RDs);Z2G$YHQ%,22AhFc2-P"#qK_SD9Q7bnXGjsH0Lge&m?3ZqTE%!8/)(M-M]H+L_Z-^NmM:!P*iD\SUqk1rENV5)XD%.?K+mU/F6Y*SP%d;q:XO,OSAEACCDZ)D'E5,^b_GAfMV-.L4.%p<=t@<B+9Pp[!16O>NSu0+@!]m.B-Eaj0Hf5a=k3lm)(m\r4NK%OY50r.TioP==re>>cZ.kPWL[77I-nZZh'p>IrlubV-96Q?m8X';Gh8,MP=7^R`*9uhs9=*#)r)lis)dNA:3Qd)`dCspD2"2'k=$b%T*XT%bO+o05*O(+CctVu0,#3q%uJUJe==r,Y7Ppnha[V*oQ^C,_=uidV180ofACuUm5JsUO]hI'J,8hZGlH;n8u@gV!P(<VK3/<]%i6QG",[O.Sfqr.rfCu!9&p`n1kncXD6au3V-X<n/T:Hnh#W_/ASZumS\8"W.<N4l.[2'W1Z6%L<<#"jQ]k&<BEg`,aREmBbZ]%Sm%it1r_>m[i?&^JFrM7eNne]hM@TR\ekla[JGnX0%_+Jc-RJ?*NK`f0Af#couK-+tP_k:50B@A"(K;P$C$0uE6ndI,C_aB`6?p:/#a%_=3Re%5)r?"2`+s+JH\m1Pq?M&fbb7H8eDlS6@p%"#$-aoQC>B*hsL6S:TY!"ha>@s88jli%$\9nf17A]ZEhWY^BLuOnWZD%n'Ku%EsO%2e'=CWUt'_FIP9`ADuE9V$okms?\2Y+C>9:jQ`MSMpJF0QF',EpP</U%T]hrK]8&;f9dPjXK1^brg*4]ar9ITB1co1Xjr6cG%?\f_ZK]VGW13g)`i,QYXdK%*4j)uc@n8f/a$^'KV)%`5TNKrJ6BQY&eY&7rEZZ7'/@L5T1WN$lnmYNYI'e1";HLcn&r?F0<d<A)8%n+%qs%Mo$b?UMqp(ofT^[B#F(P)Rn0G>F)l5i5Jq=`7$S&F^0'8N77n4G(:@#9EFAGgZ,:W.)"M)cBZu'G68If0l^WB#n'6j1&Sj%8c'S`Y$m80DV6MWR/t($0p]btAgtmhHfeC'_n.oD)r2R;.d4'"^WTeLSSi0]GE[B58Cd1VlKI]XVFE-moG.9;SlTs2`6U<!GrXf)%n3VFOEWhF6b?S9Dhi=0CLf/3*F:2Z-Fe9m,laK6aq*MHAXEB9MMm*i;rZtZ+4n7V;9%)*@AT2$sf;lUgfBPoaRB%V>,s@8mA$Ld-%E\$14Lu56*!NBYQI::?N$"Pl.KWj@5H>Yn1d(FtcCYI5*%7jR`-JDAFfQ_Whj^YI#%J4*LD^kfqQRk@\4$[C]Ij5A^8dnZ8<jZ:S%5WiFG)r_P<k5eX[[fmmqS'-4nP9CONlH*9cMN^%V;+FO'$C8@KD8]T-`8j\q7*P/>Si?"?mrLmoid/2&.e)@-OrT;]hA.;Yb5k'j%?Xe(qojY_MgY<DA5("?`hTCee54[PA10;@f7a(mndUM7t2,B*4F+KiOU^PRo,S%=VAS2mW:3c*]OcZrm?!+ObBH#%k!ef@$^YG1L%6O:R7=I(<GPB.,YZ<+4B'Jk'CXCPnu&S@n_@tYTQ`[F/r-QED)B#US1Nm$Z,R#dR>ViASe^&%e)Om:100>r9&FhUHO/H[tlLBiL=%nGU(s(HK8pC^7V)4CZ8[06:M73HFh2OPEWOXi5i-%Ub68jUMmfesfn<YA:t"'6sNJO&,Ft48AdMn([m:Q@O<\Z_mo6K9&eT!3Zc>%C6$6aZ3^:V-"C%p!2`F*'fN8*_8Bt6V<;-r4()0'J#"J%1@&1IpDJ)("QV["(B7^,nN8'KQ^#Y\7gd;3i21h]n6N/##ek)GPufEe%_ONP`OnUQ(.t&1B'Do.a3:@j<P%84m_:j\/s#+7CDdr'dBW;s4AcZA`Qmr1VO=hn#$'fWrFQ`jt%?J6fj["*+[dO0X8sWMIZ=PQq%LtDh*/=Ijic0CN<C3bGJP2he8f\f,<P$4+9KrEhJCpu,eTK+E`25p[N]7,gs4L?A-WT[-@FK9:87aKrbRoYBYB9QC$5aNBq5ZU<`%juM:I%7,)+hIN@M5ha._^st>1Rn?P;Q)mnEJ*_,M.aGI57;Hf>m1bAG:*):%mL8Y<Q4^3K0`X6TPS:0G@Jrg,2fM;CilFf@gnUe<%S6<4J$k\"'R58AIMdBJ.$<:(g!R3\:<[b_/g$h,JV1](*S7#W&Ts^XGhDee<-s\b=8h&4g?ZupcV2`!OJt%ilO3,+Tn-MFO`)90S%kl5W\1^lMu/_6+!K=TT9epon"(qIm?cN8]iMJU1*&T'pGF3JW!m"JPCY2^\O!+VQMg!Cc1L*:DnN^Z%l-*5?"&CB(RGEf#JL'#&>%l'8tY8eP>XV(s"<ABgjgj=%fE:Fubif0#>V!F=LnoWJ<o6Cm#AQE3Lgi#Sip(okR`T)a9QS*0Jp6]Vl^[f-GnBJG^\0''f1(6i(:%PEMg_)+)7c3>!q0_4/NoHTUtqOR?I:LO-GA68r\$QOQVG0sR.N,b=/k]ikI>:lMm72IA/I1*27PbB@E>m#JL4+&e,=GHu-0F5LD"%P(d/I<q@0RKsk,G8u^Kd%R]LEEr`BmW\*97C00LKhZ("rHXZRB9D"M_<eR`'%iCl*Q;B[VeE4d/*^QUJN@op&B[f$s`-WP+Nc6@2%,/WaELA2?la3In_)KZ[?qR"-n6bJ%'A?)iRLJmVU-PG7-k=*AIq+1o1=t2'5&$]imFb^HFQ>?%H?>(iTR_2Y(#'`n(&e7*hX9@dV%-j!)Z_1[.Cd;2.Rnu^9[(9\^$^Ka<gFj=9%HsA,_o5HJ.JLco7a8:=-SN`K0X-n`l*\!X.<KL8>]U,@oabsbp-\)fsZbFHGQrqEP%Lj*%KC!6RdR]DrB>=VPfS^`;.TcR4807,NoLqA'bh5.>f(C?b!@6;?Jq#4IM.@'6iqkd2:WkZ?f5)S_Qq)'XHrf>t>8.B@jO<5T+%:G/:Uo]j^,/c;eF_oltjhL,:Bo#'3X5JFf-pZn0L^3Y+sk.>gZ?GHO2m]V+erUTU>Vg&/cI=CqTe*!@\rVZNdo7*>rI!P\TkKdLA%T7?^\kC3On5FKLJ]QsDA+.iH6N1pu*~>%AI9_PrivateDataEnd