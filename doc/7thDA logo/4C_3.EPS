%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: 4C_3.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/19/07%%BoundingBox: 0 0 153 146%%HiResBoundingBox: 0 0 152.3965 145.0596%%CropBox: 0 0 152.3965 145.0596%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: (PANTONE 402 CV)%%CMYKCustomColor: 0 0.0600 0.1500 0.3400 (PANTONE 402 CV)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-10T13:49:51-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-19T11:19:53-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-19T11:19:53-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>244</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA9AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FVssscMTyysEijUu7saAKoqST7ZGUhEEnkEgEmgknkzUxqmky6goIS4u&#xA;rhowevD1CEr/ALEDNd2Vm8XGZ/zpy+9ydXj4JCPcAnubNxXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8o/M7z0tzz0LTJKwKaX1wp2cj/danwB+0&#xA;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&#xA;tX8fHDC6WXNOcmxdirsVdirsVdirsVdir//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:72069B1FE8FC11DBB9739E7606BFB90D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3A3EA06BEFF011DBAC05C6DFC5F72130</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -145.06 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 145.06 li152.396 145.06 li152.396 0 licpclp[1 0 0 1 0 0 ] concat147.147 110.681 mo147.264 112.84 li147.264 113.073 147.322 113.424 146.972 113.424 cv145.979 113.424 147.439 111.381 144.696 111.381 cv140.844 111.381 li139.793 111.381 139.793 111.439 139.793 112.665 cv139.793 126.323 li139.793 128.599 141.953 127.724 141.953 128.541 cv141.953 128.599 142.011 128.833 141.719 128.833 cv141.077 128.833 140.318 128.774 139.56 128.774 cv136.582 128.774 136.058 128.833 135.883 128.833 cv135.648 128.833 135.59 128.774 135.59 128.482 cv135.59 127.84 137.692 128.132 137.692 126.498 cv137.692 112.606 li137.692 112.432 137.75 111.381 137.342 111.381 cv131.797 111.381 li130.162 111.381 130.221 111.965 130.221 112.898 cv130.221 113.19 130.454 114.357 129.929 114.357 cv129.637 114.357 129.462 113.773 129.345 113.54 cv128.527 111.264 126.66 110.447 124.325 110.447 cv122.166 110.447 119.947 111.497 119.947 113.948 cv119.947 118.969 130.805 116.05 130.805 123.404 cv130.805 125.681 129.229 129.066 123.158 129.066 cv121.174 129.066 118.722 128.073 118.605 127.549 cv117.963 124.104 li117.847 123.579 117.963 123.288 118.255 123.288 cv118.605 123.288 118.605 123.638 118.78 124.163 cv119.072 125.39 120.706 128.19 124.384 128.19 cv126.951 128.19 129.403 126.79 129.403 123.93 cv129.403 118.794 118.547 121.653 118.547 114.707 cv118.547 111.322 121.406 109.688 124.501 109.688 cv127.71 109.688 128.586 110.622 128.994 110.622 cv129.403 110.622 129.462 109.921 129.986 109.921 cv132.088 109.921 135.064 110.038 138.509 110.038 cv143.354 110.038 145.805 109.921 146.33 109.921 cv146.972 109.921 147.089 110.097 147.147 110.681 cvcp12.5493 108.287 mo8.52197 116.867 li8.28857 117.393 8.52197 117.51 8.98926 117.51 cv15.9932 117.51 li16.8105 117.51 16.752 117.276 16.5771 116.809 cv13.1333 108.287 li12.958 107.82 12.7827 107.82 12.5493 108.287 cvcp28.5425 112.256 mo28.5425 124.98 li28.5425 125.39 28.4844 126.673 28.7178 126.907 cv29.5933 127.782 31.6362 128.132 32.8618 128.132 cv36.6558 128.132 40.2744 126.09 40.2744 119.902 cv40.2744 113.948 36.3057 110.622 31.2275 110.563 cv28.6592 110.563 28.5425 111.03 28.5425 112.256 cvcp27.8423 128.774 mo27.667 128.774 26.2075 128.833 25.3906 128.833 cv23.9316 128.833 23.0562 128.774 21.8887 128.774 cv20.8965 128.774 19.9624 128.891 18.9702 128.891 cv18.7949 128.891 18.2114 128.891 18.2114 128.541 cv18.2114 127.665 20.3125 128.016 20.3125 126.673 cv20.3125 125.914 19.6123 124.28 19.2617 123.347 cv18.0947 120.428 li17.7441 119.61 17.5693 119.085 16.5771 119.085 cv8.75586 119.085 li8.05518 119.085 7.41309 119.085 7.06299 119.844 cv4.84473 124.806 li4.72803 125.039 4.55322 125.564 4.55322 126.031 cv4.55322 128.482 7.06299 127.432 7.06299 128.365 cv7.06299 129.008 6.59619 128.891 6.12891 128.891 cv5.13672 128.891 4.14453 128.774 3.15234 128.774 cv2.21826 128.774 1.22607 128.891 0.291992 128.891 cv0.117188 128.891 0 128.716 0 128.482 cv0 127.782 1.63477 128.365 2.56836 126.323 cv11.0322 108.287 li13.1333 103.792 13.25 103.209 13.7168 103.209 cv14.1255 103.209 14.3589 104.26 14.4756 104.552 cv21.8301 122.821 li22.3555 124.104 22.7637 125.564 23.5811 126.849 cv24.165 127.665 24.6899 127.957 25.3906 127.957 cv25.9741 127.957 26.4414 127.257 26.4414 126.09 cv26.4414 112.781 li26.4414 110.038 24.2817 110.914 24.2817 110.155 cv24.2817 109.979 24.4565 109.921 24.6318 109.921 cv25.4492 109.921 26.2661 110.038 27.0249 110.038 cv28.8345 110.038 30.5273 109.921 32.8618 109.921 cv37.5898 109.921 42.2593 113.481 42.2593 118.443 cv42.2593 124.572 39.3408 128.833 31.9277 128.833 cv30.5273 128.833 29.1846 128.774 27.8423 128.774 cvcp46.0151 145.06 mo42.6885 145.06 40.2954 142.782 40.2954 139.397 cv40.2954 136.013 42.6885 133.269 46.1323 133.269 cv49.167 133.269 50.043 134.553 50.5098 134.553 cv50.6265 134.553 50.7432 134.378 50.9185 134.378 cv51.0933 134.378 51.0933 134.611 51.1519 135.662 cv51.1519 136.538 51.3271 137.063 51.0352 137.063 cv50.8599 137.063 50.7432 136.654 50.6846 136.538 cv49.6343 134.786 48.4668 133.736 46.4238 133.736 cv43.2139 133.736 41.6963 135.837 41.6963 138.872 cv41.6963 141.732 43.3301 144.534 46.4238 144.534 cv48.9922 144.534 50.6265 142.899 50.8599 142.199 cv50.8599 142.082 50.9766 141.966 51.0933 141.966 cv51.1519 141.966 51.21 142.082 51.21 142.141 cv50.8599 143.774 li50.8018 143.833 49.6924 145.06 46.0151 145.06 cvcp17.9214 104.115 mo17.3374 100.964 li17.2207 100.497 17.3374 100.205 17.5708 100.205 cv17.9214 100.205 17.9214 100.497 18.0381 101.022 cv18.3296 102.132 19.7891 104.7 23.1743 104.7 cv25.5093 104.7 27.7856 103.415 27.7856 100.848 cv27.7856 96.1191 17.8628 98.7461 17.8628 92.3838 cv17.8628 89.29 20.4893 87.7725 23.291 87.7725 cv26.2681 87.7725 27.0269 88.6484 27.377 88.6484 cv27.6104 88.6484 27.6689 88.3564 27.9023 88.3564 cv28.0771 88.3564 28.1938 88.4736 28.1938 88.707 cv28.5444 92.0342 li28.6025 92.2666 28.5444 92.4424 28.311 92.4424 cv28.019 92.4424 27.8438 91.917 27.7856 91.6836 cv27.085 89.582 25.2754 88.5313 23.1162 88.5313 cv21.1899 88.5313 19.147 89.4648 19.147 91.6836 cv19.147 96.2939 29.0698 93.6094 29.0698 100.322 cv29.0698 102.424 27.6104 105.458 22.0654 105.458 cv20.2559 105.458 17.9795 104.583 17.9214 104.115 cvcp51.248 127.724 mo50.9561 128.424 50.7808 129.3 50.3721 129.3 cv49.9053 129.3 49.6138 128.132 49.3799 127.606 cv42.7842 111.965 li42.1426 110.388 40.6831 110.854 40.6831 110.271 cv40.6831 110.038 40.8584 109.921 41.0918 109.921 cv41.9087 109.921 42.7261 110.038 43.5435 110.038 cv44.2437 110.038 45.2944 109.921 45.6445 109.921 cv45.8198 109.921 45.9946 110.038 45.9946 110.155 cv46.0532 110.563 44.9443 110.563 44.9443 111.556 cv44.9443 111.906 45.061 112.314 45.1777 112.606 cv49.8472 123.579 li50.4893 125.039 50.6055 125.623 50.8975 125.623 cv51.1895 125.623 51.248 125.214 51.4229 124.864 cv56.0342 113.424 li56.209 113.015 56.5596 112.14 56.4429 111.614 cv56.4429 110.388 54.6914 110.854 54.6914 110.271 cv54.6914 109.979 54.8667 109.921 55.1001 109.921 cv55.6836 109.921 56.2676 110.038 56.9097 110.038 cv58.1938 110.038 58.5439 109.921 58.9526 109.921 cv59.2446 109.921 59.4194 110.038 59.4194 110.271 cv59.4194 110.854 58.6606 110.155 57.9019 111.965 cv51.248 127.724 licp36.1323 105.283 mo34.7314 105.283 33.3306 105.167 31.9297 105.225 cv31.229 105.225 30.4121 105.283 29.7114 105.283 cv29.5366 105.283 29.4199 105.225 29.4199 105.108 cv29.478 104.874 29.6533 104.933 30.2368 104.641 cv30.7036 104.407 30.7622 103.882 30.7622 103.007 cv30.7622 94.6602 li30.7622 93.8438 30.7622 92.9678 29.77 92.792 cv29.5947 92.792 29.1865 92.7334 29.1865 92.501 cv29.1865 92.3838 29.3032 92.3252 29.8286 92.3252 cv33.3306 92.3252 34.2646 92.3838 35.0229 92.3838 cv35.4316 92.3838 37.0659 92.3252 37.6499 92.3252 cv37.8247 92.3252 37.8247 92.501 37.8247 92.6758 cv37.8247 94.7188 37.5913 94.8936 37.4746 94.8936 cv37.0078 94.8936 37.3579 94.0186 37.0078 93.6094 cv36.5991 92.9678 34.6729 93.085 33.9141 93.085 cv32.1631 93.085 32.2217 93.0264 32.2217 94.252 cv32.2217 97.6367 li32.2217 98.2783 32.1631 98.2783 32.8633 98.2783 cv34.8481 98.2783 li36.7744 98.2783 36.3071 96.8193 36.7158 96.8193 cv36.8911 96.8193 36.9492 96.9951 36.9492 97.1699 cv36.9492 97.8115 36.8911 98.3955 36.8911 98.9795 cv36.8911 99.4463 36.9492 99.9717 36.9492 100.438 cv36.9492 100.614 36.8325 100.673 36.7158 100.673 cv36.1323 100.673 36.7744 99.0967 35.2568 99.0967 cv32.5132 99.0967 li32.1631 99.0967 32.2217 99.3877 32.2217 99.6797 cv32.2217 103.007 li32.2217 104.115 32.0464 104.583 33.564 104.583 cv37.8247 104.583 38.4668 102.657 38.7002 102.657 cv38.8174 102.657 38.8174 102.832 38.8174 102.891 cv38.8174 103.532 38.3501 104.174 37.9414 104.641 cv37.2993 105.342 36.9492 105.283 36.1323 105.283 cvcp45.1792 104.524 mo45.0044 104.991 44.8291 105.575 44.5957 105.575 cv44.3037 105.575 44.0703 104.816 43.895 104.407 cv39.3423 93.7256 li38.8755 92.6172 37.9414 92.9678 37.9414 92.5596 cv37.9414 92.3838 38.0581 92.3252 38.2334 92.3252 cv38.7588 92.3252 39.3423 92.3838 39.9263 92.3838 cv40.3931 92.3838 41.0938 92.3252 41.3271 92.3252 cv41.4438 92.3252 41.6187 92.3838 41.6187 92.501 cv41.6187 92.7334 40.8599 92.7334 40.8599 93.4346 cv40.8599 93.668 40.9766 93.96 41.0352 94.1348 cv44.2456 101.723 li44.6538 102.657 44.7705 103.065 44.9458 103.065 cv45.1211 103.065 45.1792 102.773 45.2959 102.599 cv48.5063 94.7188 li48.623 94.4268 48.7983 93.8438 48.7397 93.4346 cv48.7397 92.6172 47.5723 92.9678 47.5723 92.5596 cv47.5723 92.3838 47.689 92.3252 47.8643 92.3252 cv48.2729 92.3252 48.6816 92.3838 49.0317 92.3838 cv49.9653 92.3838 50.1987 92.3252 50.4907 92.3252 cv50.666 92.3252 50.7827 92.3838 50.7827 92.5596 cv50.7827 92.9678 50.2573 92.501 49.7319 93.7256 cv45.1792 104.524 licp98.2549 134.378 mo98.4297 134.378 98.4297 134.611 98.4883 135.662 cv98.4883 136.538 98.6631 137.063 98.4297 137.063 cv98.1963 137.063 98.0801 136.654 98.0215 136.538 cv97.0293 134.786 95.8613 133.736 93.7607 133.736 cv90.6094 133.736 89.0918 135.837 89.0918 138.872 cv89.0918 141.732 90.7256 144.534 93.8193 144.534 cv96.3877 144.534 97.9629 142.899 98.1963 142.199 cv98.2549 142.082 98.3721 141.966 98.4297 141.966 cv98.5469 141.966 98.6055 142.082 98.6055 142.141 cv98.1963 143.774 li98.1963 143.833 97.0293 145.06 93.4102 145.06 cv90.0254 145.06 87.6328 142.782 87.6328 139.397 cv87.6328 136.013 90.084 133.269 93.5273 133.269 cv96.5625 133.269 97.4385 134.553 97.9053 134.553 cv98.0215 134.553 98.1387 134.378 98.2549 134.378 cvcp83.9551 136.596 mo83.9551 134.611 82.4375 133.97 80.8037 133.97 cv80.2188 133.97 79.9277 133.911 79.9277 134.553 cv79.9277 138.697 li79.9277 138.989 80.9199 138.931 81.6787 138.931 cv82.3789 138.931 83.9551 138.639 83.9551 136.596 cvcp86.7568 144.942 mo85.5303 144.942 84.8887 144.126 84.3047 143.191 cv82.4961 140.331 li81.9121 139.397 82.1455 139.456 80.3359 139.456 cv79.8105 139.456 79.9277 139.748 79.9277 139.923 cv79.9277 143.366 li79.9277 144.767 81.6201 144.242 81.6201 144.825 cv81.6201 145.001 81.4453 144.942 81.3281 144.942 cv81.1533 144.942 80.8037 144.884 79.46 144.884 cv78.8184 144.884 78.2344 144.942 77.5928 144.942 cv77.4756 144.942 77.417 144.884 77.417 144.767 cv77.417 144.358 78.6436 144.593 78.6436 143.366 cv78.6436 135.078 li78.6436 133.503 77.2422 134.203 77.2422 133.619 cv77.2422 133.503 77.3594 133.444 77.5342 133.444 cv77.8262 133.444 77.7676 133.503 78.585 133.503 cv79.5186 133.503 80.4531 133.444 81.2695 133.444 cv81.5615 133.444 85.1807 133.094 85.1807 136.245 cv85.1807 137.53 84.2461 138.58 83.0801 139.048 cv85.8223 143.191 li86.9902 144.942 87.8066 144.358 87.8066 144.767 cv87.8066 144.942 86.873 144.942 86.7568 144.942 cvcp74.6152 140.448 mo74.6152 135.194 li74.6152 133.503 73.0977 134.203 73.0977 133.561 cv73.0977 133.503 73.2148 133.444 73.2734 133.444 cv73.8574 133.444 74.499 133.503 75.1406 133.503 cv75.4336 133.503 75.7256 133.444 76.0166 133.444 cv76.1338 133.444 76.25 133.503 76.25 133.619 cv76.25 134.086 75.3164 133.678 75.3164 135.194 cv75.3164 140.215 li75.3164 141.032 75.4912 145.06 70.7637 145.06 cv66.5029 145.06 65.6855 142.666 65.6855 140.156 cv65.6855 134.669 li65.6855 133.736 64.3428 134.086 64.3428 133.561 cv64.3428 133.503 64.6348 133.444 64.6934 133.444 cv65.1021 133.444 65.5103 133.503 65.9775 133.503 cv66.5029 133.503 67.0278 133.444 67.4951 133.444 cv67.6118 133.444 68.0205 133.386 68.0205 133.561 cv68.0205 134.027 66.9697 133.561 66.9697 134.786 cv66.9697 140.623 li66.9697 143.191 68.6621 144.417 70.8213 144.417 cv73.916 144.417 74.6152 142.374 74.6152 140.448 cvcp52.2021 133.444 mo52.8442 133.444 53.4282 133.503 54.0117 133.503 cv54.5371 133.503 55.0039 133.444 55.5293 133.444 cv55.8213 133.444 55.8213 133.503 55.8213 133.561 cv55.8213 133.911 54.6538 133.619 54.6538 134.845 cv54.6538 138.347 li54.6538 138.58 54.6538 138.639 54.8872 138.639 cv60.8408 138.639 li61.0161 138.639 61.0161 138.229 61.0161 138.171 cv61.0161 134.845 li61.0161 133.678 59.7905 133.97 59.7905 133.619 cv59.7905 133.503 59.7905 133.444 60.0239 133.444 cv60.6074 133.444 61.4248 133.503 61.7163 133.503 cv62.3584 133.503 62.5918 133.444 62.9424 133.444 cv63.3506 133.444 63.3506 133.561 63.3506 133.678 cv63.3506 133.97 62.3003 133.678 62.3003 134.845 cv62.3003 143.425 li62.3003 144.65 63.7593 144.358 63.7593 144.767 cv63.7593 144.825 63.7012 144.942 63.5845 144.942 cv63.1172 144.942 62.6504 144.884 62.0664 144.884 cv61.0161 144.884 60.5493 144.942 60.2573 144.942 cv60.082 144.942 59.8486 145.001 59.8486 144.709 cv59.8486 144.358 61.0161 144.593 61.0161 143.542 cv61.0161 139.631 li61.0161 139.397 61.0742 139.223 60.8408 139.223 cv54.8872 139.223 li54.6538 139.223 54.6538 139.339 54.6538 139.515 cv54.6538 143.542 li54.6538 144.65 56.23 144.3 56.23 144.825 cv56.23 144.884 56.1133 144.942 55.938 144.942 cv55.7627 144.942 54.5371 144.884 53.6616 144.884 cv52.5527 144.884 52.3774 144.942 52.3193 144.942 cv52.144 144.942 52.0859 144.884 52.0859 144.709 cv52.0859 144.242 53.3696 144.767 53.3696 143.133 cv53.3696 134.845 li53.3696 133.619 51.9688 133.97 51.9688 133.619 cv51.9688 133.444 52.0859 133.444 52.2021 133.444 cvcp95.375 111.381 mo93.6816 111.381 93.623 111.789 93.1563 113.248 cv93.0391 113.54 93.0391 113.891 92.6895 113.891 cv92.5146 113.891 92.4561 113.657 92.4561 113.54 cv92.748 110.972 li92.748 110.622 92.748 109.921 93.2148 109.921 cv95.3164 109.921 97.3594 110.038 100.803 110.038 cv105.647 110.038 108.099 109.921 108.624 109.921 cv109.266 109.921 109.383 110.097 109.441 110.681 cv109.559 112.84 li109.559 113.073 109.616 113.424 109.266 113.424 cv108.273 113.424 109.733 111.381 106.989 111.381 cv103.138 111.381 li102.146 111.381 102.087 111.439 102.087 112.665 cv102.087 126.323 li102.087 128.599 104.246 127.724 104.246 128.541 cv104.246 128.599 104.305 128.833 104.013 128.833 cv103.371 128.833 102.612 128.774 101.854 128.774 cv98.876 128.774 98.3506 128.833 98.1758 128.833 cv97.9424 128.833 97.8838 128.774 97.8838 128.482 cv97.8838 127.84 99.9863 128.132 99.9863 126.498 cv99.9863 112.606 li99.9863 112.432 100.044 111.381 99.6348 111.381 cv95.375 111.381 licp73.4287 109.921 mo73.8945 109.921 74.3037 110.038 74.7119 110.038 cv75.1211 110.038 75.5293 109.921 75.9375 109.921 cv76.2295 109.921 76.4629 110.33 76.6377 110.505 cv89.4209 124.747 li89.5381 124.922 89.6543 125.039 89.7129 125.039 cv89.7715 125.039 89.8301 124.922 89.8301 124.747 cv89.8301 113.54 li89.8301 110.038 86.8525 111.089 86.8525 110.155 cv86.8525 109.979 86.9688 109.921 87.1445 109.921 cv87.9033 109.921 88.7207 110.038 89.5381 110.038 cv90.4717 110.038 91.6387 109.921 92.2813 109.921 cv92.3975 109.921 92.5146 109.979 92.5146 110.155 cv92.5146 110.854 90.9385 110.388 90.9385 112.314 cv90.9385 127.782 li90.9385 128.599 90.9385 128.95 90.7051 128.95 cv90.5303 128.95 90.2383 128.833 89.7129 128.19 cv78.2139 115.232 li78.1553 115.232 77.8057 114.766 77.6299 114.766 cv77.5137 114.766 77.4551 114.824 77.4551 115.35 cv77.4551 126.323 li77.4551 128.716 79.79 127.782 79.79 128.482 cv79.79 128.657 79.79 128.833 79.498 128.833 cv78.8555 128.833 78.0977 128.774 76.8135 128.774 cv75.8799 128.774 74.4785 128.833 74.3037 128.833 cv73.9531 128.833 73.9531 128.716 73.9531 128.541 cv73.9531 127.606 76.2881 128.774 76.2881 125.039 cv76.2881 115.174 li76.2881 109.63 73.0781 111.147 73.0781 110.155 cv73.0781 110.038 73.3105 109.921 73.4287 109.921 cvcp67.5327 118.618 mo70.334 118.618 69.6338 116.458 70.2754 116.458 cv70.4512 116.458 70.5674 116.751 70.5674 116.983 cv70.5674 117.918 70.5088 118.794 70.5088 119.669 cv70.5088 120.369 70.5674 121.069 70.5674 121.77 cv70.5674 122.003 70.4512 122.12 70.2754 122.12 cv69.459 122.12 70.334 119.786 68.1162 119.786 cv64.1475 119.786 li63.5635 119.786 63.6807 120.253 63.6807 120.661 cv63.6807 125.564 li63.6807 127.141 63.4468 127.782 65.665 127.782 cv71.8516 127.782 72.7852 125.039 73.1367 125.039 cv73.3105 125.039 73.3105 125.272 73.3105 125.331 cv73.3105 126.323 72.6113 127.257 72.0264 127.957 cv71.1514 128.891 70.5674 128.833 69.4004 128.833 cv67.3574 128.833 65.3145 128.716 63.2715 128.774 cv62.2212 128.774 61.1123 128.833 60.0029 128.833 cv59.7695 128.833 59.5947 128.774 59.5947 128.599 cv59.6528 128.249 59.9448 128.308 60.7617 127.898 cv61.4624 127.549 61.5205 126.849 61.5205 125.564 cv61.5205 113.365 li61.5205 112.14 61.5205 110.854 60.1201 110.681 cv59.8862 110.622 59.3027 110.563 59.3027 110.214 cv59.3027 110.038 59.478 109.921 60.2363 109.921 cv65.2563 109.921 66.6572 110.038 67.8247 110.038 cv68.3496 110.038 70.8008 109.921 71.6182 109.921 cv71.8516 109.921 71.9102 110.155 71.9102 110.505 cv71.9102 113.481 71.502 113.657 71.3848 113.657 cv70.7432 113.657 71.1514 112.373 70.7432 111.789 cv70.042 110.854 67.2407 111.03 66.1904 111.03 cv63.6221 111.03 63.6807 110.914 63.6807 112.724 cv63.6807 117.685 li63.6807 118.618 63.6221 118.618 64.6729 118.618 cv67.5327 118.618 licp103.956 98.7461 mo103.956 99.6221 104.015 99.6221 103.314 99.8545 cv99.5781 101.14 li99.2285 101.256 98.9365 101.431 98.7617 101.431 cv98.4697 101.431 98.5283 101.081 98.5283 100.906 cv98.5283 99.9717 98.4697 99.9717 99.1709 99.7383 cv102.905 98.4541 li103.197 98.3369 103.548 98.1621 103.723 98.1621 cv104.015 98.1621 103.956 98.5713 103.956 98.7461 cvcp84.8701 92.3252 mo85.5703 92.3252 86.2129 92.3838 86.9131 92.3838 cv87.4961 92.3838 88.0801 92.3252 88.6055 92.3252 cv88.9551 92.3252 88.9551 92.3838 88.9551 92.501 cv88.9551 92.8506 87.6719 92.501 87.6719 93.9014 cv87.6719 97.8701 li87.6719 98.1045 87.6719 98.1621 87.9053 98.1621 cv94.6172 98.1621 li94.8506 98.1621 94.792 97.6953 94.792 97.6367 cv94.792 93.9014 li94.792 92.6172 93.3916 92.9092 93.3916 92.501 cv93.3916 92.3838 93.4502 92.3252 93.7422 92.3252 cv94.3252 92.3252 95.2598 92.3838 95.6094 92.3838 cv96.3096 92.3838 96.6016 92.3252 96.9521 92.3252 cv97.4199 92.3252 97.4775 92.501 97.4775 92.6172 cv97.4775 92.9092 96.252 92.6172 96.252 93.9014 cv96.252 103.591 li96.252 104.933 97.8867 104.583 97.8867 105.05 cv97.8867 105.108 97.8281 105.283 97.7109 105.283 cv97.1855 105.283 96.6602 105.225 95.96 105.225 cv94.792 105.225 94.2676 105.283 93.917 105.283 cv93.8008 105.283 93.5088 105.342 93.5088 105.05 cv93.5088 104.583 94.792 104.874 94.792 103.707 cv94.792 99.3291 li94.792 99.0381 94.8506 98.8623 94.6172 98.8623 cv87.8467 98.8623 li87.6719 98.8623 87.6719 98.9795 87.6719 99.1553 cv87.6719 103.707 li87.6719 104.991 89.3643 104.583 89.3643 105.167 cv89.3643 105.225 89.2471 105.283 89.0723 105.283 cv88.8389 105.283 87.4961 105.225 86.5625 105.225 cv85.2207 105.225 85.0449 105.283 84.9863 105.283 cv84.8115 105.283 84.7539 105.225 84.7539 104.991 cv84.7539 104.466 86.2129 105.108 86.2129 103.299 cv86.2129 93.9014 li86.2129 92.5596 84.5781 92.9092 84.5781 92.501 cv84.5781 92.3252 84.7539 92.3252 84.8701 92.3252 cvcp75.1807 93.3184 mo74.0127 93.3184 74.0127 93.6094 73.6631 94.6016 cv73.6045 94.7773 73.6045 95.0107 73.3711 95.0107 cv73.2549 95.0107 73.1963 94.8936 73.1963 94.7773 cv73.3711 93.0264 li73.4297 92.792 73.3711 92.3252 73.7217 92.3252 cv75.1221 92.3252 76.5811 92.3838 78.916 92.3838 cv82.2432 92.3838 83.9355 92.3252 84.2861 92.3252 cv84.6953 92.3252 84.7539 92.3838 84.8115 92.8506 cv84.9287 94.3096 li84.9287 94.4854 84.9287 94.7188 84.6953 94.7188 cv84.0527 94.7188 85.0449 93.3184 83.1777 93.3184 cv80.5508 93.3184 li79.7334 93.3184 79.792 93.2598 79.792 94.1934 cv79.792 103.591 li79.792 105.108 81.3096 104.524 81.3096 105.05 cv81.3096 105.108 81.3096 105.283 81.1338 105.283 cv80.667 105.283 80.1426 105.225 79.6172 105.225 cv77.5742 105.225 77.2236 105.283 77.1074 105.283 cv76.9316 105.283 76.873 105.225 76.873 105.05 cv76.873 104.583 78.332 104.816 78.332 103.707 cv78.332 94.1348 li78.332 94.0186 78.4492 93.3184 78.1582 93.3184 cv75.1807 93.3184 licp60.1216 92.3252 mo60.4136 92.3252 60.7051 92.3838 60.9971 92.3838 cv61.2305 92.3838 61.5225 92.3252 61.8145 92.3252 cv62.0479 92.3252 62.1646 92.6172 62.2813 92.7334 cv71.0371 102.481 li71.1533 102.599 71.2109 102.657 71.2695 102.657 cv71.3281 102.657 71.3281 102.599 71.3281 102.481 cv71.3281 94.7773 li71.3281 92.3838 69.2852 93.085 69.2852 92.501 cv69.2852 92.3838 69.4023 92.3252 69.5186 92.3252 cv70.0449 92.3252 70.5703 92.3838 71.1533 92.3838 cv71.7959 92.3838 72.5547 92.3252 73.0215 92.3252 cv73.1377 92.3252 73.1963 92.3838 73.1963 92.4424 cv73.1963 92.9678 72.0869 92.6172 72.0869 93.96 cv72.0869 104.583 li72.0869 105.108 72.0869 105.342 71.9707 105.342 cv71.7959 105.342 71.6201 105.283 71.2695 104.874 cv63.3901 95.9443 li63.332 95.9443 63.0986 95.5947 62.9819 95.5947 cv62.9233 95.5947 62.8652 95.6523 62.8652 96.0605 cv62.8652 103.532 li62.8652 105.225 64.4409 104.583 64.4409 105.05 cv64.4409 105.167 64.4409 105.283 64.2656 105.283 cv63.7988 105.283 63.332 105.225 62.3979 105.225 cv61.7559 105.225 60.8223 105.283 60.7051 105.283 cv60.4717 105.283 60.4717 105.167 60.4717 105.108 cv60.4717 104.466 62.0479 105.283 62.0479 102.657 cv62.0479 95.8857 li62.0479 92.0918 59.8301 93.1426 59.8301 92.501 cv59.8301 92.3838 60.0049 92.3252 60.1216 92.3252 cvcp56.3862 98.2783 mo58.3125 98.2783 57.7871 96.8193 58.2539 96.8193 cv58.4292 96.8193 58.4292 96.9951 58.4292 97.1699 cv58.4292 97.8115 58.4292 98.3955 58.4292 98.9795 cv58.4292 99.4463 58.4292 99.9717 58.4292 100.438 cv58.4292 100.614 58.3706 100.673 58.2539 100.673 cv57.6699 100.673 58.3125 99.0967 56.7944 99.0967 cv54.0513 99.0967 li53.6426 99.0967 53.7012 99.3877 53.7012 99.6797 cv53.7012 103.007 li53.7012 104.115 53.5845 104.583 55.1021 104.583 cv59.3628 104.583 60.0049 102.657 60.2383 102.657 cv60.355 102.657 60.355 102.832 60.355 102.891 cv60.355 103.532 59.8882 104.174 59.4214 104.641 cv58.8374 105.342 58.4292 105.283 57.6699 105.283 cv56.2695 105.283 54.8687 105.167 53.4678 105.225 cv52.709 105.225 51.9502 105.283 51.2495 105.283 cv51.0747 105.283 50.958 105.225 50.958 105.108 cv51.0161 104.874 51.1914 104.933 51.7749 104.641 cv52.2417 104.407 52.3003 103.882 52.3003 103.007 cv52.3003 94.6602 li52.3003 93.8438 52.3003 92.9678 51.3081 92.792 cv51.1328 92.792 50.7241 92.7334 50.7241 92.501 cv50.7241 92.3838 50.8413 92.3252 51.3662 92.3252 cv54.8687 92.3252 55.8022 92.3838 56.561 92.3838 cv56.9116 92.3838 58.604 92.3252 59.1875 92.3252 cv59.3628 92.3252 59.3628 92.501 59.3628 92.6758 cv59.3628 94.7188 59.1294 94.8936 59.0127 94.8936 cv58.5459 94.8936 58.896 94.0186 58.5459 93.6094 cv58.0786 92.9678 56.1528 93.085 55.4521 93.085 cv53.7012 93.085 53.7012 93.0264 53.7012 94.252 cv53.7012 97.6367 li53.7012 98.2783 53.7012 98.2783 54.4014 98.2783 cv56.3862 98.2783 licp99.7725 133.444 mo100.356 133.444 100.939 133.503 101.523 133.503 cv102.049 133.503 102.574 133.444 103.042 133.444 cv103.333 133.444 103.392 133.503 103.392 133.561 cv103.392 133.911 102.225 133.619 102.225 134.845 cv102.225 138.347 li102.225 138.58 102.225 138.639 102.457 138.639 cv108.411 138.639 li108.586 138.639 108.527 138.229 108.527 138.171 cv108.527 134.845 li108.527 133.678 107.303 133.97 107.303 133.619 cv107.303 133.503 107.361 133.444 107.594 133.444 cv108.119 133.444 108.995 133.503 109.287 133.503 cv109.871 133.503 110.104 133.444 110.454 133.444 cv110.863 133.444 110.921 133.561 110.921 133.678 cv110.921 133.97 109.813 133.678 109.813 134.845 cv109.813 143.425 li109.813 144.65 111.271 144.358 111.271 144.767 cv111.271 144.825 111.213 144.942 111.097 144.942 cv110.688 144.942 110.162 144.884 109.578 144.884 cv108.527 144.884 108.119 144.942 107.769 144.942 cv107.652 144.942 107.419 145.001 107.419 144.709 cv107.419 144.358 108.527 144.593 108.527 143.542 cv108.527 139.631 li108.527 139.397 108.586 139.223 108.411 139.223 cv102.399 139.223 li102.225 139.223 102.225 139.339 102.225 139.515 cv102.225 143.542 li102.225 144.65 103.742 144.3 103.742 144.825 cv103.742 144.884 103.625 144.942 103.509 144.942 cv103.275 144.942 102.107 144.884 101.232 144.884 cv100.064 144.884 99.8896 144.942 99.8311 144.942 cv99.7139 144.942 99.6563 144.884 99.6563 144.709 cv99.6563 144.242 100.939 144.767 100.939 143.133 cv100.939 134.845 li100.939 133.619 99.4805 133.97 99.4805 133.619 cv99.4805 133.444 99.6563 133.444 99.7725 133.444 cvcp109.908 109.921 mo110.9 109.921 111.834 110.038 112.826 110.038 cv113.702 110.038 114.52 109.921 115.336 109.921 cv115.745 109.921 115.861 109.979 115.861 110.155 cv115.861 110.797 113.936 110.214 113.936 112.198 cv113.936 126.557 li113.936 128.424 116.271 127.782 116.271 128.599 cv116.271 128.774 116.212 128.833 115.745 128.833 cv115.162 128.833 113.994 128.774 112.826 128.774 cv111.192 128.774 110.667 128.833 110.259 128.833 cv109.792 128.833 109.733 128.716 109.733 128.424 cv109.733 127.665 111.776 128.541 111.776 125.914 cv111.776 112.198 li111.776 110.271 109.616 110.797 109.616 110.214 cv109.616 109.979 109.675 109.921 109.908 109.921 cvcp127.485 92.3252 mo127.952 92.3252 128.303 92.3838 129.528 92.3838 cv130.17 92.3838 130.638 92.3252 130.813 92.3252 cv130.987 92.3252 131.163 92.3252 131.163 92.501 cv131.163 92.792 130.346 92.792 130.346 93.3184 cv130.346 93.668 130.579 93.96 130.638 94.0771 cv132.855 97.6367 li133.03 97.8701 133.146 97.9873 133.264 97.9873 cv133.322 97.9873 133.438 97.8701 133.614 97.5781 cv135.482 94.5439 li135.599 94.3096 135.891 94.0186 135.891 93.5518 cv135.891 92.6172 134.489 93.0264 134.489 92.5596 cv134.489 92.3252 134.664 92.3252 134.898 92.3252 cv135.307 92.3252 135.773 92.3838 136.24 92.3838 cv136.766 92.3838 137.292 92.3252 137.816 92.3252 cv137.934 92.3252 137.992 92.4424 137.992 92.501 cv137.992 92.7334 137.7 92.792 137.583 92.8506 cv137.058 93.1426 136.824 93.668 136.533 94.1348 cv133.964 98.1621 li133.672 98.5713 133.556 98.6875 133.556 98.9795 cv133.556 103.474 li133.556 105.05 135.016 104.524 135.016 105.108 cv135.016 105.283 134.898 105.283 134.606 105.283 cv134.373 105.283 133.264 105.225 132.622 105.225 cv131.805 105.225 131.104 105.283 130.93 105.283 cv130.813 105.283 130.696 105.283 130.696 105.05 cv130.696 104.583 132.097 105.05 132.097 103.707 cv132.097 99.2715 li132.097 98.9209 131.805 98.5713 131.688 98.3369 cv128.594 93.4346 li128.127 92.6758 127.252 92.9092 127.252 92.5596 cv127.252 92.4424 127.311 92.3252 127.485 92.3252 cvcp124.035 99.3877 mo124.443 99.3877 124.443 99.2715 124.327 99.0381 cv122.518 94.6016 li122.459 94.3682 122.343 94.3682 122.226 94.6016 cv120.184 99.0967 li120.066 99.3291 120.184 99.3877 120.417 99.3877 cv124.035 99.3877 licp120.3 100.205 mo119.949 100.205 119.6 100.205 119.424 100.614 cv118.257 103.182 li118.198 103.299 118.081 103.591 118.081 103.824 cv118.081 105.108 119.424 104.524 119.424 104.991 cv119.424 105.342 119.133 105.283 118.898 105.283 cv118.373 105.283 117.906 105.225 117.381 105.225 cv116.855 105.225 116.389 105.283 115.922 105.283 cv115.805 105.283 115.747 105.225 115.747 105.108 cv115.747 104.7 116.622 104.991 117.089 103.94 cv121.467 94.6016 li122.518 92.3252 122.576 92.0342 122.867 92.0342 cv123.043 92.0342 123.159 92.5596 123.218 92.6758 cv127.07 102.132 li127.362 102.832 127.537 103.591 127.946 104.232 cv128.529 105.05 129.58 104.641 129.58 105.108 cv129.58 105.283 129.463 105.283 129.347 105.283 cv128.588 105.283 127.829 105.225 127.07 105.225 cv126.545 105.225 126.078 105.283 125.553 105.283 cv125.494 105.283 125.144 105.283 125.144 105.108 cv125.144 104.641 126.254 104.874 126.254 104.174 cv126.254 103.766 125.902 102.891 125.729 102.424 cv125.144 100.906 li124.969 100.497 124.853 100.205 124.327 100.205 cv120.3 100.205 licp110.377 104.816 mo113.004 104.816 115.455 103.415 115.455 99.1553 cv115.455 95.0693 112.77 92.792 109.268 92.7334 cv107.517 92.7334 107.459 93.0264 107.459 93.9014 cv107.459 102.657 li107.459 102.948 107.4 103.824 107.575 103.94 cv108.159 104.583 109.56 104.816 110.377 104.816 cvcp104.773 92.3252 mo105.357 92.3252 105.883 92.3838 106.408 92.3838 cv107.634 92.3838 108.801 92.3252 110.377 92.3252 cv113.646 92.3252 116.855 94.7773 116.855 98.1621 cv116.855 102.365 114.871 105.283 109.734 105.283 cv108.801 105.283 107.867 105.225 106.934 105.225 cv106.816 105.225 105.007 105.283 104.891 105.283 cv104.773 105.283 104.715 105.225 104.715 105.108 cv104.715 104.7 106 105.167 106 103.415 cv106 94.252 li106 92.3838 104.54 92.9678 104.54 92.501 cv104.54 92.3838 104.656 92.3252 104.773 92.3252 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.06 0.15 0.34 cmykf68.8105 69.418 mo68.8105 65.9355 li73.7539 65.9355 li73.7539 65.6084 li73.7539 62.1221 72.1465 59.5674 61.0693 61.4863 cv42.854 64.7295 li32.373 79.2686 li57.5244 74.8076 li65.0601 73.5146 71.6768 73.2441 73.7539 79.2363 cv73.7539 69.418 li68.8105 69.418 licp0.6 0 0.3 0.72 cmykf77.1895 79.2354 mo77.1895 74.4932 79.9922 71.2354 85.7109 65.5156 cv89.7412 61.4863 li108.161 64.7295 li118.66 79.2529 li94.5078 75.0859 li86.3184 73.5146 79.376 72.9639 77.1895 79.2354 cvcpf78.2109 65.9277 mo80.0352 62.0127 83.9209 58.4736 86.1553 56.2393 cv87.7451 54.624 li94.5088 47.8604 95.8096 45.0615 96.2197 40.4033 cv96.2383 40.1602 96.5869 41.3154 96.6914 42.1348 cv97.04 44.8799 96.8379 46.8721 95.9053 49.6201 cv94.5098 53.7275 91.207 57.001 86.9219 61.2861 cv82.2598 65.9277 li78.2109 65.9277 licp0 0.27 1 0.18 cmykf82.1387 9.20801 mo82.1387 9.17139 82.251 9.15088 82.251 9.20801 cv82.251 14.6025 li82.251 19.4814 75.9814 25.1104 73.4844 27.5908 cv64.2974 36.8027 li61.1216 39.9785 54.7637 46.25 57.4331 52.3008 cv57.522 52.5029 57.6035 52.6748 57.2637 52.4346 cv56.5845 51.9521 55.5547 50.2588 55.2803 47.1641 cv54.791 41.6484 58.5518 36.709 63.1904 32.0703 cv71.9531 23.2974 li80.8389 14.4102 81.7061 12.8442 82.1387 9.20801 cvcpf73.4844 36.8242 mo75.9814 34.3428 82.251 28.7148 82.251 23.8354 cv82.251 18.4404 li82.251 18.3838 82.1387 18.4038 82.1387 18.4404 cv81.7061 22.0771 80.8389 23.6431 71.9531 32.5303 cv63.813 40.6826 li60.856 43.6396 58.144 46.7402 58.269 51.7451 cv58.3457 54.8125 59.8877 57.3545 62.2085 57.9531 cv63.1631 58.1602 63.1055 58.0352 62.8779 57.9385 cv59.6001 56.3916 59.8359 50.4736 65.1338 45.1748 cv73.4844 36.8242 licpf63.2656 28.6641 mo56.5015 35.4277 55.2012 38.2256 54.7905 42.8848 cv54.772 43.1279 54.4233 41.9727 54.3193 41.1533 cv53.9702 38.4092 54.1724 36.417 55.1055 33.668 cv56.5 29.5596 59.8032 26.2871 64.0889 22.0015 cv71.9531 14.125 li80.8389 5.23779 81.7061 3.67188 82.1387 0.0351563 cv82.1387 -0.000976563 82.251 -0.0214844 82.251 0.0351563 cv82.251 5.43018 li82.251 10.3091 75.9814 15.938 73.4844 18.4189 cv63.2656 28.6641 licpf77.3057 74.7803 mo77.3008 74.8213 77.1904 74.8223 77.1904 74.7803 cv77.1904 69.418 li79.4346 69.418 li78.166 71.2363 77.5176 72.9951 77.3057 74.7803 cvcpf77.3223 65.9355 mo77.3174 65.9775 77.207 65.9775 77.207 65.9355 cv77.207 60.4775 li77.207 56.3779 81.2256 51.9443 85.209 47.9873 cv87.793 45.4053 li89.8789 43.3193 96.2461 37.0381 93.5771 30.9873 cv93.4883 30.7861 93.4072 30.6123 93.7461 30.8545 cv94.4258 31.3359 95.4551 33.0303 95.7295 36.125 cv96.2188 41.6406 92.459 46.5791 87.8203 51.2178 cv85.4307 53.6182 li79.6709 59.3779 77.7549 61.959 77.3223 65.9355 cvcpf77.3164 56.4697 mo77.3105 56.5107 77.2002 56.5117 77.2002 56.4697 cv77.2002 50.9287 li77.2002 47.0195 81.0781 42.8008 82.959 40.9189 cv85.876 38.0088 li91.1738 32.7109 91.4102 26.792 88.1328 25.2441 cv87.9053 25.1484 87.8467 25.0234 88.8018 25.2305 cv91.1221 25.8281 92.6641 28.3701 92.7412 31.4385 cv92.8662 36.4434 90.2002 39.5234 87.2422 42.4805 cv84.8779 44.8447 li79.9307 49.792 77.7656 52.6826 77.3164 56.4697 cvcpf117.444 70.3086 mo117.639 70.3086 li117.944 70.3086 118.098 70.1611 118.098 69.8643 cv118.098 69.7139 118.04 69.5889 117.926 69.4873 cv117.813 69.3867 117.672 69.3359 117.504 69.3359 cv117.397 69.3359 117.344 69.3779 117.344 69.4629 cv117.348 69.5205 li117.348 70.21 li117.348 70.2568 117.352 70.2842 117.361 70.2939 cv117.371 70.3037 117.398 70.3086 117.444 70.3086 cvcp117.994 70.3838 mo118.458 71.0615 li118.516 71.1436 li118.661 71.3555 118.792 71.4639 118.908 71.4697 cv118.963 71.4727 li119 71.4746 119.018 71.4912 119.016 71.5244 cv119.012 71.5811 118.92 71.6094 118.742 71.6094 cv118.537 71.6094 118.353 71.4854 118.188 71.2393 cv117.754 70.585 li117.73 70.5469 li117.707 70.5078 117.668 70.4883 117.614 70.4883 cv117.382 70.4883 li117.355 70.4912 li117.348 70.5264 li117.348 71.1318 li117.348 71.2666 117.365 71.3545 117.401 71.3975 cv117.438 71.4385 117.52 71.4668 117.646 71.4805 cv117.703 71.4863 117.732 71.5068 117.734 71.5439 cv117.736 71.583 117.709 71.6016 117.651 71.6016 cv117.634 71.6016 117.599 71.5986 117.545 71.5928 cv117.5 71.5869 117.427 71.584 117.324 71.584 cv117.063 71.584 li117.029 71.584 116.98 71.5879 116.918 71.5957 cv116.873 71.5996 116.844 71.6016 116.83 71.6016 cv116.779 71.6016 116.754 71.582 116.754 71.543 cv116.754 71.5137 116.775 71.4941 116.818 71.4844 cv116.908 71.4629 116.966 71.4238 116.99 71.3662 cv117.015 71.3086 117.027 71.1846 117.027 70.9932 cv117.027 69.7607 li117.023 69.583 li117.023 69.417 116.966 69.3262 116.85 69.3086 cv116.768 69.2969 li116.717 69.2871 116.691 69.2646 116.691 69.2295 cv116.691 69.1914 116.719 69.1719 116.772 69.1719 cv116.786 69.1719 116.828 69.1748 116.897 69.1807 cv116.935 69.1826 116.986 69.1836 117.052 69.1836 cv117.106 69.1836 117.196 69.1797 117.322 69.1719 cv117.418 69.167 117.5 69.1641 117.57 69.1641 cv118.127 69.1641 118.406 69.3682 118.406 69.7783 cv118.406 70.0361 118.269 70.2373 117.994 70.3838 cvcp117.732 68.5391 mo117.222 68.5391 116.785 68.7197 116.424 69.0811 cv116.063 69.4434 115.883 69.8799 115.883 70.3906 cv115.883 70.9014 116.063 71.3379 116.424 71.7002 cv116.785 72.0615 117.222 72.2422 117.732 72.2422 cv118.242 72.2422 118.678 72.0615 119.039 71.7002 cv119.4 71.3379 119.582 70.9014 119.582 70.3906 cv119.582 69.8779 119.401 69.4404 119.041 69.0801 cv118.681 68.7197 118.244 68.5391 117.732 68.5391 cvcp117.732 68.3086 mo118.309 68.3086 118.799 68.5107 119.204 68.917 cv119.609 69.3223 119.813 69.8135 119.813 70.3896 cv119.813 70.9648 119.609 71.4551 119.203 71.8604 cv118.797 72.2666 118.307 72.4688 117.732 72.4688 cv117.088 72.4688 116.561 72.2246 116.15 71.7354 cv115.818 71.3408 115.652 70.8926 115.652 70.3896 cv115.652 69.8779 115.816 69.4277 116.146 69.0381 cv116.563 68.5518 117.092 68.3086 117.732 68.3086 cvcp/0 <</Name (PANTONE 402 CV)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.06 0.15 0.34 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf150.029 109.175 mo150.223 109.175 li150.529 109.175 150.682 109.026 150.682 108.729 cv150.682 108.579 150.625 108.454 150.51 108.353 cv150.396 108.253 150.256 108.202 150.088 108.202 cv149.982 108.202 149.929 108.244 149.929 108.329 cv149.932 108.386 li149.932 109.076 li149.932 109.122 149.937 109.15 149.945 109.159 cv149.955 109.169 149.982 109.175 150.029 109.175 cvcp150.578 109.249 mo151.043 109.927 li151.101 110.01 li151.246 110.222 151.377 110.329 151.492 110.335 cv151.547 110.339 li151.584 110.341 151.602 110.357 151.6 110.39 cv151.596 110.446 151.505 110.476 151.327 110.476 cv151.122 110.476 150.938 110.352 150.773 110.104 cv150.338 109.45 li150.314 109.413 li150.291 109.374 150.252 109.354 150.199 109.354 cv149.967 109.354 li149.94 109.356 li149.932 109.392 li149.932 109.998 li149.932 110.132 149.949 110.221 149.986 110.263 cv150.021 110.305 150.104 110.333 150.23 110.347 cv150.287 110.353 150.316 110.373 150.318 110.409 cv150.32 110.448 150.293 110.468 150.236 110.468 cv150.219 110.468 150.184 110.464 150.13 110.458 cv150.085 110.452 150.012 110.45 149.909 110.45 cv149.646 110.45 li149.613 110.45 149.565 110.454 149.503 110.462 cv149.457 110.466 149.428 110.468 149.414 110.468 cv149.363 110.468 149.338 110.448 149.338 110.409 cv149.338 110.38 149.359 110.36 149.402 110.351 cv149.492 110.329 149.551 110.29 149.574 110.231 cv149.6 110.175 149.611 110.05 149.611 109.859 cv149.611 108.627 li149.608 108.448 li149.608 108.283 149.551 108.192 149.435 108.175 cv149.352 108.163 li149.301 108.153 149.275 108.131 149.275 108.096 cv149.275 108.058 149.303 108.038 149.357 108.038 cv149.371 108.038 149.412 108.04 149.482 108.046 cv149.52 108.048 149.57 108.05 149.637 108.05 cv149.691 108.05 149.781 108.046 149.907 108.038 cv150.002 108.032 150.085 108.03 150.154 108.03 cv150.711 108.03 150.99 108.234 150.99 108.644 cv150.99 108.901 150.854 109.104 150.578 109.249 cvcp150.316 107.405 mo149.807 107.405 149.37 107.585 149.009 107.947 cv148.647 108.31 148.467 108.745 148.467 109.257 cv148.467 109.767 148.647 110.204 149.009 110.565 cv149.37 110.927 149.807 111.108 150.316 111.108 cv150.826 111.108 151.263 110.927 151.624 110.565 cv151.985 110.204 152.166 109.767 152.166 109.257 cv152.166 108.743 151.986 108.307 151.625 107.946 cv151.266 107.585 150.828 107.405 150.316 107.405 cvcp150.316 107.175 mo150.893 107.175 151.383 107.377 151.789 107.782 cv152.193 108.188 152.396 108.679 152.396 109.256 cv152.396 109.831 152.193 110.321 151.787 110.726 cv151.381 111.132 150.891 111.335 150.316 111.335 cv149.672 111.335 149.145 111.091 148.734 110.602 cv148.402 110.206 148.236 109.759 148.236 109.256 cv148.236 108.743 148.401 108.294 148.731 107.904 cv149.147 107.417 149.676 107.175 150.316 107.175 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (4C_3.EPS)%%CreationDate: 4/19/07 11:19 AM%AI9_DataStream%Gb!R&q-"Hd[Q"-?5jfeo#RH+K)slh:-n'mZLB4+n9eZlhmreVSYPfKdCb&MN9#u>Q52UFQZaTceCA)^jF,W,WVcPpgf4X9u5?BoG%?ESX+>PD%)m\aJVnDi6po[`j8FtZM;8<P)]_FEl<+]&CQ06)F8,\k7hikfnTS^Z>op2tkogGs-FHE3U[::I];?i@TZ?%:?"$,<k4%8+"LCcG/WpQ`\_pg@WSUn9F!kZG"ZM?FBY&Uu<HYHH.PFkEfh"Dm)pih;rtH3?dD]0bsMX#A$3+phtnrY>6fice?!-B_uWC$@_F%%&+MCQH`u8o6V!dqAg:AqHi;6TCuamMbI@@1DqF<+j4.3Ak(%FDc-^<ZBY!Q\SV@s4?2,L#d9jCi&;j9GM8kC6,)$!k6!hAmeVK%0%L]<Du9bR_NXGC-OJ$Yd)[st"DqV>3P]Q=$oNk;s]^:Ljkp"M;d^6:H_nmFB*^B>:1/Q'#a4cJ?d#TB$h:.'u<T!@urkO!aN__dpU%?hZXq?TciMkGLF60>%1roDaA=O.`:.ob`+,HeIh9\3BB!#SNBmB5]hDm7RK-[i:Yc*.NbCcdi&,K)JaEB=e[iY&elHI9ac=nkZIm%R]X?Z?(O0[@-=D8^#(iCecnE'FH]1W7^+!S;<7Oq2g(:plah)lUG8oAp"1&q\l>ZP-"Ar;MC]ebr[t:<SaQ="oBTu8\G1<TH[_hn%&Bn1ls.T-F'''!jq>]5Hk]=Mr^(q0528/iUQNL1UAef&c^HPlh>i?C4MOe()M8"`#F4pB2^Su_30C\f)%C_r.5(;5eC7$Y&ZhB]6%8WJ!JDrIV=DWg_*qt`g\2Z*'HF4.5[[edaHf<qg.H?44[nXjt'!mp**?Z!e$Xn/$mddm+D\5Ie,G><Ur:]'Xd!;+&"DU84Ii<AV>%i\5N@/)At:YPN^GF/dl+s.l)4?p^"T^S?fpqVZ\_RR_\.-:*`q$$O@=>qJ<I>Qap!hd$"mlgjWEB=E$TlhiTCJt1^u:&N`OQ,+O1%[e9CeVu5EZbOY,&PKr98mn0cQ"5.O6qralDmCg8]rV"e2dam,:5`-Jt7d0^A?gZ%^NR::N['%a?+'[QjZD)?-I[jc;_%*1;XG='%%Fb:T!IIC8'VG5>&s4SU<]aDsXZ?>!ged5DH,5Zra$iJ4\8W9W8_dd)5-L4l@/E_jRruuUjaEjP4m.J!Rd.CN(DpUh&+AM/f"%=O9%4,t4VD>O#Cra3f$VgeD"rV6g"q&@,!eV!^fqWG%WrJ^6`p[CC:=]bGq/?[jJ^RYEKOFQ#7?;nu7l+]JT9mI1tJaf`?Moa]gaMn0a%EIj5Q@3Kudd.:ec";q4X,!Ts)NoO;b'$HAkDSsfO/?oUt'S=[gkm5?A\`$qA'$GGEc'1^`L+!<37n-t@XsBF/+Ws,dqh%6\0hM58%[a(objZ0N\Z'Oq$+/JfBWc%dM00pmjH@=WFf/<M(?\Y\-h17/doX8nmXtS:jp<Gt!Cs-1VqG(n+1(1/Oh_f1:jDP:W$qPSe<a4Q(%rjZ!9!fdHaRq^Dc5[1^arNF,-7fR[0_sJT>b1DmtitaJ+L(2.*&),BmhecYN>1]W@m%2^ae95Y+Y;W&tn"($Y+/u>&lMj$e.eD9g%:%erGA;G4l1GrjOL_#8:nphU1?Oj>Mljo@u"(1K!W*tsd2p+a1_>p#4ARO)F@%8h/3rBZ7@4^R@'/1,b!=K5ND3^F;>-$N^-Encq%L@pISSY+p>\%7(\hhQ-=Do$&.rUFlUp>8r<fC8AUE0'G_a_ed%3rB&B^?g#Is)3d^5ktW7kq=aZ]BsC2n`id%0J_opr(m?2g^<iB%m)//GnR&D9mkJba>k)3E=JUGS/oN$fik5E)CZ$O5-<ej(rq]t_3l&\g'aEg+F*c4tX"lGnEoB7;YEO$J5IhO*#)`RWj1!NpiVbR3%-T(dG*!s)r,V&Ke]QJ8JY-RPPcKbG,NP><ljfOQ=s5=]Ph)cp<id[8XrH%:D\^s/:%:pSsZ)Z";+5[m]QN*\Vr;U2lp3ur*^K;ES%LUTS<o)/-04"l=C=Qso[M`Z44klW/G[X[r&@:!N2#J^)\Eb'<[[Ih2h.d?9V<BBmKJ%@RVkV[`M#oV0\J"<5)IoY`q+T)brOZ[n/%d]7k!@Pe&KhRGl(E5H^1Dgo+?J,ZGlZkVVOJbUV,\(A1XT!mnQpcgD25t_*RRrHpG\'@5Z\naCU41=2KRIEF?=]5O0,n"$s]5E&+%g[;J]J$nV>m=4lrlY#DZf#daLH!g&*7l6HDQ.(@\0'gd5p!;CDcZX`GF+\rAKq.Pn7riP'[*HrrRG<=n<pq6]VVY%FT:p"*Sr6Sj%bM@DdF5C:Q'Zb"OZE$%aEkD>A[bn(!DtWtomeQn(;>^9gI<L'd<S'ai?]FU!l_6B2D0L8qqK6Xf3n?"-+g,0WK>$*OmFQjY@0j2[%7ukI0mBlkih>=&&7ZKj27Jql.=C:FMp2?VFno'HkV=g>/%5bY?IW^"jdNh[,qOsA*[,1*A:HGWG=oB%qq<KXi]%nDYcKsFK<8-WH%lR-q]9F&K_S&@Yjh:?`;V?Lc6oPZ/Ir!]%a5AbcI%9>*YdgNga\:G]#/,-hU;PPm4BtMe\13A1k",;u=6Hu3Gl9EdeJn8tJIbh1$%@I&d?EJt?>P'1R)(]S6Bp7^i:en+1D1ooAB4up;=^O`hd"nuqKb>24D]kZs!ot-b&.;F`t^QFJMo2iPNK0Iaj4q"T+eR&,nX4;uB%#/+hs\(>ruCS"L(Pg.KflOl.J8S\t*UFCr*b+E)-S9DJVmBaV5eX,-9qP3s>-Y,fli2)p8<u2=E;bh9Ojq.LgVNIDshU,@q]`nu2%Fh=R7B!AjQ"*i.2]'`_1f)XY</NXp0,M<-J[EdL^G'U3V0!:gIh^C%ZS)*KT/'9C1Zub%NpLYl!'s=X0.a-#/42#CEH>B-[pP[2r%)S&73YPu877+gc(C3OMiQ(bhli@:YFLW3YqriplL?gRh\4KEt"h>=^gqdlr0QNpFM_tEgScq<7P:grP-q.7Z=r4)/RHFG7b3V3LH%e,HCr=ZW'#kI@Zf8Zpf45t(WNdMQ.h5AmZ#7F0/h8(=[,CFR?4KH6^ppK>W3i0jhq.GZ2X,>YqBRis%9TWakms6'k7lPc[I_^\)m%J(!WI`oZPG`@j8:I_`&`kZ9,!)dO@OgXW`""_osQKe+`"^M7mEH?Q>>&?Ai5TJ]nYJ_Fp_hB'XqF*=OlC!l'(]=dD-kU<,n.U!m3%qcSW^!?LYfOFqsKPaBh'Lb5M-q-@08kN9-^*>:`BA/'jXm']kP0%oCV\[F8pA,\77f=AP1PI/ktFC+]grQE1uQUn-1jN9hl%t5kh%NODj^k2m(RbiO!/7bsS7/tA?"qBD8ggiTm80UG8Y/iJXRj_bm-1L*(_>"E6$)U]h(Et#T;2ZF=T^%!,XSC6'`EELj_VDU=2/?C[)%;U=VUJ(N;`+LerD;h1]LRo\9O7AlP..jd$,XJ@7P<5&!%Z<nKT6%&j7aIF`Wq;"&^A^NU>Gs+Pt+X-64'B..Q8iT4-;08qsaa*od%<Pki!P\IGYFNFHt&$<qm*2C\pUR^'`L#fg(SUO/VO]#=<-^`=Y6JFY=FLpY&"AqAN8GE9hq6*QfIr(`GQKk?r41EAT=Z9=GcUR.c%'f:CX-=oA@&+$=)/8HZi?fc_&S_dVCr`u6\'@#caYAD#W:&k,h\J:#!#IAO*\f![AK!(p:Ug@.m;^#-OK97Xc>Lj4>U[(WRjVq=k%rU[bWFq$)U</EjWTXA\,XiJS^LJ`"D-%0'g`iePN]'a7d]mbE)^&hPkQ/-"XrT/3jMp-8`&FCsY,Z]UlidHq^Jk1*=04J9;<)q^t%laqLD)oT\F>/[e#9cE"PaL?PQDh:pj^AbH,gH`($`VBu4U$E=TKOe@B"1u6)<no:)7/a1:Ds&^==.L!5l-<Wep71K;rh3Hk^mL"m%PY28JW`lZ4+JpBJWAhGk1ZY8E^<W=t11)GZeAPBqC&rcONpH%%DPg8m)(3tm8f68B-EGo`-6KXBr7+@:'@"jFnF>FWeD[WT1aA=&%;3"bDr2mD\\;B,VJ%<&"]q'glD<,/.lMRu-m36ehoDP(up2KI(rV8##HLP/=i3+DT&q,Y?5!<'H^<qd%qTbN!g"(.i[G-,\]&((^%pjKI=rQVs@0,LeIYE,<f#Kb]uZeP0,o\/T]Q`ohPQgo2X[6"%7kkPbGbs+EP=`Thjhfuu$GKZ'GkPP4C[3+Yq`Rb"^:KqU!S>0`^%=)\*&qrlY]bg$-ZWJ+]o\#/:`)q.^na(M$B(;,X?WS+BpoEBf@L>P\&k+=fMR234.lMJnFk+:?nP@%UP-F_j8Ljsi&opkm,=R(Ti%i*Ugi"!l7.?F"Ran'._"%r0QI:+g[!8%5SsV=ucsRZlM%B:Dg1K:^\A,E#8SrK!$.s+!<m0B(Z\2;.M3YM4K\qpbT@G^%22$MJ)2%X]-b!_UWP8?\61&c%XqF^]%Kk.]bJtIP4D1<I3*l[P\!rC9afSQ+gOl]DpjPZC+d.n,Be0V5VhEBCFjGK1r+D$WS.i*R6l5h0G2c%C%q>uo'E.9-WApo.WmY>k>)F7NUB#%*recF-0OnX3;VWNm'"(FmHM<DS)rn*o/H,Z/)@kqBkAh0qh;&@H.<>['FjPem[$l@'im@S%0YEnL55N`:Ig/(E3WjH7quC>9<4b4JPF9s/5Mj&K8msZLXP9"hm=%2XH!aD4no=H`m,sP7Zo2c#qe^?QD.0:2dZ;)0r(<STc#nBV%o=b&oGN3U<Mcd^rII59A4)t]Y%=cXIXL'qX.h1XTc9HT%Ab6[O0k[m/hZ"8F^<*G*fm*I5V4c9#rcFN\cO23c3eip4dFmF'mH_I1%#>ZF"gV5r5<kA)Z3@Gg&XbVg5NF,rTqNm*L=C^Inhj`rV]NCg-IPamcf'uc8kL#7kQ,Yc98t4RR^PYXE(2#EdX\HiEU[^oWC\@AL%MUT4a(["l2IIB(.*h=XgQ0qnc[reH#06Xb,)h2`@$7c!:n*Dq3gu_]7gAfaZfQ]TF="2A:rq?/2@:/cc7/Pl".U@**S8W+jV9R!V%qe*s1*`JoCl"j];^-1iu<dHIS5/&JGoSrH^nbGd`V6t$9G('AMMkmtR42@I(p:h>CqYT,uF/>PX09Pk6omND]`ANtGle;s5(X(9G%(NM&)p?h@ZYgQ;Dq<ZG?8o)mXm2P6cH?1ZfJ2][%pC@)h[du!9G2Fq/(R:TeF.#`YT0?HQWRBM-gUc"o[(4V*pXW\oYgS5V8p?lP%rqX!Op];png<ESX^YChQ&=$RtO*%56PHij++.r#,./-c&ghiNH]Q_raIbr"8(C+O:gVjELro7:_FL@_]hY$R!%B:-*ATiJF_[:&%%joniW+"XV0[TR$crb:rs1KM(D=D9U?n*/6N(0(-F8llA-O?2L*m/5kW5$rcja:.S,cI;FoY4VOFB%%f-R+U<23[@WiL"]fiJ+`Y>%;r7*<M9mjZJ%pCkje#i7jSp.B_5;Jn[YoV%_I@b2Y(*jiAT5$BX?YB@kMHMdJPT(4jpU(A?O%JHVrphHrUV0#='E_<?96?;f29rI%X3R36O%Ia&ld!f?pA:RkO.Eu7MnU%5_;@I13-to)Vi#q?3;YAcbSL-q3Zk6u2"[shq(h&RDl7(7q]MfjEXk9,4lp%WgFW-tauT7-%pcS"H)R7U_kMq3eA^T+JSWD1pC=05scDUR0f:lW%4'rL_4d%$JnGAR)q>1!/6IE!9oBjG*^Za8cc>drrl<c>_m'u@>*k`$k^2D3,%l$)Sj_656\h3EcQ2@;t@AC#]&mbY!rY>77JgC*J_i7G:qpZVA;L\\]>hlc\q5O!YI)DSG)4#Jhgl7Mu"brhKOZ@@9_e_#3<N.9)m%5-KGrod"eT>Q5$T[^u7t]kN&BT'ak-FF%knmBM'T/A+KUZi]Qr]om#S$KL]f48iWf5I7r+s#`JKqm:@M^\2C?8Y_$=Za%*i3*ffq%=aE5Lg2GlH0<mZ(f4WT\hk)&jOLQ:a3M/1l>C)K<cT"Qn%rZH#Hj8a.j,'B+2trZaT:X9C0"SOK9AV8h=q%lec^T3k]?"Fam2Uc%%S!A`Cd*Cld.`H\,C4i9KW]%?7HQ-TjKp@gl;c"pA[UA:*9RY.OCN/pZUsdN,e>W$+iPYQ(;UYPEV*7mO<g";-eG^Q58iJE*!PUL.%<Z:<fd$92GkV`bu-10U:a8AV<;>^BV?YOKO\ZesKhCC6XBl2QD@*nl\.n/k*XJjQjEM^e3GDDJJB(qR4MLnHa/^u50M^j.ARFBm^%deWk'"jm>HQWWLq"1+UqpUC8FCOOH",mJG&9ZPr*CIYa6aP+-C[pWprHsTeoP1KLFdc$S(aKa8Wre7uR_-Kn;q.pu80\SLb2s,#S%5(AOq]N8rpLF[ZE@0`:2Wr6G]6fbleVl/cD32%Eg-!4-NUKY!Y[bh:OA:.1\l"B8CLKsm$:5f.Z%LnD#prqg="ldjDmeYPlVU8]"%AC-q!Vo=-$hK4!YUb*qHZ0hXo_,Y7Nc&l@9qUJoA`rEi+I-tg;2i1(-^(`D=@=<_,,KA3WEsKFs+hoTNo%LGlH-o!bX)n0I4#O[#%oUklGq6MV9RR,;ahrN%T3If)YO(@;(VTJ.27np6Ar@l-%Yb6K,k:<X[RPe1nKe;(kZ-0lNEo0!jREWfoI^o-4oXNr<++N?OI7&0Q%XhnI+G8RD#gN3&$dE+'aW-R@AW^*\u&QoY0r6UEtUBncjDm5hDLU8]*a6mW7?eu\E?g'^`m)X181Nr(k%]5-9G5eXT_^9"t!p[L;%hQ^jSpG6)Ro3r0:e)"q(jO8dP;24N,?4HAR6gg6-MnRo\XZPq,`Q,U9eW#k+]IWsYQ+m(j@7F>-VJ0nH_@!)I_>R7o0ZV.1g1g:G%/;]Xe<\iDWq($a^Uj%U2Cm"2C%.(P=mgn/+GM[N_kX=,WS4Pd'\X`b,n'-ID9!\\+YdNG<]j5oc\m$kZp`In*G!j#CEo6/Ublt5d%(05$9PK\3p(UhN_Z.et(c<gdf\aqFL$S.^0i6T3'>U3V?'qN)#o@g4G#C:OF.hYLV1"N3pF[eO/Roun_'h`,ECYE5_I^\LL*mAFp%5^U(5VtB8^:3_c7H?q>.FNL(jH7PW9=8>QgXhk&$rDMFLqh;=R:L3eo$(W/-o\r09@WB0Rr8f>K@`0b??tQX5G3eoje\tpf^#g.)%]6uBqatgZ]U+ffEN)pi4ojd.1iP\40f'D``@R$/k5>>t4OJe(DR.+l_5>;+1+)SO9'!=rU.u3!hg!D/$n^"=(;m8/C?qTJfkUeo*%frA`<A2OP$.p!36mS.4nDW)JSld@XK?ms>9NfO.tn`sd56Q*m5pgFB\;r-f`eY?MgNZ5l\ZCt22ojnt=YSr[Cmpf:r>:kO<;-ZB@%04Trt=1'3k]F6]pI+r9c_rX,Y!il:%LV'ighW<GOF=_,2)9FNIWCbg7%B]H>%:#R6?Kr]U<)DN&n@nV!LH%/+)>6q76%3__;`i-j%A6MROW;caP0S&O!"":JLX"](]gJo+VD29R]qq@[7)22S`2MpK&XFqb.6?^ld>s>l8T?j\5h+'!12_t?,R&eUNeZ[+7;XAgKQ"Ob!%g#eVcG9/:R.d5'3>J+LN$9*3iX;i32H]'fe\+nK(g>[fU>&CKq!q2<P@/8ZmOaII]m'Nk,H<"G;NFGjLGM,\Egd<jP,n"""B<$-W%ORlhmnt.#j^DUVoQao'Q#O*<X@onsU3/Y)@=&@(+Va?/Rds892XIY;f4hBP6\bkY-j'bWA53BY6_gHl8+%Ut'k#JCq-BAlYSqbs@%<geEN]\Ca\e,JqLdhSC0`N$<%0/p(OAU9lOHiCjPc>*m=19)IES^iDb=+i",$hqihCKh@1f<qMte2;@q4p"g6%ESslU30e3/m7G^%n"spC2dV9:K1`kl;?lW:5hZYW9<HXXA-?3+^m+)h;XWT/fV5NVF=QO\1Jm]A)1<4B.sVlVfa@08i?mpM?Jap7T#FdroA899)I;&G%%t%,\j7upNMQ0D.H1U!lE@^S?d^=t=2E,uL'sD8"ma5<a%[AfA=,K,t+/,3Yd9Det9;6GB8+ZZqa?;#Q;+\BuG#C%R2lLX9mctMj%WK1VY7V.&h'K04Oe100XfWpZ-TDUK/ebd1.3IBsi3f,WAcSCLbL.aMH/,?<M"jl?<MHg=Fp-Ec,U3W`Td1/3;3SJE_4;N*ANi)/8%-u8r)X`r`"@.3,Ar"tr;@#YUb5E*M-YS;_B=Qa.gQIDedRc:YT.VGa-XC(hSR=?\f;8+YjHED20k0"6gN2+:e>V/AIHASbU(=/`V%h`.?1-=Z`Nlmhq;S]cZpD1&j*G'Hi4OB]e:o?R*(Y`Z?iic\bs6fH^6<Ano?;o+d&%GT/fCHAP29VrqEs3@W-QVqA<g"r=Zjc!hK%>94D.VeYEmq)7<.e0_765?96C>PC&=Za-fXYA)WGQIgF^C&"rJoMM$qLGm^o]NMV)Ts.,QpL!p\ahf#>D#$D=mg\ft<0LdnHZ(5R%`LrI^M:K,t9H\qCb&JcV.lUu,O"Cf\_A5fCaeMMHjk5?H1dnEI%5?gM.nE$@aQJ#Kcm]ui!PQfD8]6o0)l2%]l4$m<q?Eeu7bUYV%=,hnKmVSHb=4uEMh+F-=[9e_\/=MN;#r?k23'rj5!Fn;EF^=Tr:f3dK)HCcG$u@QT\',+)DrpJ%0dE%i+t#hk9:;0J_kT!'<$cR%%a(j50WFG=0nb1+4.]\P6gM!*j>:ck=BZW9HYqq)&@?Xm5.nB=T<q.R#Sdc+PjNugho1Zf)Z_-m4JoAmK;:m/]\"lJ.4,,9+WbQhA%/8Z@kb-rq?*:RMj423[,%pI"qqoVD)i5N0brF`b.Gr^!.)0B#`Dql<n1Cn.QK21=\E46gundIQ?Xe%cf?$QW[6+5^m3HXkh)0@?4%n;]MN"dOrR3mB8FQ:"`F6)V$mn!6=B>Ua:3'kRi6QpXrH6"eOCpc3HX)0@?hmuBDMjV`1,+h;q0?$QXFEK3.Ce<'U@Q5AmcB![=V%TUZkoh1pL&K3]rc8N@$5/90$[.]!C(/uGA);aX>5o&P:,Zh<57j&GC0h49t&bW+9.VS"mbWoK<UoRh-qQGFkcDTP\lZbgi7YG]%-%:qi/IcH?)9adZ3iN7Gh_7LdTkaD]L7k%"*=BBZ!)2JK\aWaqW9?;i:aDBM]Rg4K:35#Ne"6$DYlQ^pHqH_aK"F`JC%nFTb#)h2'F%[qKPWr)M+O0DC6k@E!\<MM/oY[q``%6^$8_r5I2L]pS.eq7n<:@P[L\f.-uV$pAQ[@EAfZd?[3I6c:P"c=SK4BisQ-$HqKdS9UT`%&s7/LkH4?54Scq-/Y@[<.Aj4oa7j>ZO]W?]9^U*6;4bRZk@,[gp?75&7X(A*,A'"I;:f*Xh'AIL0^BJ'M$bV2B:C31c,p,-RK]#L%-^_sKmC$7DNKV=@9_WjD3j#J1=Y]D%:YURp0GRQ$.lFF[#(G``:5WY'DUbm-pegVWMV[Gqk>1:2*A$'X0ND's;cJe4Y?k?$M0YsH%Pr2B9fT:KMd72?Ngk]O:rU2RPrnU&fG5UnGO]JF0c`LWe\tq=%hCh^0[tZ9tb0<+,>HTCOWBq37(_5qM[mK6;c`K8JHV.6%59IJK%V=%TM7J6ReGlb>376Knh;$81$>r3`ROb`&E%\9<;a[i"N;+aPkMVHMF3cm']nbcl*a7.U28$sh/#M>_X'Q66;MmVinkHes[N#q53%mJZC4?tL1WA.Y=W\LkflO#(j&%!/g9,H@2ZVh.,+H[@M0*_5JRE.+hA39@\p15iLt?"ofuF70fhY)78[MEMCp9cENB(`$K?Fid>r%`?S<Q@5j?>VPHf$o3P)0anEe<m:SR;R$'9W$G)Zrk3>qMO3FgV2?1M`m"7BHACrj?C1;aA=0Eq^5m1I$Ak.&-ABr,s?JXE^K6*XS%a;?9L,Gh(C3<[ZQA9.;9?VSB^K@tNJLmCMP%o5('dA`4t;^.?@AU.ud=h]/eSqj=i[.#IZ.Eep`IW*m1j`f1k,#tW])ZK==EH18W%D0cnocKd4R%C9(jFDbt/l!jgh$X*:'/[''AHc$'6`@.p-!]c@k7_m-Ud=\VQVNBRdnlo^hl\_7+6[,a)[g=--o#R6c8Le+8(.0rF%GITSoqtc'0_pq55W>do@0'DR9$Cc-$gt34=,NZh.7&Wj7+7AP7WE&NJ.VB.G.3Hjn@n&rCV"<Q(R&g0?;`/U(@5]4Q[$!mReYnuK%=3JjEbKe::oAS1k<]L/I&N=_oglPHA1LKLo;?b$DDP,1$Z-"e`:tUkOg<9QF?-rC+>$tdX-TWJ_I-jopYq"("qG90bEd0U0Y-fZB%iMCR2o6K+tjX]krATE29o.JHrb@7mW%c@]Y"IVtT?L)6bZJ0?sbA-hQ<XZWlBqS167!4NX=Z%H>6hpI-KdP.DWO-`(Y*I,k=H-oG%k0@[9@)M3^32R*Zi\k0okAK$NQ6J6G?1.-RE[objj`fNW3Rq.,6H,NVbe_(01W++".Z81pragIZ,%%FO8R6(-@h-rah"6<Jpt3VY%Au'mG>Xn#!a^h2rq(n.l<;58/6o%Z6S-``%@O[M^8B#TrOcbOsCXoS=cHfh'-VW:HH)ICS,F5Xin@1OkgkV9NKLNA==5/I0;rMOA%<g^"1a&G%Q4,WiLs$S>AkrnML980EgP'H.h37G#M$m_6?.\'AZ8Cu@PQ3p]oEb!49WGmT$8ChRMC3\/WZ-PnL&Y:<>;>*?8]B.RK%A8adS3.7hE<J?/*.6medgrIi%?Jn)g_YP"k[7WL(;>-130b5'[Kl-;Z-g*CiZJ0YeR4jh]]E7%gGafI*.Wa59BR+_e31)_p.s/6j%:4;8_iNqtp`;!g:hA#0Hc)JZmnTa?Hlc8GC_V4mJ;[Wifp@-K!rM`<a0-gDH0%-js/\XCYd7QI4LkRg7g:8o,/C.MdA@L6TA@LA@%`uJTWFXGu)m*.ZVQk,kDa_nF4&)LY-jIOPD.=3]8gS-:o1WaMbd8!!(d=!Ms.\#euXYdq5F"5E"X*>"tZ[8Jtc/rK#]\N3klDpIc%Pt;"'pYrk`BdVO#n`>P8"dOhW*kh@Dkb]cG/iYmA96U3s'NXL8I,-9tYa`@/3]JS6Y\TM']'1a^<ncs>I!%YPWL70Rp#UYpTkJrm%b'LYt0JfW:>o0JdqNm`NjR)>;3MiD'\_jPVGAl[/PT:'55hWh6^+cn7Z-NN0W8+oPmD<[/S<i'/2E^%YUVZ@^]ZPuNg\t1GNfKMt%F&V:Gb'6W1]OUW/r2Sm/:#_N1\s#]#/%d6"a';@(-+Q/,;W18o6XGqV3-@%O7Z4f,Go(>]M^+Y"^,nM&B9&0UP\F3"GXS]Ts6L,U%F7+V*"Ql'C0,ks=fHg0NQ8NDj0P,qb&[rbRIU)PcC'J&9R\X8UbR\n<,F^<hKgnPsKX0hL7VorpFEuSRnQVODB%,jaD;\HS4(m%(%jjFm8=,rhG2cAeuf\(Ad1b!A7?+ebaflVMZLU!!iPYF(n$@3oLF@?gfZIs>"][h;QVT[/ZUV9DYS$"$FB7efYK?NFoZSYI*XDGI1%q4[4VQrl7P*c'"`'tmO(S^f!J94rK>-^7>lQV5BP*0\UDbF:`NdlWD&]"D:ZU0%B7c__ZYKQj5.\dJ7u'?I&obGDiJL^eVkB=&8O%S5#>7@[#*7b<&1%c9KEe]"A)Ze!&(SbM1e*4$'?W]"D:ZP+*kWMAVLNQWJ^^@4%+2Q^:@3IIm!sflVMMFOo<@82aa[qG"dX1kih%%RK8ediR%#>pt9bW-:n;Y[#@u=!*nq$,k&s[jf0/@`*L>M\tWge$Zh8I[>XE\DcLD(^\G2mnQK5$G&aGSlLGuEX86_NnFu4jEn61j%Z0bu'<`U9>?Wln^j@5^"Xpol9en@rQ]OceplDcb!UH?U?Trg@N`LAm^QEu`o)Z';HDNb8b$oBFPK4WcGMtdh2M^<3NakX@a75Pj2%<5f;IprqPbd84=;F-i*j1AK5P8F_L:f>KIhGO\s<J*)ct#)56^G6_ah5BD&3puG&ngsmlc(uFqR4+*<-kX0P/0=*6Zjt=9/.n(VA%r63t&pVMJd\3K+b0]^FCM<.mq]Zt%'($1<R88)@Z2h>5*f9Kf"L*\uXdB@bP[Dk51'%'r'Sk+(g&H&$LK<fO1JJk&E<p_%=*1_>u%h9/"79LdFrTV7<_du?$E/5<,"3mN0=Ct-D++R9sf3uWuur^fOG;>1#qj4#gTn]mU7"7OEsfTe@$Tq"u$C@ea'TU\*YmE276m_<bu%8K@]&ac^i\-^.X_/.;)-bRPoLrb`6,9<+TWot0TjbHDngiF-/U$CP&U9,!#AH[FA0L=.n'kO&"MZSBr7K1EM/NL\'dR/Q[:Y4jDR%6It4(0`3WH(CWNeGsO]-miQZ>r(o76]9\f)0^9TE=O-,e%"iI`:cX`\kFBlTSipsO,u8;ZZ)Y4jgCQ86M>]TW#qtLKKA-sA]B0c`%QWOXQ\/R0-X$E47@S!M:__GK-.t"g0]Q&-cd4&D3]6i[MPo&j<]p*a(Hm8AahOV,akmM\[^6CS=$[4V7bZJf=NDu8W!iiORk_6Xb%pKf3[BL+p6H5afdA"_Td8P.NKcEMXcZ*6j2Ybc)po^bFY_4=::)!uKam`!88O/"&Q.UQPkS@^0"Ia"21`U>&^0;nXm<Q3baA*L[G%UEqYRc'-i=R_.[jkChEf;V]6HEWK3\)]j2ro.*=%@hKYfUF%_CL_XNTSJ8^)7P`_4`-t\l(T\1,L$cIMZn!Xh_K@ha&lYK0H/,ND%%paGne+.=-jD9t6+"bMJRT,`oADB+M0urrti5Cnb;T5k@4i_^,nEdSsPmhr!0)+22]>`IVSMXfXn!`8DKp>t=Aa(ndEa2CdUHeKT%4C[?^-O4;T\<4lO(aI)oW)VhhZCWR(WoAoW(CnjqYP7LlnBH)nI:<\T]l)Hf57gD4YL4Z>mG#\]]U5-PD7m`m^/`>CC\Z0HJRKcf%bVW,nb=YLpp>"o8\NfJ*f^=%.Bu)TLpE%n_$e+UV\)/-_k1[&3\U3?7/:MRko<o^aMj5U^W@[f4[p)t6Zgm)C?=B\<l%e]-j3saX%^U(4ifN.^)9't-8hYgeu,9ID>V)?'7r]I\gIEgijbnVVb_=0W?IW5j0Ij9)nErVm2&)LZ=hhmTd^6[luo`@c^cK+tA/pol3XE:=&%)uhB[_J9id>+:7]RkobHmIi_+RjtL]lG_AoI;;U4WN;]j-)R@o4h(:Pm&C-Kgpc%=l_/FJrBK2j%sKdNi\\KG%"F+V-c@:mm<j2I%;*(ODB(ft)FDflW1[N1FJ'k!ncqeInX#[(DT@`YN-HCJPCj0Kd^r;Q(+aI%co7('c/[VOf8YGM*pF)&kD7*5i)c--n=k5'U<Y`2e%1D\m2[F%=A$HL7hEpo6Xp8H?J)Ds$^aEn/ElRB"co(?F",K+;]p+Q/gQf@5FZ4sd1U9pRbKisq,LPDR*D:31Zo47R<j5RjTQ!lTg%*G`!^\NtE3D1*ZOF7G_KlP$dgp1PWHp=&fi8F'Umb&-D->#bZLI3PRO7uQD^e6'h1q0oH.r*u)t37a5"*Hd!;J9UZ;@h)o?_Tm_b%d:rb>ig#MBI[KfF33A);Yo?@%g\U=JT'`%mItkLRX)OHW`oLss'E;BaPA6@Y^!S2emU]H[G<s,SQ!B&N_.Au'WE^]-aC4FJA[2fc%YsZ2`[GI3rbLpRTZ45@=kXDppWIRA(3>a3cl=?-+%Z4VN]9d6[Lt]Ah,hq-XQ3\laE_.aRc0r\GjWmRbCieg@2jI<%]6S*O)9ZKB%_M2WGR736+/h(W#.lrsLL%BnM%:A^,4'<_nVg;dh:+f$TZ(^XNN&"ig$#'M+_M-]PE=SXa@PsH?<$_cGh*Wqu(1>Z4^`hG,O=WX[%0]b<FU\L%nIo0"DjKYujXYuF)!"Q_P<\u.IGu7B!MN3r*BF'4<*5I+VS&4-obDU\bq8^b^biqrAg/,&6>U9b37l0t&f.5@k15Q89%^nZ;R7CI^:;8+e=guKO</+g\QoMN>+AYq1-Q`sFP)*CLg-Q_BUhb3gD*p'GAQeDQ`jVng75G:UCkl&Z3rZ*'AZ^]Iih7_$r?Z:@H%V$<:!lW7uc<k'*Kd^stG1V"k&Xrh:s:$untr-/*/N4'bu?,,r3rPlDf.d(*PndadY?q5^u06`j3E]96YY$ZIAajA,fMXUD,a%@6)%nkSZMPq).(-h4nf^?[`%Vc;3^07VTW4J'ZP[9aaN>sGr:fn\A&n6>%hlW:eao3Q&Hk?Yj8XLed,W+OoZ/)RjJq3;V=r'TQk:+Z@B%n5[6^moNP:f<9SR<R4:LbOY_%[g'j$f.X=5>2%dUS"k+2l!^_%n*sE'"YP;TDaNp_%8$Q#r#XaWGQ#ZW&NM([Ib2n`;DpTiT3I?T%Y+OE.\Zbj@miWPC?,,t&'_[UDrEVWTG3'./S<pk%lW=(cT?J.`laqU,<@Ude+!W:Q8>#MGLj\$!oQU8V?hKo(hPYSrWgm,IrE[2/%;Y5<`GL(UaIarB/p\;aRS3*4b1&.p/pj!DHB'0"Q\jt(n."BdNfR=_*?,+!aV,_fmY?[W")+/Uqf?\>9elj%\)p`raDffiDS9Oo=%8ic+jfm5O5od_\l_L$[jCr8pq[)RiF^oA`F'Yioler;^Nn+t:q^?RY%1/aQW;>@<OaB<5@HG8$VeZUC-IaiT?b&sST[l.66f<<VL%Hkl3kX1Y3/jNSV94hgGKQilgIh>'gHS6,YOgYs1P?,)n.V$_FEO8?"d\R/!Ui:$NF?XD#VNYK+c]7-/CB$Bt=H`kA7f<<tGY>+4d%^[fiIA&Rg-Y+IS8"0_Qdfp)`"/,*>aEMEb/He5H+0k;g!mdL";.>B35N9QnO]7/'u?hGYe@KQ#pQ(Q]j2El\9rCRUE0Y;KPn+o0t%IFZY-9,dh9^EQHddEO9'^$AbT,RhjLI-l.M7pk!QkDY(*ifrdVZXannM5g+,_t$^V[0p)[1YXXA<,>FiI3rgY>#.'p*u7Pqm]*]#%m<SLkIr,YsV$X(7W7JZJ<AC)N0_*h9HaVUVpAY!/;ZFk>QYuA6c^T3'DiI:ARgO4^p30`sWTc)-&#[bh1c=lAldo+rl0ju1O.ZAB%kFXkcIl+oiIaN/df7,G6lb=7&SW27iesq`FH.1GoQS(>DmC1,2oBO@lBBQT!bLq7&Vp>;8q18.2pZmTUi:M"j*di<\l[2r"QutSE%I$euhT%r(?^3r*@i>fW,qp'EcE5q_QB(fN>gKe1Op:bViGAl='KC8,H1>A:T+/2*k^5n\Q1Q1F/><?&-diU4Q^4,o=p#tB,iU2?Z%nKhjse%9srY9*\SR(dbt?$\SZs718X4%LI]SGYQUHh'_)!`%Q(g]VQ1e!+h*gWPTTrFtF\q[B^b:+cb`o?mbZ$*EFa0VPj6[CC5k%(f*DSG6F76$3k9+JDn$:j*Z@ID6DWA]/X0M;lh:44.Lf[cb+3T<aMsh)a@))3L`*KYBorX744J73[O'<p1JgQC%Cu(Za=^7KfP"Y%SFqO0R%F+pQ?LsiRGF[JO3Dr.(Y\5@p9trGe'^aG"O>$)WOXBpK;lhdR01[C?(6/EQ7P`^be87PfW2"IGPBtFVD7W7/cPBiC@S-M%2RW&:E,4adTDR!eet5@3Bmr7pRn(3g^jWTT5$gBj/\0N7itmcG;dGi^NHO\a!rpudE>O*'Hj9U3p`o_7cI0\F#(>l'8?_lM1YZ$+%5ERD?MLYSB5D!g^k.&,I1OnQWc[#'Do'@S"\L@Gn#,2+U!r_f@Ma&ZA&oKcaY<'qbbL[h#IK_@N:IRXC`H1k\ZNngJc5T!T*iqPj%5HHL&+2!k7+.gpl=Ne&<-2eM@?9_f>Dg#CY_`*sekt>Z'oB@KZR5Joc/f6ei2/d@k86.?*!`AZ&*m2#XkC)ar^4i39]C`$$r506H%\be^[I7u+7?lKJEnd'@(p'PdQA:t9YdUiRIBEol-G@q4Fb6oRGs#^;>!u:]h-YI/fZbQ-En%sj`pL3jc5Iliic9hbp.qe+FW<_Rt%XQ;N;I.V,mD5m3hiUY=\R1C64eq;l"8s\_/RtpH+__pnub\O)=DjD*,.C;!=TifEFWS"a_ah'C_gitR&hI##$'@0WErsi>FP4uZc%[>!l"NS1H$D/\k5pjR(KQ5U=B!]:68F.o/k/E1%h^];F,nE5QQg&gcI6cV?(DU6/65.dop/tIC]Su(0_bh>Y3Vgg/!JrkPaVU0tg%A24.m5=])]:[h_pn3>6-mh6dFpiEd*cN(9>k:Sp9Y0@<#!a)hn`_QCCm6qSpH]P-"R*Bu7pQtK`U7jqCps21-[l0905/5*Shn\VA%b7AHuHP[OY]_+h^DYN"N\$l'W*d72)"Z[O3pH`'bCpeiZaW]Een=M_;-\iX6q9BT1%!(msZB/i(p1uF@8pnN:S"3iNqfnO?1$bul%>CId$(CRUim\<PIrXSuJ%>-rom@@L`>i**LE#3CmS[DNp3mJj4!7RF8%[_hUq>g*-\+;Flp'EBd.B()JWI=L47Yc>"<7+XHQ`ghm%\YYS[A0+@>B9aR?J"ub#=`!ih=k=53g?C0jQJ=7k_pd\S+`7UUlHf0'!P8F;"HPG[_:Hd[jC?ZjCYeF-c6H8POn/*SO`bHfG.cN#%aO^b@$ifIV#A^Vqdt\#/X=V$s=s"L<DB*Q*HAD^9H?qD@CN\n>fnX^5;bQ9]bKi^S8aPAr`/_E%k<%;erduRo^=,^IT-(^oXn0Mn%UJnAlj^ot*T00i604k(:+oZFFkN-06[KUm=pA56YYOW._cX$PRGj5,1BG\/8h$,a$I[ZaSrqTG&$m,eUpRfuI#G:Cq,j+1/7e\"C%n)rP>*^&$,:Qtk"*VsAk.!)N07<4UHmcc)t*Si]`L:MiBhO]1M3W%%nU7-<Vik'1FKM_XBg$C@7#_GblOb&$Pd;$8)6a[l5<>0@O%4:us.HeCetVP,o=R0_kVF0Z'*7'--]>I'()@c:"TL@ZhB#%#EjXV`J']f/0%)bdFm.TQq$lc*[L0lJIUe()&rem6R;Qqr(Hg0[DJ%73cCt7!E'^HG3:6oFNn,_;7.URa8`N"RUVHlU<,..Wj*EI'E!qW]%=eFB(:mJ'<,<gs)*KF0\ZX>tm="]NtCem"E^hZ$#,Fc^XB6%'6i0"FltDe]TM:=RoI\j>\cJ7C0<b\g`lD#V!hk^88OHc^]9)&d\"Lm*;>/G%i[=q?g]I:'qsT>1!*&#UN-0cj>Hm-]&i*-$#B@q%`f^trN`N7:Kpc;jMKh9srfHhXlA'ZVLZ\L`rBMV$HI;ZT>MN9:/=A`XXSu0`\Af%5g1Y]CI:Qe/Aks]B>Kl(`IejqPWLk*Id6X#3%E7d)&>26p$n^]!T`nbt?*rgV#Q@8=F*_5q[!gB-<LmOs1+4V>()k8NE`JK)R7/E$mqKs6;m@>[!o\Ba%ei/ibXlJh+CLM:B!H-Nf%78nJ[ro,Z`o!gUF5MtqE?b("NI.VIRoLEuip%Hn,<Z"fWaf=`Ob<,],n`I8<Sku\[6>P%o/,!9?W@E';m-d,ODgqYLr-Z&!qqul#%e(LmVrH$5Km!ZSGp-P]m8)J]j_$@t&X?DV?jj\]h6df1c[u/r>j-&0t+//%bY:)V"]'A?>r(("7#QNoW^K?WQ3"GDY,*RV;[JZdL%1+C;Pl$lf(-B.B)pa9)&s7<<--](o#+t%&WoqhDlQgO39p\a4MFa]tW\@2$MgN>_cT63''mIl#+hu0t.l0VLJ\mJgI0>6.Fh;1oD%[J"=tXBf2;SrPY_T9d+7?V1/@q@m4`HF!<oUD&.LS[1Up?L)q/o&08ab4dj`?G9[SG/$4imN*WhpWma/@7.,6IJHJt1WLO%l.*NA%,Mg#b])VbDC[HmuoZT:H-cLGpB)`B&\@0b(1Hi-bI.hi#_;!V3Rbd6p?P#2+I>A=:gZaPeYP+&iC^!_2T1.50[qhTog5"2GeZYJ2%&#6V7BD9JCq-p=I"tX:0]mm<!rpb^BmI@+:oeYh)iKom8dF8KedN_>Y6<Q_J1+?p:.#Y$i8P,[D=i=ca6IMf/(1Ad.P=C83#ZRM>%8Y\UT,^-">?h;3*'g\&r6^dL[AL1B@5ntZ,WBQ7iK*iodFrg/TM`uK5BPi+(.nA7cb?oHSZg/]7hRm$[]Bnqe",OC#djs`Z@t/IP%/&!49rJ^4\^J&7\@k#$pgCZO:n:KK<FBZidiU_E.&'4t]I;rj<4lL1/bta"iE,^QJ*,-(ZF2,LTQfk38fNM+XnHHWd^_tj@cp9B5%/N$(r\XVIpQnYnT<;?5Kn,p3h*ZFk]m*o1^5Q9[q37m'<mU^s.(5LV>YJkA\l_;4B^L?R/T21fLoP6K_Gk1]V%Msq/nbq6O<q,IS%6_&.VYLG?T?FgI192dB3iKt+L4SKDtE[U,pb&\*@UVRUd&EUHXaMg>?#>q(>#\JS'%\c'9dkp89iulKc&(uu/8N;Osgd?Ho0M)LH%SpQ8(nL!KCb&\(bpZLTW7!WXJ9pZPKQ@gU34[b=PM)pI`L/PO&-KlSp>DD@eRB2#hcTNOZ;j286c0)TlB_Eh=+NdX)Abc'cX-/*H%0jt;aSk<=YT!X+u:F2oaRAb`d:F2oOQ7(r?b#=tX92bdMPru+,s"c,bc-$7F6A6mL3JHOhNd#URPrj]h_7`FML!#rQS9T."[nsV6%8@[=@kSAJLRmu;]nbVpHl1_/O:BRoSmbckD6$U&jrcrtKD#N2Xf%`=dT*,+Ks,GL=lQp[,%,m6YdH4#;Q>#UP>ePDgRm(/)g$Pu6%TD$Smf<+Juojrddh_[Q6YLT!*9R@2TO6a.!)Wqs9iMS\X2B>-mO)%Mh-2df%^M8gIiI?(0s.+lX_1,^g[,D8_MjblZ"D!#"+0XTE%^B+144fH,pJ,\`_c`i)s2*Zm8;4)TN56r/njJDN"^uC(bGQrmn*5rL7:>j#SP(o>")E<GsdRNFI-;it`U'*qP(DM0)061Q^^is5>%#^s`PWKK^j37n57iODX!+F_ap]SJaM&:EWfB2Kl`6hlH*2F8cV`,.n[l=pI:PDrI>d-s$e(l8*O3g[?JTFpN2<9Lb,<RaQ;2_kbm%#/jqX<Mp&RU^GR-Z:e(d'W852:1,a[8^*B[,XK:HT'Mi$hsb-I":;okKmr+6RjP"E07k>l`,?om@j+.U94CsZ6"0&j0Q>9jO^1/K%[3)V#enTN.Ts\SCs+#e<#1/IM_#,m(pjT5i?iY0knmNp)N(GR>)mPmJ5G4YtU^$W((aPG[g'p2O6r"T;@R13Y)e]Wlpk8Mbo/]j,%#AoC[GDsA\Ed]=30iT!K(cNdqJYH`92:BS/FVO=u,s`N/[0GZW'';1t[ke;oja%3<",0,+i"/@a"'-S2#fE8/3.d8#[0I&T^Omf9%!T-KD)`RJ)r$(&-!A.9c&NN^=r;k,.H@USM2fb9P01,*"S&Q3f3f"eSQrp=WL"Hpn6=@CQLqY[M+GdP$NZ4J"#FZ>S^1ZgS^q;?r%bUj9n<UOPS490V'BP]&S2^g06=0Wj7"i7?\U<'>EYUE(1Rk"!b`%9"qjCZr0goO=ZkX:7K"@QX"mI_(-WXj)]!hAO(Um]'Dk*bQI%OiU*#M*mmIi`HgQV9`$mN_Q6E/3_k;YZ(pK*KU$$l[$K',%t#5/(;O%"Z(d*J0>A2Qe"JAiq<F!nD)Mq*IoD!1*PjV(l$P2fP(J+%^lnk9&#`s)mO7"EEJ$5-&NtLg`kr:BO(2]DT'tCG($gc@P6tJ.]7+KgQgUJP*e4E#)Oj\\XD?,r*In9A*87G*(f?f6W#RJ\$P:uU%NQG%J(:_*>KJ[3XnN^[iEc)$B6NJ7;1JYm4,\bInjSD'b+"RKNXtKpT#3uob'Vn`b>m87+i<B?+-C1]7#Q3N.*&Ff[aFPriGDDHJ%\nOcQ3cLU>GZ3)lL@&a"6=?3OAf]6\:omm+goW0$QuYIB7(@oT]-cOK=GctDPaVu,/n!W=_b+LV!/Di/TiJ$2Qpd[:*\\s#dE$&t%#;6fn#"\f`J>G!JAr'>pcbe+PP;kC0-SBGkG:f(/p7u(o<3ViScW$;4M.jpI.MH2]m$WGbL(t?>B`TD(]#LQ$KT\IT#n)h;&f]?9%>gHiYJ;#%$L#uLHgk.cRE'"0DLJnc14<]6ODFg4$MLurPS+9jWJAcFEE<DXQJRD%m#gh3Nnibm:apDauJ9c-I@CJ]\CQVp7O=CB8%5QVYO;2dUL&D#O=fhlK-54go,79K\EAJZRENaZeFJY>X`5]Bs*8jd&_:k)(M)e#FQc>F%Qf!W5M%5j'q$*XUeZkjCS`h='56nmnG%A6"s'/_7!U(##f^PmC7H#@VELC+3kQQS8DJ@P&j)LLO;m;P/.pZnV`TP-??"/NcM93]0tS0P?aHIMDXmR!d7f,Gk>t#n"S++jZ.d%r!*_8)V5":a?WSO-]ofL?m'dO+;AAn9SomMOV2G+8rZ:KZ"7<084=C2#*C$ND5@H@N)HEP]G*o@99fDu`>7fHXdq-\BP+'Rl&oF9%@^iH8,R6''_SgR)&/kZM:1-tHKbgJ@CQ4QFJ@-LS[o6[dm5Jl5Tj=XEULqkkKX'1X!V1%Uil/4o;1:A/F'N-AOrAuNf7go`p'aN+%NTfbC@_AiU8OH/&b&V^U`_gN4EL=Fq)h1<M9haie`1V7i3q:Q,,pS-=T_M_n\k/-$MF_P_>m?\Q`9/BiPY3Z(D5oS2/VXP1eL"am%9`bE"7V`S#B58$V_Dnb2=Dpd"LfQ:n3im?Z%EqCGb<U4$%<:U%[,EuQC*N-XS68n2($<"i>OkOHPMjAG0iS%7#e/UrU=>tG`Q[V1%jS2=M^OoN'UOK#<:d%6rU.[g!$l*cg52=\N7>7lHA@Yf?N/PnJUo'tC=@km`X#b:3!N\X="GS]5Bu$i]8</#F`$1m*Kt'(Dl'$Xb%4g&-Y@Nb^_U>%pdQH\'Z"V$c>']Q<Vc`.blI8EVK#0*r3@"`B&e-VY`5gWb*p.jYIVug#-F?sT1d-qAF56Hc1`ed7j8.=X[;36WZ%]SSK-.1$.#J;Jf;Ua?/c?f9D#9?^%[\HKRF:!@[A\coT0)@0@Eb=<^leU&b;:LQu7Jf$DKrXoeZ1_E-mOQOPJ5\9FQ=bNcO2GMD^%3c6FS8aJ7VC5%I=Zen)X@f4T7Md1=^;o)7hR6WEZj.#WTi_iKLUEoK8`,9<a4Kbb>bYYQ,dNsH^m3el=+0a$5Z&'(uq6?H%$_\a%%cNGR"!I#Ul2Dn;Ld5*F10896HT.F6,!Aj4b'uBljdJQFdNC+A!4?!s9=(&0b(m3jSED/ni67)8+e1$(**[29&W//>g8aJ$O=lLjJ%=<7[3Qn2MU9IVD_Aprm$"cL9qJmmY^Z3dKBBF=T8K^29?@MDcL4<Z44iq)H@g'P>@17"esq5GSs!,iKH%&/hBM:bE%iLT6[^i^?'%m8WnXM$--0fa.D"XBdL5C6^+.*`u%qM,#FseL3],1:%u)YqHfE\W\B&&;*Q;![G'!!]7O1nOtF^O$1f?$!2'3=VDn8qFrOkR(#$\%b`^<n)CBWU_#Mk/ZDl2`CDFd<1$okdM/u>8YL^F=J=o5kITePgK4\GebRiR^Kl)V#5r10J(sL1="KUNO=b&*2:m;R\-BC^7o)Y#u%EJ0NJ@\@%XI!=7)9I!NbOG806!]d+GfYqA48Ut?MnMc;Qo,Df?U"D7'+,$3dBIh#O8@iI7KX=Ch9`qUKm>lp5(BH/t"ldt_WD3c\%["_isa[!22G^+n2KEP2CH5aWg5j]\<V=LH*'RKJ.W6p?SS&@Wu-]ph($rl<+ojq9bJTVS=gC)Edi+[8M9>SD9U-p4c$81UDO^XIS%OsG-I,2Dk$cq#%<!.KYD%!).]6irKG:(nf6Re<54K:Pn_EU9OU;29tr7%SSjnRTV1k8=bJ21<@&1+#JYC8="GJT"G[W?<24FR"M=%"Ob1A"7\HL,ZESS(NGokIV9K"Hd+L-`m6nLKrILpc=tTSa?YF?9A_a)Wnj"D\e@Thh]rUt_'d[`*#3:elU;t*Ic=a`J0Z;mQlmW$%'+p-kHq,#7qn+nb"_;!i*iU!437X`eVk2l9_QnQ/n/sIP:#lSnOaJ#^+rhX>7TLHPYnn:d,"\3L1*6,dBd,ZMLs9s:,7TWR2I6Z/%)O\kj=?dpu9P4j:417fkB9([e-C$or0,>am!AoQ!d?I_?j!#]Q[[X)V;LfOecWMI)c3)s\D5oR8'#UE?Bj`tepCLRYNVpS^/$Q@-%0e]fl$b_,)WWFnXM5E$?oY_W'3!6QjORbdXQkC'b8-FP\)<,4M:u\-`(`A$[ldp4d,P+G>e%O[aD"&=klEQ9(o]2,q.h*r)6G"a+%O5p=uda\!O3G=7pf&X`+%`C@jq^hglld@a?F^YCBiD+o^N;POclk2PA@j*Vi#t[LJK=\d-<gq>9k.+f5;e\XcU_'QPr(\=/2bcsU%K*t^NPT$lH+PJ\e@d6$]qJ'C<#oqjZ4+O0'o4faO#Xc.r\Kj0f`cScTa`:'.^'ju1;q$X8889^er%8\]3gqO/-^mnqJbVRPe!N82%LDKAfZC5Bb#ld#rP;+LIRjKHmFA7E7(EgZE'k6miUgdE"ngWks+f#5n;7,1/$3HS$l>TJ;a8m\D>big\l!Z&?r!+?9'ZD!,Z3""(%>an@T-eB_=;>cEj=NG&CUbm")7/Bk'4L>HT;)/^M)`9>[`\8"m59OiWqM2W];<"(chQ$=]"h9fYZ)7$hicYhP1M?n.8*j@.8`!oW%#BD_]!h2e*U>[FC>h^0LIs<#U+Qb8e,_[(MQJt.>XET_AD3HJ=BuH_lG")04T)r[oDdsFo>Yo0]-9lW.gBr21)hSP4-TH4$F[_ch%#VUa3#`0iq69ZI>B8V4ZJ:reKdKjT>0lKt@%4/mK\N[FOTG$![MFrkaZM?RZQ4R\'_W\'fT<2cVK6:",LW*Y1*$%shE'`$19NB")%*-%W`0JkFj/^'fMra/Zg(C<iHe;'(+`,qTW45*YW#ba[pS-ks*de1TD/paFa2?qV]>iHB)'h-_%&1f?m@P'(Gf&b*X%I!-O&Z5k6%qk8RL)l.[ZIjt?7J:r$_XqB<8.19+/a_6O.M+L2&iK&P.*&;4r1E$qMIOB?6LFR.MLU)0Qn#`S9PaBEU`'QTaag:c$S$M?\d/ZFD%SAEbiG$p]F\V[Op9r_;9EcFYT,($4Ba_YBK.X&mR80dte8R_1SY\@UKGQQn%JN8,mO/7EX**tqb*$*B/`p*a<il-X-^oKP*hk.0b%;/J79%^n6+>K<C'jYnmfV%5%rlIaf1?m=%CT[F+2A0R1TC/!tJXH*lbPmO)q*VQ?aEMD<s+Vn8ti\;"BFX&LP6Ucr)bpFU=*sVQ\%!5r27@0"EX1_<R2\KJ;dW/XLbPDYARNs!nZT14bo0eb>&^f,Y[p[["RB?^EGX-b.e=L*Jqe:DLu1pGLr4Fa7,WMtF6-Dm$%0Es%8%"M[=]CLF07Ld]+qj*<EmlG*+S0f9#h53N]UU_#]H$8]2V`a#M7_>M;jB^AQTk^@8VbbYkjXb\Gl_UMPHpcBjH9O<HC<=kN;#lS@$%@&lY@]dTmO"G#d#5\<$ZXUjA9gVLY=E8#%qejNL;'W+@9BE:VBBghPANH+SfdtV=L\C_fVaJk7["7I?5nD9,#a,hujF35"fKT?40%7%Od%9XN7u984tnkR^;0%SK(NNS$<%M+KtOgCcQ_N!ADa[;ehC<ZG"1-?P*3ZKd\LYNpk=WidVZ/dZWQfF2S(m=I2*P:DaCGH)pB%aI#te8KCq'HS(-j,3!;+4!bUuh_HJ]a'qC",(s.f>)d40AR[Y<PsfFk`@&;81P9uoCa^[(O9H*4_?YT0E#Mi/925XmJomm5Nd8kl%0hA-4R*.dN(qWSC![)SI=6uN?Jt<r)-XWK2YUg@,@1_-l*#/\aR560TNY27a@+%3@$W;f8E'd`B(coHp$nrej2Yl?O!YoSt^]]4=%D&=Fbn<h7Q[B/@4*&1'S7LcKH3&6+\1Z3d5ji4CsO?_`^>V.#9Le%rF%\,CBapKW)5XS%2$=O_[$qP,3"eisDPClAR)?H*TEKk6/%?m'DtnJu[+:jc.R>peRBWN)#a#c"Y&Zh.(I\X3Z%T2pAk#`hh7#:,0>UO*&M`s\O/(c5]hd":d9G/Bs(oA=A741+P]`.!@^82Pu"%*u70r69i[:@,_HM>X6*LO=rI#%-B7<J6`E1"Vbo*gr5+9:na=(&b_+#IUiZ%:liOWPM_"_5$3mHKW.KiWs4Ob65O.d9gj>Z"QYC&%C%OHKFm.cJY:KN;Y)#Q@B^JaWfd!M!fY;1L<:C:kb@nP1Ll@OTX<9sn`.D3l&/c<23Z^4IEmWd$NXHSa"#bLp`b'@(f>k.%SL[T#%9I_aA6aJ$?OV(*6L#b]-/G)k<\sG/b,S%F]Qo3j,,iWnTcP0lLjRN.IqHQIB;bGn/Kug+-h_>=)(o8B59e9\<Bcs)XQ9iiN&4Wh?%m#d<o31>WT1&T8s*<:=jO?mCcOGUsC9*'Gp0g^ES4A<[/af$tb]YMI!^]I:JK;#$=.Mc(q`e.^*M4fBA_oe2nJp`)8-HV.pShR/'%<68QbWJPj:5UjE?Klp$p@RPU.VdofYh_JD^^@jg=W5keo'sDkLNkcA=B9E7\UA"O0ld6B!&REnu:tV_RbUMUK+G+r"i]BFPGmF1>%:m,K7!)lf9Rjb.dju%oOC.ubS<ObM+g-]-$&m<JA1M"=bccA$lLOER8'amKI0M1oj5t4GnH$[nK_9!rk/93jp)8JaE4Ye?)Rc7M5%NIYt;#HBU(pPIqLNB-b',Sc$CMpX8TRA*mQ$'0KIM%`A8fTKMa5g#@(WMlI%,;NrbR:m?\&?^r+@`ZH#O[N/%+RVE3plmW:ZchMb%)UY7F-70Gs7&41g!<K%Kna+%R;Y-*j**c=+,:CtSUkV62O=snIOoddFIUJHbNdQeCHu^rg2N^d=NbYkVaGst.DA16+U,[Oj<uEeG%&D1kTF%M'W_:US!_7^9\QBWJtot`h/M/ZV)MbPBVmT5Q</I5m$.Ap@CRZu5o\=Bb@*[>L*6uXqO.3Y9BR;jsZ'cF2CfL=r#8VW*9%'KoNn!h'C.2X3B@UqgjdQkH+R-O^Ek_E\aj*R_hR0P5>DOeVo4T6LRWUVI0R>1A1D9/%Ps8QFE1;(<etKb/G_!B;d03,f33VDCi-%]Yp`ZII&d\RS"a/a!O+rZds=;e*%-n7q!3G3uKb0.1)."2B\?@`\95$@E"F?pM^YlTo)>3;E(j?1fQ0Rd]tEie:+Vd]J*oR5\IN,%j?<S03m\]e%Z1W;Je2mWXhsc@`)]Mo?S`o/n:]d*#`!Cm`7gmhPu#DV&r7ld7It.CMG\-!S0P$gToYRki#9u-1sPM*(]_]5d8VPB%i5hT[VlcYtS5P5"gQ@XC'aK7MN7ia_9+n9P9)<Z].T">;;4WYpQQniU&'r\1-jc54#Q5JkL8Kqba&fOr^'o9gebM6+g_#IeUuF`D%2:n3j*ZL<h2C5[>M/cdp6[A1t6[9@RLee=2)@7<+E^N+s>>^bsX[+5MSl/TU$q,"q'@Yjd5L]lIjKY,Xbl`52V5_fWYlaIc4H!*,%%(:`mZ]Poj<2a;ijeYSdb7,H'5$1X<B:0=pDN#3l6(*O>RjLT<:M4[PY`Mss:^F)51,P+**->^\9cIU4M\2Fb&t@@*elul_nnJYY%\>0s2R!M@5dGakV`L[*-gm?3-#oR@]JFR*eHZQ\/-gGHH80m$WJtraOj!YLt*A^UK6:=Blie`IDKlJq5<YtT=B*1tHVh(e6CkWbS%p_JV3p_H+Lob:(gJ[.<R+-47Ocld'97cA&B(uI_@(uI_l0YYKLGZKgG(j!&Xj%tEs:ctdJF?HU\$!Z+Kf\M,/39J_0)Zi'+do:#\%Uh5&Z"p6ifCJHtq%0XD5X5T`J'h)_+J_W.QIA,G8MTS1D)W*qn1qpuZ.*1m>4]2X7dJ+>1U[^2g,I0$t+pa,]F9@W0p^31Xpl:0e%d]q,Y#UqVUU]GP<J8Dk%fFQ5'CQ)@\pRiCcXk/K*_@ttFN3Pl747HLe3c&)4L5D[jO8_ZjM6@L3P&4Z;#ZM1B,ec`i,eh9?,ef+T%,ecWsT11fRhF8t+?gflfLMq!#JQYOZ&aKWFip[CN`Shc'R!%,cDI<V,)i0Bi[kSAc6s$6?`!Cm9@n"C9fHn-"$nB(DNIiha,RVbP%7m9T_!>ne?eKW<q9*3$<>e@]MPOP\TTi?3:L+>Yd]S03:5.8TAc,FTD.MuN$#4jT(`Jf4RLWXIL+GtGIR#hNH<<eVO=WD_iP=d&m%B$HS@a=ETt[$Lb<QU3R!m159LLGb`G^+>4-PDZ8I>H"0LM3T)H%ZeD7VJ*C`Juacln?R_o.%AI%hb=0A.Uo!H8qKK%\'(03,pEmf%;k\UT=S3Pf'G_V)TIu9Gh5j!pAuZFtQJ>6PBJ3fZCt$<hOe.9?M)ck-VR%ZBIg&E:&`an(,paarM5ek<*BPIJg(XHoJOFnC$2Y;@%,NacZ#>Gm')\+6&7T,Jl%VeC-Z\>XmMhDG6V%`PZaiH0(-_RH#d9-W]g9KgFZRi_):grF;B8K=+#>S40\eP,0)620mV9dfcD+&MB%@@gMH'0=.]U/iG/3p@1eNk3CMA8'%#r]3kV6V]$#TYW6&l]>_U&7JU$Ufo2shQMLW#jq"P45'f8#]C5OHq]41\-=H0ZRls@.Z-@I%_a_O02=Zpjb!aa/7&Lkr$?)[1<\9b&@0U`H2]K5j'.j7Dr]gdgBqQVo*s)M\V'Gt/b:o/&$-[%rh_['UkN)G"'7t;!1nq=m9T3OB%g4+?$B8hZQ?T,:m:P95t<+lXeL3OlV9jl+&iO@cZG=CW_G1.aGkZ2L,38nq9SA;"rb>*.N)UZ-]M6ZaTohiMoeiko7`fo0!@<!!o%.=>q5;%,.TUGpHejkg8,e<'N]4U@L]VW)"3AA>+f#WJ]Vd+n?I*f^C[(kF&e_)2t!>/k/GSd]3hlGFhgcL"J.17F0=o4ad1Jif2E%;a?]Q_&#C^_X:H]aQO@*>Ft2^JGF^32cq^E)iDN?P1\KDWD(N6o4B+cFu?/2'6/74@W-U9ZQ"4HfOp%dA00S*UG5PL3J)UK",E_$%+BQ-@:+8etN^!q%Yp37p[gA/8@;TS7X)J\u/&O?CM=?]hJPZS#g&ST6-T)3`R1_qq)H<Feg3an(ZFZe_E($'H=p(qFE>FQ?f9M_W%L`9J:^@)OBmmNOo6nk[&#UgH+(C=g<WXsmR7hih8WI,Rf8@a77LX^>/!LJ1;irHj0<C2F,O^t%C$Z$1D#XaRWa*S_,</s_"'XoV"%KQM7$IK'W]AVc)]aqV!MO7"KmkRWf,lA6J)0Y/GD]NJ(-Hug4jVrZ=RrPtBA6men#'(V]WDZZJ%@Dk2W+'%R1'SqQ#n_M9`U8Ubd%,_\W1ePEZjB@g)2`'!:W8n=fhe?:PQ0pOL^BOMTK-EL.C_T48ek#R?1!/1]@aZGqFb.a$?:l65n?`6dtT=S'R&0>>AZdMgP\5u7>%2bnh0[\$l'Op:eVLJHup[l4L;lR'^Lpl("eh%`3=T1V6eHA.0d`/Q&k+FJ2_O]2+:NuKoUW6]t7rJ=&bV]9#:RKn:sBD4,ncVP<8%fLZDF+cW]u&$Io9\$=(OdtkS4`kj^%&!/V%"1GFMf<qg'6nG&_82QTHPq4@MIV)$7H3oO6*%*'F/2+^Y7ht*C)qN6uI(Y4dZDg/\%AgMIh"sQte9oK`1'>1n"LiO)I5nCG'@<AI^,"^j9('UNZ;9S3U21<da9rUoYL`oF4-=Q7(PZ]>hONgE)U)rIXitCpR80b%FdN"Zr%bZ&WM"dmpZ&`@[>;]rtJ]G)2M.T8)VI@s.KT@I=!!ql\X..OFp;a<I-U*5:X@rbQqBg^_X^l(ecH;,9=R$eY*]@`XePRk1H1fHMl%LeT(0F_$4h,Eec%@HEndS?HG*44FoV1GYDY"nNX>c@ucqR5Q7gU<(";c9c(11oBh-L!r^I4D[sWMVFY7LTV+B%W\&ZBPtj[ZmW)A%35U`9li[j&NcRQp8$70CDd8GO18n]iZ`OXN]_"sR_MXN'ni"\2n*iU!b3R'Z.igEPfg93VFY';0<!kLKc7,)8KfZ*@*Bn##.F`Gg%<t]24L.E#_<94O'"m?)(#oWQf#/j/:!K,o7#aS",&D>O;%(T9hdkPGX]=u)o9LQ0!',-lK_j8LM'VicXAkM)rEpbbaUi5B-"lV=T%AekT"LCP;>n`.l8TjqsO]Wf[?j6`8.F3p+BV%?t)-6gm9%8<u87"RBRZFph>__e;2l-n:bKJ&*8WP$%,H(cc)K1;b7j!Au-T:1ri%,D/s)1lNI@_++9C*9[bQ"VlaSEW-*=:MW@r:FjX[T@TB'Q<'iO#R)MFi06-5m!Aq6PI_E]WFp[98JL<@*CN9HqWSAL&-Hbs6cBie%o8OdQhr;Wc%>c#cN)ITZ*<r8+m'&1X&kWla@ZX;L>hWUQFD1spj,.VR.EU?.R(fppF#K431p?,Y2(l%SesCQuGkrM[Fn=/o4Y,ej%208?>%MOu6G%aS,g7^6HCBn24kI]lY*H[i]@O0<hqa44,Nk"pfbB8U=!BQd9oJ5tQRR@2h[rtl0#_K973g`A>o[C1MDXGf^S&nni%g-f1R9U<A`5K2Hb15@NV_9`Nb7.&q&qGiM.c>Z2,:8A#%aKAN_^>Z>.U(A*^,%=$g5[2ZiI=mZpI*1J_*"a3D?)Gt_NbP:3W[;/E%nL%hQ;!SI`37[P'"sWK+A,T,1k[#B[c8Qq.=RWV,b"u;q/JjjT!SVgU/dGF3Q`);CU%*D"TIF:Ed7#n'N49I3_W271CGE,oOuTkl%;1FLS*lR9"'H'S;C*R#<S:fba-JA2!(2uSA+t84"aoFBO:+2VW:_SH0kdr$0e_r#O4MD>,">#\!L9ggB`WESj@g^BmJ@Mb8@XJlL%>\Y)q*fCu*@'rCF%UrH$q'ikpA6_a5`m,4Ub7`[c7,16b"-jJg4URhgjo+]R-C5;b2aj7BN&78qObjYdji^J*F,A6Y5;I:M9J;qg%-@naRLu^0C]lZ>nN^Q(-HUpCjO&Q)khDrI#(b309dj!hfXGOVDBjai$Wb+Xb)h3cp)469r7V>G//3!.?,Z1AHj(]'f+=/qaC^n49%Lo"Dik4.h)+lB0I,YY!unHIbR&RWhC5S/[4!`%"W22qZJ.B+]CHfBjo8flj#mfmSX0uo,IEV8"HV@2fT]Nm^sMtdI-hk<C]0T#;Q%/U?)'?FQg5(qP5A#rIAS6ZbkUGPq%Q:Rk1T!COiT)!55CO@Nc("YdNT1kAAC@nLn\#ZaDF.5@gK0gg0S-c0eTfAH2[&-Cf["t>6N%),t!t1)9\GnFCk=AOI[=*GEQo5o%S.$4-O%9LL-9+r5F_H5F0<^WBS%D?:@5*8%']gHcBj;j#ukmL,^H350r@90M5lTJ.^&'(Ck\%<_dXFaAn62_U).X'T:`eI/\g^C:FZl<s/48ENIe<Eq,$*/r6#j#%CQ00SfUcfU4Q)%*_iuI`*$?n5'EbgjlRU$ff@n:aSMG6);)M%S17bsY.RYbWGloH1*`EuP_%(.]iYRFD(73p(!0W?JQ3Q082h-p6?5L3M"9=M9R6&*8]iFD,uWpQSia#C*3Dg_4OBc<+J`)!j@pOp%Y&cAR?.ZE^3#b21l:>u9KF^oSm`:M.-T7(iaJDUob*Qfm?6k5k0Dr`IjGf[.b$@`<\>b$u<TH?LW'h;Q;k(?1V1qnf]-"V`nnF:8%LD3GHXi=f17nC!_)c[L\$eJ@l\Fj&%Zk]<`g'/gMg/sI"#)W%SX6L+c2E$F'fd2cN%cu+sHEUT-(8_Ra'6ZeNB=46?_kX>gh]Td/%S:]BEa?Uqp9q/.XGdK-WEK^YKKtOKDi,NRXZj6=/m1s.hAglkCNL?]6BFL;gPF>AHaDANA$jFU5)p8$i'ifd9,W/4-g5Q\XML1mf%(kW0V[:0^cJ7\mU]gO:3dZ+<`o6a7VLKm))Ll.rb0YS<kGR`P'McM*@"bjIHZMI6',DNIc*(B1>m".XDV:7BSkJ0ZTKIQ_--mmgX%KXMG;#mYsi0ePK7%K[+l@FIHZb@'+),?U6V6fJ7RAHe=uB$_^\OdW0\%&f.G^kUW9:_l6Mje\L48DuX)_BN&pYG;9\,?'&c;sH1>%r(oou$->_E>oSN2@.^RP,b-!0T.(1U9gL-5$K8ooI7->r''`%!@M&s?W?RJ)UK.oFDu8[c`p_84[YQ>R-SZ!la+%]DiXAQq\`1.P%R3>u^,*^cr7%OZb-XpZ*&7CEJd!'VG3)2._>X%%6^Fq2S9&F2SNa6s>.)M*#QRGTHM&c&=<%%gu_?_eHnkH+i@o1kLkKn`UX@SMQ%r0@QS:JSRn3A_B&JFC*H?4,d.i\H=#lD.T#;(1ibP51JI<lE,:HD=>DU^4*m?&O]@**C.B:g>>#W"P4>+EM0Q!eX#=0WYkCA:f>M%<be'?gEmLY95rB>Ddil`>L^UD1r?_B!nXYtW@OCL/^glJZj>5qocjR7ZT5"I^k_2Pm&%@Bpi;;Y)*)<qUru_*mRu<Q%N8jkaE1)Z%:hF&G$RZ'ER(nV>'@X3%RO!btPOI>6_YJ><1mKS0TiCqN.n*u2!\;)A:C8D1>T"BUqk7l^ZnY226H"p_=7]ff,'kC?Q9c])%*@UJ%DDZa=_D>'ooDhL:4a:DnQsL`]oZ2Y4(R0L/)(=rhKjjV*Y?[bFbJbcWV(\FROF@S/jcCP\;SEQ&/0ZlmE1f`aLB3/b99*s[63(Nr%#7IBFGCbT'YqNtJ;EUL(WM#A;+dD17!Fui,Ll#&i@8R>$D]'VuiesNtI+lK"9gZ@\)N7:qoTC-=Qd^7oX'd=FBu!8MC+@0eTShPr%;K7D@9F\QWN*g$K;M.Z%3>Wh98r$+:8MD8?Z;ZBP)knE3'qVN4AnhmKDN_;>j9D<eNK=']DGYrYGAJUmQjDjZBgh%e.EKR>;OGVs%8UR(Fa14JSdCDOiVS>bk1H-_u`!"uCeNm7[c(q4'lcM/-K+du0U6-CJ7iZUgKVF?6nT^-F.@0Fc)YM(:9'1IY(%X2e,_a=p+;<ej%+?Ud0O,7gnO?uoaO@"o]+;<ej+@%+`W+u1uR)b+/CZ=SI*&k/M4r2HI(ghU+%jX;2#3)]L$quV$@:T*G"5S'SX#G4@KmF@lV5O)T%Ne90er'4fKe%%J%`TN)ZH]^K/b9nf&]HS=a5U>f<nfj34)"DHHo']M'kKO<eIot(Uqj+l\plRW5[pXrg2$IFB\VhX5cRffMh4&YR%80W.c!6=A=biR*0h;CqB:d+GI-fPpU2/l/@1ch-[Ukg"1d3>U]`!mo9H(2H-ifkM,UeiA6cnl'h9:UZ*fHB`>-9dS91\BjE9c'm[%=+>67,.8e\(E1@jke8>lj7%'#0GUJs]F]$'A.kEVNfHpH$<)Qa-^dl[;;4DH9*%j,-r5Cr/HV-&a[@>/MXS<EUI,<a98dSj1a[?+%(h\#ta!.Z.oq@$?&I!2I%lhrOMjc+201r/We_&9Y.1(4#C8@S$.p@7IA!P<:ID^<6'mg]r`,@D%h_6*[d3Ufq$]Rm]>(Mi'^*fr'%8.p(ZQo/U:@8QJuTdl%E5ZXQmHh="T>D"5P%m;lL3o6o;^SnDdJb#)_X!Eh10cZjJU7USk:qB7K(W-Jbdb)Q9[W8r95M6jrkGfr&%#j3;%jhnmm<Dj$04!o*!jY2P0q&r8@L+sVt9tCZO%![gkH\t[,9oeEJ!jOB!R)^ci+_-CWU$8Lf@9Fc(WA3*!B$P?P.8_B+k:6,3%a*5Ho/FkbWO+Ku6jpXY2.uu?g_c7Fu12)a:Kp$l!'G(6'IaWYb7F)qcCW(l^^'p#DM1E=hM'WE"Z?T>sp[Gg+LH4qEiu/$%?\L[l%W291?\bb8T>SXI]!-[m4n,sO2h1#unac?/8:;!`[@^&[[NTH]WF9+l_SC;S$=[6bn?7lr>_t77OWiApHH5QAY(G)^oE^J2_1GVo"%"c40Cajo]eH3'J;X*ieIC9j4'ieba-J23J]2$eZc2%c`Wkb&P!!ohTjjht(/]=?7HU:bH?UuG2jbJOEN^1<+i.$PZG.)u/Qput?6%\Ari/\nVGA(DK`uJ[k;KNa";P/87PH9o(Nc!NqQ<\"/@q9G<_IG>f17$Z0,loUVqG0m!q]GZ:InbidpmEFQZ*,]K$?(U?ICTKS7:%UfH,ADM"#fn(^_64WX0<;?SB07lVq>c*=sAEFYN5!8=GG@i4^G_l;:hfSq/<8\qBN1C%b]Q_#@`l>dO$:q/p+m/\%1)G1gA'HL/(%dCDRMM^Zd^>[K7%0VSZ><*lFq:C."u5j*Q;]2Qe;ncX2u2ngZJ8ll7[WZ%Oo/EP(94caM%`"DZPEBb"+`dh$:T?hTG)-iFcl&_1O%D\hh*DK=gc*?L$;Sp5G"CZCoUMYHFl*9=4VE?3?$NJ[O@ANPu')*m]'eXCBjWu`1DI7+5^@/Yic_@_0>Q.'?eEKB?PW$686BH/.I%_';RdYfbqk79g<B4bBj2&4\0X/Vt!Dq,u>Q")^JLrKDSl*rk;rd/X]JIGuXl<lclN+u,sKh>2@&#&6%5*>=<c$Y$]-'gKT<RT2Cm%%Hsm\"E25VZSBQD=@=@K4r,#\'L_0^67CJ"8DBEt.YGEm'BW1."!)J21omcQRt9S_5mY[RO$l;HB5qENUdGk.(.LE6&\n#RU$pkb%VNnY8:R4mHE@mA+^aYc6EQ3<7OX^msf;7S'q,qf'N[#2s,*Z,ua!:V;)&&?.@VU1?/&C0p/"ggV5L@io@q]p^?lheu]@Njp@$]10%ND4tj_Re1G78".E.`Jr$Xk?f#Jg5LPqgtMD#^p><Ilq`Zj4%93(gS83b.P4QC3&U"ibH""nK4fadjKi1]1VRTBCqOs:aZ`Fl36&t%R#67'#RN(NI(*980WdrTC)5JB-KYRYL3*Q"UaAqO@-$pc;$5'('of&t/%)Q2!?nL5b]Pm*9$!r9,c'X+"2fQFOLS+hieW\D:Ss:!%'3=?i'G6LaB9cP$]TXm<`Vi*^(+d%j*)jO!X2((r%cJ:r81m.X5B&s^Ai!ca$">-pWu<!S,Wp>D2kS9'OpMnU+3Eh<IF//8pf9_?%[mSm\[t(t>4Q[J5ga9Cm=XE!",*Wgn](a3W(.RF%hQB:Kf`DDRr7"_=Wq(.ZU/jOGVsu>0I8K,?TTR,K16OkA+G,0MPG`%-cW6/o%@5a<OI\_C$"<,#WO<RI45SR=N0CkhOKH)0FjEr:**r-9ZcP-$o+=Enn!)Llj1)@,j0PcVh7uWjm;nh?r(ptb-ppj@_P=($_+D[%p%]5dV6,h+D:hr^b$;UlMW+`AYrKWg0JlcS^]OM8SNe5`X\IHAP@`%t\p9&e-ma3QH^`/A<Kj]c@]7Qh#@(l7*^l93uQ5W*g275,01%ph?!HD'ta6lK^M[.u`ULP#!I$igFU^=NEod0Q!^*Abm#)dnYSMFGRA+:nQQlq0%8Nm5h6Ip!n[TYeg<5-9b]^Jd+*O8RIV:c``O'%N6HIV9g)+eR_[R2K\e;@fb.jd#H(c,-B)L2\g836.J]u;K^=-d:10c7&F#AI(/n?Vnle.=on3^g&`0EV7$hl1dJ*itfq.W'5YgR#%?ac.U<?cN//;^N2`^bOCr`+goid4`oEHI!Rk9,mm'JmUd7?-O!R2G$XECm=ke9'D4osr;EA,-Zj=+We7f27:n_*0_."-]W\*mJ%S%atrN9*%M@1K]V_uYBZ4)iG5-G2i'G7P8g-71LdVn6g;J+mZ8l-,/1S;94K.&.;b<&I$04M<>Wf6/>H'nYekLo"-MJW:+@F"(gJen%9SCD976%<!d*kD7OVu\<o%mL!-sV'DFB-49U:Y&I4Ju.VjGJMG@o4?8!Z]HQ[$#>\;+"+G:/YS&1,Ghus6+giQbp]dgq6R63_b.E%;CC.4kA(MO\o&ioQ9:.a]KVbc"[k<&`=E6rIKTdP`rL`WGS<X3E)D"A)p-:a,4T[`,+O-LLhHi9^PK0d"\-_piLsd`T;(0TiMcAW%5ks1!FsrQqo>NKEB3$^0Ja=3&B8"BfUW@><Lj]q2YpX4f,CVS?Z&j&;`:1^9&9=9`6@M=]6V(,bE:Fu0Q6aI=nVJr.;(=;Zb%2A9%^Q#"nOIc"]N*.#BTpRL*GC`k&Tus&;;j"=)#rtCJ-%h.geJ6nK`Y,T0iU9*FVS`@C/39/g`0H9;jn^Bf>mr4=b"GZ(DiUaT'h=c8%'Vep*BW$6?#VfEIF%$g?PktDslrnRBWIa7Lj<([qjc.u;qm?QHOcUbm(*KkL,OQs&E>(0c5l<dEF&(EV5tEQ4a;K32?%/%*W]C;O%9,YX^Mc^A;4s+OhGD:e/K4nm,YZ5^/lanf,;5C;H",Q,mNB@S:ZlHKu`uefg%H@p.'lDG/1j7-`N,/*_agR/qiE/\s1=J2PM!Wg\%4u#^%b;X:<B2;dALE8eMA(B$UDp2rihC*Hmr%[gb6V?DE#(_*J0PV<kM=B=XN3*BLN?r"BQ2^WC0XQDA0.9oVMNPS^<iaAJC,H5d%ZQ[h,BJ[<!%I9I^9b&34(sZ7:YLs=L..72YjEEgr+<J@WY\mGEhViN5:./)I,*K>Jo7I$7PUN*[%<88b-6j&*S0dn@K^9=c.X<3N%Bb,28eWjnX#h62hn7snn07m2FF&&0]>H("<lS&=AW`oaOQE`ldCZC0HeHOU6m^e;f:<1jh3H6FeaNB!HW-(1br*eJog8][@F,]Em%4-VOS6qX:P3NRa?#8XE;/T]NlCN7L@HSphY2AUGlZN[IHF0gK;.=5516ZAEF4EWq#7*E>hr$]OBNT)=i'u?.4AR4FK=[-h("F,N9%Z)$KKRm9?L`-h]3aWRTI(21!W)V0'@)&OGsJKDEiG*sH>`,Pb*kIYas7==_+pZ_^L-Ho,I9WFY)j9mZ=PB4s.J)WRJ8e`5OFq"Un%rA[^hQkOL_k6]edN3j#9.5iM@?]aO_+q%Fb=e%,pg9fg[JMsu3G">R^e&"W03@ZX#"23,po7Yb;5pL!-$I4j+27tKC3[emd22%Oj%S%/(+!bMJ\jLh[BIRQ`l#%hHWgG%VUKa82`p`+1g/6`+PLfK>p\?;[\.LrMrm$HJ`)tS:P"]m6^n4$UX*&AjPV8o8qaLm:BE,5q7%@gg5FgR(&U%EE+g.BPkspuc,hUUT92O\'M!^Lf)e4LE?oAHh_PH>!&rY2/C=,d$Z`76O6h?.7"VV9/3g^6b(mA5m<R%#fKcaCsDF%7^j_RnA5?NfB7ID0Ze:^h69(3*i5`G\(l/`3)Wj<<tWn<)!X+eBb,i5(I=;$R\GKcIA65m,X4JIm:->(5)I13Km=+/IEe)=G4\,l%7D=U[FMK@0bOf;!,[L"_6&Y>>%;a4.`X&*dWJTCj_.V*mpBSRuQt16'MDHCUX>P`sXM@'UHuMWLQZ31q&<i^$/HlNom;T?u\1ETa%=pqp__?[W@#A(_8!=mWAiu?Vq1$n%QKn7(6gqMF_Xu<QUTR&2G<jV;Rr7&9E2b@@]#]_1d$ETFDGSE*4a[(I3#\sm0;<TWE^-eA9%AgX@EK<C=6^:Oo@8\L;^VN2^Sic!k81hIBkGP3<t#S;E%;rHdd[<VlrO0aQDq1Euk,4M;Jf9A:E9F+pAXlRep0WY*aP6h)'WD$2=%UZW6MH@1f5#XEQ=7ut)t^Le=;.^7!Ci?4Y-$'p7V*EsLSWI?60@pMO4+thdWgT_F4Mo9GG8)9UE7C4S[WE#t$1HDC<%FE.=jk,+W%j"k2&8tQ6_pT\-509[+OpU$OXdU/\%],RtB*J)et@*FKdCXqM+d,!JcA73npBHP^6Zj3o"(dnai5tP[6V6KNs^]DhsE5a<nLjc))%Bs9'P]M`W7Ph_HS-#cFbs6J-jq)')$5:)MUSeIFt&9n]]Zt(W+[l1Pk+i:(o@jtY^prb\3D^rhT/g0Fr9bTbig13MS'1Y"g.J1$4%bCY;"$NQLr5"2F8X/<)aJRkoR3u>r4<gqbScWh=Q]"On`S7>fUpHpr?[V41oBuGT[g(r0`a)J(eJ?)r#Bb+#rX__KCX-dfuRC'#A%TUm=O77uGg+VMG3r$Wlk`[7%G("qb[6'^5jZ$KCW22$F:@0f,fBX:s,VLCmM2FHJ+1<:F?fl_0H<R3]Rp9>_=lO<=Yp"el5n++dH%T0GQ3s1V`&I(28/^-=hfI^ku!qu(QKH[7jTH+?.(5JOk%h_'Dks)S-]]tD(m>VGiT^V9VWaSR2gr,hf1l.`h"!6\+b&H~>%AI9_PrivateDataEnd