%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: BW_B.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/30/07%%BoundingBox: 0 0 324 67%%HiResBoundingBox: 0 0 323.4009 66.4756%%CropBox: 0 0 323.4009 66.4756%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-10T13:53:16-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-30T17:20:38-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-30T17:20:38-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>56</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqxj8wfzB0XyToov78NcXlw3o6XpcO9xd3B2WKJRU9SOTU2+dAVWP8A5FeY&#xA;9W8yeWtV1rVpUkvrvVpzIId4IwkMKLDCf2kiC8OW/IgmprUqvR8VdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQ2qajb6bpl3qNySLayhkuJytCeESF2&#xA;pWnZcVfFHmbzV5h83+YptQvUmuNX1CQ2Nva21WeNG2GmWC0+E/FS5np3IHUiRV7D+mp/yY8g6Fpl&#xA;xcxyeZr++Go6jo8HAolkqf6TGpIkKxxQwhFflVnFasOWKvfo3WRFda8WAYVBBod+h3GKt4q7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVC/tI7yxuLOT+7&#xA;uYnheoB+GRSp2PXriryX8ifyng8tNqGqa1b+p5jtLiXTbSVlb04bOGnFrbmF/wB6ORkaQdeVNjyq&#xA;q8G1SDzD5w893qpyvdc1q9eGKIfF6ohkoAftCOws+A5Hf1GTvSqKvtDSbAafpdnp4cyizgjgEhFC&#xA;3pIE5Ee9MVRWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KofUL+10+wuL67f07a1jaaZwCxCIORoqgknboNzir5J82a5/wA5Fef9fu7rQNP13S9BuGMdhZxe&#xA;rYxegBxBeRjErlxu9WpU06YqgdG/JX83/LmsWXmjW9FfUIrKaOSZUvw9xEOa/vawSGRuHUhSduu2&#xA;Ko3zB+Tv5t61eTav5Y0D9EWczl40W9EdzNwqquWnlDqlB8CkrtvTvirflDzB/wA5EeQdftLrzDp+&#xA;u6n5fgYRahaTCa9iEDfCSkgMqoydUowHbocVfR/5bat501bTJ7/zLbwwRXDiXS2hK1eCSrKeKs9F&#xA;4lePOj9eQxVl+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KsWv/AMy/Kdk91zkup7ewd4tQvbWxvLq1&#xA;geLZ1kngikjqh2cAnj+1TFU/0vVNP1XTbbU9OnW5sbyNZradPsvG4qpFaHp44qisVdirsVdirsVd&#xA;irsVdirsVdirsVS6fzDo0Gu2ugzXSJq97DLc21oa83ihKh28P2tq9d6dDiqY4q7FXYq7FXYq7FXY&#xA;q7FVk00MELzTOsUMSl5JHIVVVRUsxOwAHU4qlS+cfKzaFJry6rbfoeGolvvUAjUggcST+0SRRepq&#xA;KdRiqXP+Zvk6JIJbu5ubC2uWCQ3d9YX1nbEsaLW4uIIohy7Etv2xVk0M0M8KTQussMqh45EIZWVh&#xA;UMpGxBHQ4qvxV2KuxV2KuxV2KvFbG5/N38s7aXSh5cj83+UreaeW0vNPl4agkNxM8pWWBgxldS5+&#xA;yv8AssVSOPzd5Yh8yepa+ZdW0byVdeXINU0nT7Ispt5PWlt5YEj4TgEfVzsdg1aHFWb+Rr3V9A86&#xA;y+Xdb1q61i01jSrbUtDvr5gG5W4K30VAOIYtIstKmikCp44qxfVdR1GC68ta/qfmnVtP0DzHq2oE&#xA;RRSN8GnmCWXT+Kokh+IxK/2T8L0Oy1xVGS635n0xdG8yeUtX1HzXp15d6jHc6TqBUST2lpVZVgXi&#xA;n75JLeR4vhXkCFI8VU11m7bzprfli48seaL/AE3S9dtLqac2cg2Nm8BKem1fTlpK8b1rQ9VJAxVD&#xA;6L5e8xav5q846C/nLW4rfQZbGLTJFlgD1uLFJ2aYrCjSfG/Sq7e++KoTyh5+hb8pr/8ASes6hL5g&#xA;Yan/AKWY7l5FeCeaK34TJH6YASJK0NK1rvXFWW+UvOOiWfkHyoPMWuomra5p9nKpuZ1+tzz30asT&#xA;Go+M/vJKLxWg+jFUi/L/AE7zRr/lO91CLzPqMGuW+oX9pZ3MrpPBxtbh4oVmt3QxupVBzIAY9QQc&#xA;VS3zB+bGvan+XOj3OmT2+k+ab2G5vrtXkCxhdGlZJ4oyx3+tXESxIvdWbfauKphrXna60q40H8yo&#xA;Lu8v/JGtWqRX2kxtzFpcXCJ9WmjQU5cpF9F1b7LtXqcVZz5H0vWNH8tINf1Ca81GUvdXj3MokFvz&#xA;APoI+w4QqAvL9o1bvirwvzX5jimlj/Ne2g1JtX07VY5rJRp2oLbHy9FytjH9aMH1f9+jtOW9WnxU&#xA;67Yq9RudQvNX/NOx06z1i6i0G+8uSarElq6orSC6hjjlUlS1DHKdsVYl5v8AM/nbyl5uS0utauL/&#xA;AEfRltdZuJOMSyy6PNc/VLmK5VERXkt5OEiOnHknLlU9FWT/AJi6hrV3ean+gtYudPg0DQbrUr17&#xA;Voyj3MqM1gh5K/QQyO1O3H+bFWO6D5gOt+Wjc6b5y1aXV4/L0moX8DIgijuBEjB0Z4Y6FZa/D8QK&#xA;+G1VUdYfmHrWs/l/rVhq00mieedJ0l9TV7YqBcwrAZIL2DkpVopGoJEp8J2NMVXeadH816LrPlPT&#xA;1856tN+nNUltb2QfVUCwCGWdFiUwuVKhFUsxavXFVYp5y0b8xZtFtddvNaH+Hb/VNPs7wwhXu0nj&#xA;gt0kKJGGA9Q/yjp4Yql3lrW7HzRe6fpMPnHXdB81r8et6NfosNxMEiJlWGOaEwoRJRqw9EB+HuFU&#xA;bouga7rXmnzt5fu/NmrSWGkSWdvaI5tWDpd2KTyCcegvNS0hFBx+HavfFULe6Doekfm35I8nWcHp&#xA;aFbwX2sRWkkkkwlv1T045HMrOXaFELJ4dcVeu6jp1jqVhcaffwrcWV3G0NxA4qrxuKMp+jFXlfk3&#xA;WNP8pedfMnlm91W/l0jRLfS7bRbaYT3Sxxva8pKmKNt6qtK9umKpLZ6xreoaJeXsPmDU/THne30e&#xA;3cSsjfo6W6hg9Ih1DD4JzufirTwxV6f5/t7ttOsLi1v7mweLU9Pik+qycPViuryG2ljfY1HCU07g&#xA;9MVeRy+adWt7/wAyWll5p1FvN1n5h/R3lvR5GE1vPAfQPpSrJHwNQ8tWLhlC17bqvShe6j5n87a9&#xA;oYv7jTdJ8ti0ikSyYRTXNzdwi45PNQukccbKAqUqSeRpQYqx/wDM2284+WPJfmDULbzFdvYWgspt&#xA;JkZl+uQStcejcxPKqAzRMkqledWB77DFV/nnzlZzv5SsNC1e/hmn1qysbsqlxA0trNVZA7yxqGY8&#xA;V3rXriqc+XvL35o6HpEWgxappV3ZWiiCw1W4huDcx267RiS3VwkjRr8IPqrWm+KpPpP5X+bfLuvS&#xA;XmiXGm3diNIj0eKPURMXcCd7qaaYRLxJlmnkPEbUOKpx5u/LbUvM3l7R7W61UQa3ps/OTU7WL0Ab&#xA;a4DQ3lvEgLcEa2kKJUk/CtT1OKovzb5X8x3eteWL7y81hBb+XZJ5RbXXqhX9a2e0VFES/CqRysfn&#xA;TbbFULb+WfzBbzDpOp315pb2lncTzT2NtFLCqC4Qxv6TEOzuebyMzn4mNKLSpVVbL8sLPTvzH/xb&#xA;ptyba0nhuTe6QATE17cmMPdR70RpFjHqUHxEA+OKqnlryv5o0vzX5u1u5lsZY/MEkU1nFGZQ0ZtY&#xA;Vt4Fl5DcNGgLle/QUxVC+VPJHmXR/wAs73ypcz2Ut/It8lrcxmUQ/wCnySTVkUryHBpyNuoAxVH+&#xA;SPI1vomi6SNSsbC48xaXYwaauqQx/G0NonpxUkkX1Fqu7Ad8VSfyZ5P/ADG8vaReaSt9pUcd1dXV&#xA;3HfJHcTSQtdytK37pjGknEv8NWHuDiqI/L/8tB5ek1BdSjtL6A+lBpLkNNLFaRBjwkMqgc3lkeZy&#xA;mxd22AAxVIZvys86/wCCdW8oW9zpsemXWqrqGlAtP/olsLwXv1UDh8QEiAKfAn2xVmf5g6H5p1/y&#xA;hcaNo9xa2V3qEf1e+nn9UqsLikyxcByq4qtT0Br1xVNbrS5LjyvLpTQW3qS2LWrWo5C15ND6fp7D&#xA;l6XbpXjiry7yT+V/5peV9Q0m7Op6RqP6I0uTRYVlW6VmtpLhbhasoNGT01Rdqce2Ks9tPJf1m61b&#xA;UfMUsd9fazaDTJooUMdvDYjn+4jDF3JdpWZ3Y/EabAADFUm0X8tdT0f8s9V8sRagt/rWp281tJql&#xA;1UKVaEWkHIKC1IbVEWncjrviqjB5Q/MgeWoNDe70eKCz0xtNikjineWYNbi3pJI/92myyMEWrMqi&#xA;oFcVb80flQ/mXyLp2l3Vylh5m0q0NtY6vaciq/uvReNuQVmhmj2kQ/wxVNfPHlXzBrWveV9R0ya0&#xA;jg0G8e9njufU5yFojCFQoCB8MjHfvTFUL5g8l+aNQ88za7Y31vZWsmh3OiRSqZfrUL3LrKLlKAJy&#xA;jkjWi16d8VVx5W80axf6Hc+aJdOP6BuBeRSWEcvqzTiJ4vtSkejGefJlXlyoBUAbqqvlPyv5g0zz&#xA;h5q1rUZbSS18wTwTW8dv6gkiW1hW3jV+YoSY0BYg/a6bYq35+/L9PNDaZqNlfPpPmPQ5jcaPqsaC&#xA;T02YUkjkjJAkikAoy1H6wVVK6sfzavdP+pfpHR9MmkUpPqltDcTyqD+1DBKyIrf6zsBiqh5F8j6/&#xA;5c8z61e3N1b3emalb2NvC3KU3Y/R0At43lLDizSJVn3+1iqWWn5Xa/PofmTTNR1C3tZ9U1k6/pOo&#xA;WIkZ7W79VJo+aScA4RoV7779NjiqefoDzrq9xpqeY7rT47DTriK9kTTkn9S5uLc8ogTMaRRh+LkD&#xA;kTSlQMVSOD8qtVvbDzTputXNtFDrmqNremX1l6n1qyveMaxOpcKP3foA1BBNSOhxVF6d5J87aZrL&#xA;+ZbXUbCTXNTght/MlpJHKtndvaqY4LqJlJkhlEfwsvFlI+VcVWecPJPn7zP5a1bTrvVLBJdT+rRw&#xA;Wkccy21tFbzes78yWkllkZVFSqgAdMVTHz15X80+YLLy4bOSxgvtI1G21W7ExmMTyWwP7uMqvLiz&#xA;OdyMVf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:0C3A3356E8FD11DBB9739E7606BFB90D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:49A1CC84F8D111DBAAE2975E5D9B4AE7</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -66.4756 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 66.4756 li323.401 66.4756 li323.401 0 licpclp[1 0 0 1 0 0 ] concat158.294 34.8555 mo158.294 33.1069 li160.776 33.1069 li160.776 32.9424 li160.776 31.1914 159.969 29.9092 154.407 30.8726 cv145.261 32.5015 li139.999 39.8008 li152.627 37.5615 li156.411 36.9121 159.733 36.7769 160.776 39.7852 cv160.776 34.8555 li158.294 34.8555 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf162.501 39.7842 mo162.501 37.4043 163.908 35.7676 166.78 32.8965 cv168.803 30.8726 li178.052 32.5015 li183.324 39.793 li171.197 37.7012 li167.084 36.9121 163.599 36.6357 162.501 39.7842 cvcpf163.014 33.103 mo163.93 31.1372 165.881 29.3599 167.002 28.2383 cv167.801 27.4272 li171.198 24.0308 171.851 22.626 172.056 20.2871 cv172.066 20.165 172.241 20.7451 172.293 21.1563 cv172.468 22.5342 172.367 23.5347 171.898 24.915 cv171.198 26.9775 169.54 28.6206 167.388 30.7725 cv165.047 33.103 li163.014 33.103 licpf164.986 4.62354 mo164.986 4.60547 165.043 4.59473 165.043 4.62354 cv165.043 7.33252 li165.043 9.78223 161.894 12.6079 160.64 13.854 cv156.028 18.479 li154.434 20.0737 151.241 23.2227 152.582 26.2607 cv152.626 26.3618 152.667 26.4487 152.496 26.3276 cv152.155 26.0854 151.638 25.2354 151.5 23.6812 cv151.255 20.9116 153.143 18.4321 155.472 16.103 cv159.872 11.6978 li164.333 7.23584 164.769 6.44922 164.986 4.62354 cvcpf160.64 18.4897 mo161.894 17.2441 165.043 14.418 165.043 11.9683 cv165.043 9.25928 li165.043 9.23096 164.986 9.24072 164.986 9.25928 cv164.769 11.085 164.333 11.8716 159.872 16.334 cv155.785 20.4272 li154.3 21.9121 152.938 23.4688 153.001 25.9819 cv153.04 27.522 153.814 28.7983 154.979 29.0991 cv155.458 29.2026 155.429 29.1401 155.315 29.0913 cv153.669 28.3145 153.788 25.3428 156.448 22.6826 cv160.64 18.4897 licpf155.51 14.3926 mo152.113 17.7891 151.46 19.1938 151.254 21.5327 cv151.245 21.6548 151.07 21.0747 151.018 20.6641 cv150.843 19.2856 150.944 18.2852 151.413 16.9048 cv152.113 14.8428 153.771 13.1992 155.923 11.0474 cv159.872 7.09229 li164.333 2.62988 164.769 1.84375 164.986 0.0180664 cv164.986 -0.000488281 165.043 -0.0107422 165.043 0.0180664 cv165.043 2.72705 li165.043 5.17676 161.894 8.00244 160.64 9.24854 cv155.51 14.3926 licpf162.56 37.5469 mo162.557 37.5684 162.501 37.5684 162.501 37.5469 cv162.501 34.8555 li163.628 34.8555 li162.992 35.7681 162.666 36.6519 162.56 37.5469 cvcpf162.568 33.1069 mo162.565 33.1279 162.51 33.1279 162.51 33.1069 cv162.51 30.3662 li162.51 28.3076 164.528 26.082 166.528 24.0952 cv167.826 22.7983 li168.873 21.7515 172.07 18.5972 170.73 15.5591 cv170.685 15.458 170.644 15.3711 170.815 15.4922 cv171.156 15.7344 171.672 16.5845 171.81 18.1387 cv172.056 20.9077 170.168 23.3877 167.839 25.7168 cv166.639 26.9219 li163.748 29.814 162.786 31.1104 162.568 33.1069 cvcpf162.565 28.354 mo162.562 28.375 162.506 28.375 162.506 28.354 cv162.506 25.5723 li162.506 23.6094 164.454 21.4907 165.398 20.5459 cv166.863 19.0845 li169.523 16.4243 169.642 13.4526 167.996 12.6758 cv167.881 12.6274 167.852 12.5649 168.332 12.6685 cv169.498 12.9688 170.271 14.2451 170.31 15.7852 cv170.373 18.2988 169.034 19.8452 167.548 21.3301 cv166.362 22.5171 li163.877 25.001 162.791 26.4526 162.565 28.354 cvcpf255.748 54.3281 mo255.728 52.9443 254.099 53.3232 254.099 52.9072 cv254.099 52.7363 254.25 52.6982 254.402 52.6982 cv255.103 52.6982 255.786 52.7744 256.487 52.7744 cv257.074 52.7744 257.661 52.6982 258.249 52.6982 cv258.571 52.6982 258.609 52.8125 258.609 52.8877 cv258.609 53.2666 257.245 52.9072 257.245 54.3281 cv257.245 58.4209 li257.245 58.6855 257.245 58.7607 257.529 58.7607 cv264.463 58.7607 li264.653 58.7607 264.615 58.2881 264.615 58.2119 cv264.615 54.3281 li264.615 53.0205 263.194 53.3428 263.194 52.9072 cv263.194 52.793 263.232 52.6982 263.516 52.6982 cv264.141 52.6982 265.126 52.7744 265.486 52.7744 cv266.187 52.7744 266.472 52.6982 266.851 52.6982 cv267.343 52.6982 267.381 52.8877 267.381 53.001 cv267.381 53.3428 266.112 53.0205 266.112 54.3281 cv266.112 64.3701 li266.112 65.7529 267.835 65.4111 267.835 65.8857 cv267.835 65.9424 267.76 66.1133 267.627 66.1133 cv267.116 66.1133 266.529 66.0371 265.847 66.0371 cv264.634 66.0371 264.103 66.1133 263.744 66.1133 cv263.573 66.1133 263.289 66.1699 263.289 65.8672 cv263.289 65.4111 264.615 65.6768 264.615 64.4834 cv264.615 59.9365 li264.615 59.6338 264.691 59.4629 264.463 59.4629 cv257.472 59.4629 li257.245 59.4629 257.245 59.5762 257.245 59.7842 cv257.245 64.5029 li257.245 65.791 259.044 65.374 259.044 65.9619 cv259.044 66.0557 258.912 66.1133 258.742 66.1133 cv258.495 66.1133 257.112 66.0371 256.107 66.0371 cv254.762 66.0371 254.554 66.1133 254.478 66.1133 cv254.327 66.1133 254.269 66.0176 254.269 65.8291 cv254.269 65.2793 255.748 65.9043 255.748 64.0293 cv255.748 54.3281 licpf271.546 61.0547 mo271.546 64.085 273.517 65.4688 276.076 65.4688 cv279.637 65.4688 280.452 63.1191 280.452 60.8838 cv280.452 54.7451 li280.452 52.8125 278.69 53.6084 278.69 52.8877 cv278.69 52.793 278.823 52.6982 278.879 52.6982 cv279.619 52.6982 280.357 52.7744 281.096 52.7744 cv281.457 52.7744 281.797 52.6982 282.138 52.6982 cv282.234 52.6982 282.385 52.793 282.385 52.9072 cv282.385 53.4375 281.267 53.0205 281.267 54.7637 cv281.267 60.6377 li281.267 61.5654 281.494 66.2461 275.981 66.2461 cv270.998 66.2461 270.05 63.46 270.05 60.543 cv270.05 54.1572 li270.05 53.0391 268.515 53.4941 268.515 52.8877 cv268.515 52.7559 268.837 52.6982 268.932 52.6982 cv269.424 52.6982 269.898 52.7744 270.411 52.7744 cv271.017 52.7744 271.623 52.6982 272.21 52.6982 cv272.304 52.6982 272.816 52.6611 272.816 52.8877 cv272.816 53.418 271.546 52.8877 271.546 54.252 cv271.546 61.0547 licpf286.627 58.8379 mo286.627 59.1973 287.802 59.1025 288.693 59.1025 cv289.507 59.1025 291.327 58.7607 291.327 56.4121 cv291.327 54.1006 289.565 53.3232 287.708 53.3232 cv287.026 53.3232 286.627 53.2861 286.627 54.0254 cv286.627 58.8379 licp293.524 64.0479 mo294.889 66.1318 295.817 65.4307 295.817 65.8857 cv295.817 66.1133 294.756 66.1133 294.585 66.1133 cv293.203 66.1133 292.463 65.1465 291.744 64.0664 cv289.64 60.751 li288.958 59.6904 289.243 59.7471 287.121 59.7471 cv286.514 59.7471 286.627 60.0879 286.627 60.2773 cv286.627 64.2754 li286.627 65.9043 288.598 65.3174 288.598 65.9619 cv288.598 66.1514 288.427 66.1133 288.276 66.1133 cv288.106 66.1133 287.669 66.0371 286.097 66.0371 cv285.377 66.0371 284.658 66.1133 283.937 66.1133 cv283.824 66.1133 283.748 66.0176 283.748 65.9043 cv283.748 65.4307 285.131 65.6963 285.131 64.2559 cv285.131 54.6123 li285.131 52.793 283.501 53.5693 283.501 52.9258 cv283.501 52.8125 283.653 52.6982 283.88 52.6982 cv284.222 52.6982 284.127 52.7744 285.093 52.7744 cv286.192 52.7744 287.272 52.6982 288.257 52.6982 cv288.56 52.6982 292.748 52.3193 292.748 55.9766 cv292.748 57.4541 291.686 58.7236 290.361 59.2539 cv293.524 64.0479 licpf302.478 52.5283 mo306.041 52.5283 307.026 53.9873 307.576 53.9873 cv307.727 53.9873 307.84 53.7969 308.031 53.7969 cv308.239 53.7969 308.239 54.1006 308.295 55.332 cv308.333 56.3369 308.503 56.9619 308.181 56.9619 cv307.955 56.9619 307.822 56.4688 307.746 56.3369 cv306.572 54.3096 305.226 53.0771 302.782 53.0771 cv299.086 53.0771 297.306 55.54 297.306 59.0654 cv297.306 62.3613 299.201 65.6582 302.838 65.6582 cv305.814 65.6582 307.669 63.7637 307.955 62.8926 cv307.993 62.7598 308.106 62.6455 308.219 62.6455 cv308.315 62.6455 308.41 62.7598 308.39 62.8545 cv307.955 64.749 li307.935 64.8252 306.59 66.2461 302.327 66.2461 cv298.443 66.2461 295.658 63.5742 295.658 59.6514 cv295.658 55.7305 298.481 52.5283 302.478 52.5283 cvcpf311.313 54.3281 mo311.293 52.9443 309.665 53.3232 309.665 52.9072 cv309.665 52.7363 309.816 52.6982 309.967 52.6982 cv310.668 52.6982 311.351 52.7744 312.052 52.7744 cv312.639 52.7744 313.227 52.6982 313.814 52.6982 cv314.135 52.6982 314.173 52.8125 314.173 52.8877 cv314.173 53.2666 312.81 52.9072 312.81 54.3281 cv312.81 58.4209 li312.81 58.6855 312.81 58.7607 313.094 58.7607 cv320.028 58.7607 li320.218 58.7607 320.18 58.2881 320.18 58.2119 cv320.18 54.3281 li320.18 53.0205 318.759 53.3428 318.759 52.9072 cv318.759 52.793 318.796 52.6982 319.082 52.6982 cv319.707 52.6982 320.691 52.7744 321.052 52.7744 cv321.752 52.7744 322.037 52.6982 322.416 52.6982 cv322.909 52.6982 322.947 52.8877 322.947 53.001 cv322.947 53.3428 321.677 53.0205 321.677 54.3281 cv321.677 64.3701 li321.677 65.7529 323.401 65.4111 323.401 65.8857 cv323.401 65.9424 323.326 66.1133 323.193 66.1133 cv322.681 66.1133 322.094 66.0371 321.412 66.0371 cv320.199 66.0371 319.668 66.1133 319.308 66.1133 cv319.138 66.1133 318.853 66.1699 318.853 65.8672 cv318.853 65.4111 320.18 65.6768 320.18 64.4834 cv320.18 59.9365 li320.18 59.6338 320.256 59.4629 320.028 59.4629 cv313.037 59.4629 li312.81 59.4629 312.81 59.5762 312.81 59.7842 cv312.81 64.5029 li312.81 65.791 314.609 65.374 314.609 65.9619 cv314.609 66.0557 314.477 66.1133 314.306 66.1133 cv314.06 66.1133 312.677 66.0371 311.673 66.0371 cv310.328 66.0371 310.119 66.1133 310.043 66.1133 cv309.892 66.1133 309.835 66.0176 309.835 65.8291 cv309.835 65.2793 311.313 65.9043 311.313 64.0293 cv311.313 54.3281 licpf96.6201 65.6689 mo99.3462 65.6689 101.891 64.2148 101.891 59.792 cv101.891 55.5508 99.104 53.1885 95.4688 53.1279 cv93.6514 53.1279 93.5908 53.4307 93.5908 54.3389 cv93.5908 63.4268 li93.5908 63.7305 93.5303 64.6387 93.7119 64.7598 cv94.3179 65.4268 95.772 65.6689 96.6201 65.6689 cvcp90.8037 52.7041 mo91.4097 52.7041 91.9551 52.7637 92.5 52.7637 cv93.7725 52.7637 94.9844 52.7041 96.6201 52.7041 cv100.013 52.7041 103.345 55.248 103.345 58.7627 cv103.345 63.125 101.285 66.1543 95.9536 66.1543 cv94.9844 66.1543 94.0146 66.0928 93.0454 66.0928 cv92.9243 66.0928 91.0459 66.1543 90.9248 66.1543 cv90.8037 66.1543 90.7432 66.0928 90.7432 65.9717 cv90.7432 65.5479 92.0762 66.0322 92.0762 64.2148 cv92.0762 54.7031 li92.0762 52.7637 90.5615 53.3701 90.5615 52.8848 cv90.5615 52.7637 90.6826 52.7041 90.8037 52.7041 cvcpf110.797 60.0342 mo111.221 60.0342 111.221 59.9131 111.1 59.6709 cv109.222 55.0664 li109.161 54.8242 109.04 54.8242 108.918 55.0664 cv106.798 59.7314 li106.677 59.9736 106.798 60.0342 107.041 60.0342 cv110.797 60.0342 licp106.919 60.8828 mo106.556 60.8828 106.192 60.8828 106.011 61.3076 cv104.799 63.9727 li104.738 64.0938 104.617 64.3965 104.617 64.6387 cv104.617 65.9717 106.011 65.3662 106.011 65.8506 cv106.011 66.2139 105.708 66.1543 105.465 66.1543 cv104.92 66.1543 104.436 66.0928 103.89 66.0928 cv103.345 66.0928 102.86 66.1543 102.375 66.1543 cv102.254 66.1543 102.194 66.0928 102.194 65.9717 cv102.194 65.5479 103.103 65.8506 103.587 64.7598 cv108.131 55.0664 li109.222 52.7041 109.282 52.4014 109.585 52.4014 cv109.767 52.4014 109.888 52.9463 109.949 53.0674 cv113.947 62.8818 li114.25 63.6094 114.432 64.3965 114.856 65.0635 cv115.462 65.9111 116.552 65.4873 116.552 65.9717 cv116.552 66.1543 116.431 66.1543 116.31 66.1543 cv115.522 66.1543 114.735 66.0928 113.947 66.0928 cv113.402 66.0928 112.917 66.1543 112.372 66.1543 cv112.312 66.1543 111.948 66.1543 111.948 65.9717 cv111.948 65.4873 113.099 65.7295 113.099 65.0029 cv113.099 64.5791 112.736 63.6689 112.554 63.1846 cv111.948 61.6094 li111.766 61.1855 111.645 60.8828 111.1 60.8828 cv106.919 60.8828 licpf114.06 52.7041 mo114.544 52.7041 114.908 52.7637 116.18 52.7637 cv116.847 52.7637 117.332 52.7041 117.513 52.7041 cv117.695 52.7041 117.876 52.7041 117.876 52.8848 cv117.876 53.1885 117.028 53.1885 117.028 53.7344 cv117.028 54.0967 117.271 54.4004 117.332 54.5215 cv119.634 58.2168 li119.815 58.46 119.937 58.5801 120.058 58.5801 cv120.118 58.5801 120.239 58.46 120.421 58.1563 cv122.36 55.0059 li122.481 54.7637 122.784 54.4609 122.784 53.9766 cv122.784 53.0068 121.33 53.4307 121.33 52.9463 cv121.33 52.7041 121.512 52.7041 121.754 52.7041 cv122.178 52.7041 122.663 52.7637 123.147 52.7637 cv123.693 52.7637 124.238 52.7041 124.783 52.7041 cv124.904 52.7041 124.965 52.8252 124.965 52.8848 cv124.965 53.1279 124.662 53.1885 124.541 53.249 cv123.996 53.5518 123.753 54.0967 123.451 54.582 cv120.785 58.7627 li120.482 59.1865 120.361 59.3076 120.361 59.6104 cv120.361 64.2754 li120.361 65.9111 121.875 65.3662 121.875 65.9717 cv121.875 66.1543 121.754 66.1543 121.451 66.1543 cv121.209 66.1543 120.058 66.0928 119.391 66.0928 cv118.543 66.0928 117.816 66.1543 117.634 66.1543 cv117.513 66.1543 117.392 66.1543 117.392 65.9111 cv117.392 65.4268 118.846 65.9111 118.846 64.5176 cv118.846 59.9131 li118.846 59.5498 118.543 59.1865 118.422 58.9434 cv115.211 53.8555 li114.726 53.0674 113.817 53.3096 113.817 52.9463 cv113.817 52.8252 113.878 52.7041 114.06 52.7041 cvcpf205.335 52.7432 mo206.04 52.7432 206.701 52.8262 207.404 52.8262 cv208.024 52.8262 208.603 52.7432 209.182 52.7432 cv209.472 52.7432 209.554 52.7842 209.554 52.9092 cv209.554 53.3633 208.19 52.9502 208.19 54.3564 cv208.19 64.5313 li208.19 65.8555 209.844 65.4004 209.844 65.9795 cv209.844 66.1025 209.803 66.1445 209.472 66.1445 cv209.058 66.1445 208.231 66.1025 207.404 66.1025 cv206.246 66.1025 205.874 66.1445 205.583 66.1445 cv205.252 66.1445 205.211 66.0615 205.211 65.8555 cv205.211 65.3174 206.66 65.9375 206.66 64.0762 cv206.66 54.3564 li206.66 52.9912 205.128 53.3633 205.128 52.9502 cv205.128 52.7842 205.17 52.7432 205.335 52.7432 cvcpf40.5786 58.8838 mo42.5781 58.8838 42.0327 57.3682 42.5176 57.3682 cv42.6992 57.3682 42.6992 57.5508 42.6992 57.7324 cv42.6992 58.3994 42.6992 59.0049 42.6992 59.6104 cv42.6992 60.0957 42.6992 60.6396 42.6992 61.125 cv42.6992 61.3076 42.6387 61.3682 42.5176 61.3682 cv41.9116 61.3682 42.5781 59.7314 41.0029 59.7314 cv38.1553 59.7314 li37.731 59.7314 37.792 60.0342 37.792 60.3379 cv37.792 63.791 li37.792 64.9424 37.6709 65.4268 39.2456 65.4268 cv43.6685 65.4268 44.335 63.4268 44.5771 63.4268 cv44.6987 63.4268 44.6987 63.6094 44.6987 63.6689 cv44.6987 64.3359 44.2139 65.0029 43.729 65.4873 cv43.1235 66.2139 42.6992 66.1543 41.9116 66.1543 cv40.4575 66.1543 39.0034 66.0322 37.5493 66.0928 cv36.7617 66.0928 35.9741 66.1543 35.2471 66.1543 cv35.0654 66.1543 34.9443 66.0928 34.9443 65.9717 cv35.0049 65.7295 35.1865 65.79 35.7925 65.4873 cv36.2769 65.2451 36.3379 64.7002 36.3379 63.791 cv36.3379 55.127 li36.3379 54.2793 36.3379 53.3701 35.3076 53.1885 cv35.126 53.1885 34.7017 53.1279 34.7017 52.8848 cv34.7017 52.7637 34.8232 52.7041 35.3682 52.7041 cv39.0034 52.7041 39.9727 52.7637 40.7603 52.7637 cv41.124 52.7637 42.8809 52.7041 43.4868 52.7041 cv43.6685 52.7041 43.6685 52.8848 43.6685 53.0674 cv43.6685 55.1875 43.4263 55.3701 43.3052 55.3701 cv42.8203 55.3701 43.1836 54.4609 42.8203 54.0361 cv42.3354 53.3701 40.3364 53.4912 39.6094 53.4912 cv37.792 53.4912 37.792 53.4307 37.792 54.7031 cv37.792 58.2168 li37.792 58.8838 37.792 58.8838 38.519 58.8838 cv40.5786 58.8838 licpf44.4561 52.7041 mo44.7593 52.7041 45.062 52.7637 45.3647 52.7637 cv45.6074 52.7637 45.9102 52.7041 46.2129 52.7041 cv46.4551 52.7041 46.5767 53.0068 46.6978 53.1279 cv55.7856 63.2461 li55.9067 63.3672 55.9673 63.4268 56.0278 63.4268 cv56.0884 63.4268 56.0884 63.3672 56.0884 63.2461 cv56.0884 55.248 li56.0884 52.7637 53.9678 53.4912 53.9678 52.8848 cv53.9678 52.7637 54.0889 52.7041 54.2104 52.7041 cv54.7554 52.7041 55.3008 52.7637 55.9067 52.7637 cv56.5732 52.7637 57.3608 52.7041 57.8457 52.7041 cv57.9668 52.7041 58.0273 52.7637 58.0273 52.8252 cv58.0273 53.3701 56.876 53.0068 56.876 54.4004 cv56.876 65.4268 li56.876 65.9717 56.876 66.2139 56.7549 66.2139 cv56.5732 66.2139 56.3916 66.1543 56.0278 65.7295 cv47.8491 56.46 li47.7881 56.46 47.5459 56.0967 47.4248 56.0967 cv47.3643 56.0967 47.3037 56.1572 47.3037 56.5811 cv47.3037 64.3359 li47.3037 66.0928 48.9395 65.4268 48.9395 65.9111 cv48.9395 66.0322 48.9395 66.1543 48.7578 66.1543 cv48.2729 66.1543 47.7881 66.0928 46.8188 66.0928 cv46.1523 66.0928 45.1831 66.1543 45.062 66.1543 cv44.8198 66.1543 44.8198 66.0322 44.8198 65.9717 cv44.8198 65.3057 46.4551 66.1543 46.4551 63.4268 cv46.4551 56.3994 li46.4551 52.4619 44.1533 53.5518 44.1533 52.8848 cv44.1533 52.7637 44.335 52.7041 44.4561 52.7041 cvcpf60.0869 53.7344 mo58.8755 53.7344 58.8755 54.0361 58.5117 55.0664 cv58.4512 55.248 58.4512 55.4912 58.209 55.4912 cv58.0879 55.4912 58.0273 55.3701 58.0273 55.248 cv58.209 53.4307 li58.2695 53.1885 58.209 52.7041 58.5723 52.7041 cv60.0264 52.7041 61.541 52.7637 63.9644 52.7637 cv67.418 52.7637 69.1748 52.7041 69.5386 52.7041 cv69.9624 52.7041 70.0229 52.7637 70.0835 53.249 cv70.2046 54.7637 li70.2046 54.9453 70.2046 55.1875 69.9624 55.1875 cv69.2959 55.1875 70.3262 53.7344 68.3872 53.7344 cv65.6606 53.7344 li64.813 53.7344 64.8735 53.6729 64.8735 54.6426 cv64.8735 64.3965 li64.8735 65.9717 66.4487 65.3662 66.4487 65.9111 cv66.4487 65.9717 66.4487 66.1543 66.2666 66.1543 cv65.7822 66.1543 65.2368 66.0928 64.6914 66.0928 cv62.5713 66.0928 62.2075 66.1543 62.0864 66.1543 cv61.9048 66.1543 61.8442 66.0928 61.8442 65.9111 cv61.8442 65.4268 63.3589 65.6689 63.3589 64.5176 cv63.3589 54.582 li63.3589 54.4609 63.48 53.7344 63.1768 53.7344 cv60.0869 53.7344 licpf70.144 52.7041 mo70.8711 52.7041 71.5376 52.7637 72.2646 52.7637 cv72.8706 52.7637 73.4766 52.7041 74.0215 52.7041 cv74.3853 52.7041 74.3853 52.7637 74.3853 52.8848 cv74.3853 53.249 73.0522 52.8848 73.0522 54.3389 cv73.0522 58.46 li73.0522 58.7012 73.0522 58.7627 73.2949 58.7627 cv80.2622 58.7627 li80.5044 58.7627 80.4438 58.2773 80.4438 58.2168 cv80.4438 54.3389 li80.4438 53.0068 78.9897 53.3096 78.9897 52.8848 cv78.9897 52.7637 79.0503 52.7041 79.353 52.7041 cv79.959 52.7041 80.9282 52.7637 81.292 52.7637 cv82.019 52.7637 82.3218 52.7041 82.6855 52.7041 cv83.1699 52.7041 83.2305 52.8848 83.2305 53.0068 cv83.2305 53.3096 81.9585 53.0068 81.9585 54.3389 cv81.9585 64.3965 li81.9585 65.79 83.6548 65.4268 83.6548 65.9111 cv83.6548 65.9717 83.5942 66.1543 83.4731 66.1543 cv82.9277 66.1543 82.3823 66.0928 81.6553 66.0928 cv80.4438 66.0928 79.8984 66.1543 79.5352 66.1543 cv79.4136 66.1543 79.1108 66.2139 79.1108 65.9111 cv79.1108 65.4268 80.4438 65.7295 80.4438 64.5176 cv80.4438 59.9736 li80.4438 59.6709 80.5044 59.4893 80.2622 59.4893 cv73.2339 59.4893 li73.0522 59.4893 73.0522 59.6104 73.0522 59.792 cv73.0522 64.5176 li73.0522 65.8506 74.8091 65.4268 74.8091 66.0322 cv74.8091 66.0928 74.688 66.1543 74.5063 66.1543 cv74.2642 66.1543 72.8706 66.0928 71.9014 66.0928 cv70.5078 66.0928 70.3262 66.1543 70.2656 66.1543 cv70.0835 66.1543 70.0229 66.0928 70.0229 65.8506 cv70.0229 65.3057 71.5376 65.9717 71.5376 64.0938 cv71.5376 54.3389 li71.5376 52.9463 69.8413 53.3096 69.8413 52.8848 cv69.8413 52.7041 70.0229 52.7041 70.144 52.7041 cvcpf89.9556 59.3682 mo89.9556 60.2764 90.0161 60.2764 89.2891 60.5186 cv85.4116 61.8516 li85.0483 61.9736 84.7451 62.1553 84.5635 62.1553 cv84.2607 62.1553 84.3213 61.792 84.3213 61.6094 cv84.3213 60.6396 84.2607 60.6396 84.9878 60.3975 cv88.8647 59.0654 li89.168 58.9434 89.5317 58.7627 89.7134 58.7627 cv90.0161 58.7627 89.9556 59.1865 89.9556 59.3682 cvcpf175.307 58.9063 mo177.292 58.9063 176.796 57.376 177.251 57.376 cv177.375 57.376 177.458 57.583 177.458 57.748 cv177.458 58.4092 177.417 59.0303 177.417 59.6504 cv177.417 60.1475 177.458 60.6426 177.458 61.1396 cv177.458 61.3057 177.375 61.3877 177.251 61.3877 cv176.672 61.3877 177.292 59.7334 175.72 59.7334 cv172.908 59.7334 li172.495 59.7334 172.577 60.0635 172.577 60.3535 cv172.577 63.8281 li172.577 64.9443 172.412 65.4004 173.984 65.4004 cv178.368 65.4004 179.03 63.4561 179.278 63.4561 cv179.402 63.4561 179.402 63.6211 179.402 63.6631 cv179.402 64.3662 178.906 65.0283 178.493 65.5244 cv177.872 66.1855 177.458 66.1445 176.63 66.1445 cv175.183 66.1445 173.736 66.0615 172.288 66.1025 cv171.543 66.1025 170.757 66.1445 169.971 66.1445 cv169.806 66.1445 169.681 66.1025 169.681 65.9795 cv169.723 65.7305 169.93 65.7725 170.509 65.4824 cv171.005 65.2344 171.047 64.7383 171.047 63.8281 cv171.047 55.1836 li171.047 54.3154 171.047 53.4053 170.054 53.2803 cv169.889 53.2393 169.475 53.1982 169.475 52.9502 cv169.475 52.8262 169.599 52.7432 170.136 52.7432 cv173.694 52.7432 174.686 52.8262 175.514 52.8262 cv175.886 52.8262 177.624 52.7432 178.202 52.7432 cv178.368 52.7432 178.41 52.9092 178.41 53.1572 cv178.41 55.2666 178.12 55.3896 178.037 55.3896 cv177.582 55.3896 177.872 54.4805 177.582 54.0664 cv177.085 53.4053 175.1 53.5293 174.356 53.5293 cv172.536 53.5293 172.577 53.4463 172.577 54.7285 cv172.577 58.2441 li172.577 58.9063 172.536 58.9063 173.281 58.9063 cv175.307 58.9063 licpf179.485 52.7432 mo179.815 52.7432 180.105 52.8262 180.394 52.8262 cv180.684 52.8262 180.973 52.7432 181.263 52.7432 cv181.47 52.7432 181.635 53.0332 181.759 53.1572 cv190.818 63.249 li190.9 63.373 190.984 63.4561 191.024 63.4561 cv191.066 63.4561 191.107 63.373 191.107 63.249 cv191.107 55.3076 li191.107 52.8262 188.998 53.5703 188.998 52.9092 cv188.998 52.7842 189.081 52.7432 189.205 52.7432 cv189.743 52.7432 190.322 52.8262 190.9 52.8262 cv191.562 52.8262 192.389 52.7432 192.844 52.7432 cv192.927 52.7432 193.01 52.7842 193.01 52.9092 cv193.01 53.4053 191.893 53.0732 191.893 54.4385 cv191.893 65.4004 li191.893 65.9795 191.893 66.2266 191.728 66.2266 cv191.603 66.2266 191.397 66.1445 191.024 65.6895 cv182.876 56.5068 li182.835 56.5068 182.586 56.1758 182.462 56.1758 cv182.38 56.1758 182.338 56.2178 182.338 56.5898 cv182.338 64.3662 li182.338 66.0615 183.994 65.4004 183.994 65.8965 cv183.994 66.0205 183.994 66.1445 183.786 66.1445 cv183.332 66.1445 182.793 66.1025 181.884 66.1025 cv181.222 66.1025 180.229 66.1445 180.105 66.1445 cv179.857 66.1445 179.857 66.0615 179.857 65.9375 cv179.857 65.2754 181.511 66.1025 181.511 63.4561 cv181.511 56.4658 li181.511 52.5361 179.236 53.6123 179.236 52.9092 cv179.236 52.8262 179.402 52.7432 179.485 52.7432 cvcpf195.037 53.7764 mo193.837 53.7764 193.796 54.0664 193.464 55.1006 cv193.382 55.3076 193.382 55.5557 193.134 55.5557 cv193.01 55.5557 192.969 55.3896 192.969 55.3076 cv193.175 53.4873 li193.175 53.2393 193.175 52.7432 193.506 52.7432 cv194.996 52.7432 196.443 52.8262 198.883 52.8262 cv202.316 52.8262 204.053 52.7432 204.425 52.7432 cv204.881 52.7432 204.963 52.8672 205.005 53.2803 cv205.087 54.8115 li205.087 54.9766 205.128 55.2246 204.881 55.2246 cv204.177 55.2246 205.211 53.7764 203.267 53.7764 cv200.539 53.7764 li199.835 53.7764 199.793 53.8184 199.793 54.6875 cv199.793 64.3662 li199.793 65.9795 201.324 65.3584 201.324 65.9375 cv201.324 65.9795 201.365 66.1445 201.158 66.1445 cv200.703 66.1445 200.166 66.1025 199.627 66.1025 cv197.519 66.1025 197.146 66.1445 197.022 66.1445 cv196.857 66.1445 196.815 66.1025 196.815 65.8965 cv196.815 65.4404 198.304 65.6475 198.304 64.4893 cv198.304 54.6455 li198.304 54.5215 198.345 53.7764 198.056 53.7764 cv195.037 53.7764 licpf28.9463 65.3662 mo28.7646 65.8506 28.583 66.4561 28.3403 66.4561 cv28.0376 66.4561 27.7949 65.6689 27.6133 65.2451 cv22.8877 54.1582 li22.4033 53.0068 21.4336 53.3701 21.4336 52.9463 cv21.4336 52.7637 21.5547 52.7041 21.7368 52.7041 cv22.2822 52.7041 22.8877 52.7637 23.4937 52.7637 cv23.978 52.7637 24.7056 52.7041 24.9478 52.7041 cv25.0688 52.7041 25.2505 52.7637 25.2505 52.8848 cv25.2505 53.1279 24.4629 53.1279 24.4629 53.8555 cv24.4629 54.0967 24.584 54.4004 24.645 54.582 cv27.9771 62.458 li28.4009 63.4268 28.522 63.8516 28.7041 63.8516 cv28.8857 63.8516 28.9463 63.5479 29.0674 63.3672 cv32.3999 55.1875 li32.521 54.8848 32.7026 54.2793 32.6421 53.8555 cv32.6421 53.0068 31.4302 53.3701 31.4302 52.9463 cv31.4302 52.7637 31.5513 52.7041 31.7334 52.7041 cv32.1572 52.7041 32.5815 52.7637 32.9448 52.7637 cv33.9141 52.7637 34.1567 52.7041 34.4595 52.7041 cv34.6411 52.7041 34.7627 52.7637 34.7627 52.9463 cv34.7627 53.3701 34.2173 52.8848 33.6719 54.1582 cv28.9463 65.3662 licpf19.5557 66.1543 mo18.1016 66.1543 16.6475 66.0322 15.1934 66.0928 cv14.4663 66.0928 13.6182 66.1543 12.8911 66.1543 cv12.7095 66.1543 12.5884 66.0928 12.5884 65.9717 cv12.6489 65.7295 12.8306 65.79 13.4365 65.4873 cv13.9209 65.2451 13.9819 64.7002 13.9819 63.791 cv13.9819 55.127 li13.9819 54.2793 13.9819 53.3701 12.9517 53.1885 cv12.77 53.1885 12.3462 53.1279 12.3462 52.8848 cv12.3462 52.7637 12.4673 52.7041 13.0122 52.7041 cv16.6475 52.7041 17.6167 52.7637 18.4043 52.7637 cv18.8286 52.7637 20.5249 52.7041 21.1309 52.7041 cv21.3125 52.7041 21.3125 52.8848 21.3125 53.0674 cv21.3125 55.1875 21.0703 55.3701 20.9492 55.3701 cv20.4644 55.3701 20.8276 54.4609 20.4644 54.0361 cv20.04 53.3701 18.041 53.4912 17.2534 53.4912 cv15.436 53.4912 15.4966 53.4307 15.4966 54.7031 cv15.4966 58.2168 li15.4966 58.8838 15.436 58.8838 16.1626 58.8838 cv18.2227 58.8838 li20.2222 58.8838 19.7373 57.3682 20.1616 57.3682 cv20.3433 57.3682 20.4038 57.5508 20.4038 57.7324 cv20.4038 58.3994 20.3433 59.0049 20.3433 59.6104 cv20.3433 60.0957 20.4038 60.6396 20.4038 61.125 cv20.4038 61.3076 20.2827 61.3682 20.1616 61.3682 cv19.5557 61.3682 20.2222 59.7314 18.6465 59.7314 cv15.7993 59.7314 li15.436 59.7314 15.4966 60.0342 15.4966 60.3379 cv15.4966 63.791 li15.4966 64.9424 15.3145 65.4268 16.8896 65.4268 cv21.3125 65.4268 21.979 63.4268 22.2212 63.4268 cv22.3423 63.4268 22.3423 63.6094 22.3423 63.6689 cv22.3423 64.3359 21.8579 65.0029 21.4336 65.4873 cv20.7671 66.2139 20.4038 66.1543 19.5557 66.1543 cvcpf163.767 65.3584 mo163.56 65.8555 163.436 66.4756 163.146 66.4756 cv162.816 66.4756 162.609 65.6475 162.444 65.2754 cv157.769 54.1904 li157.315 53.0732 156.281 53.4053 156.281 52.9912 cv156.281 52.8262 156.405 52.7432 156.57 52.7432 cv157.149 52.7432 157.728 52.8262 158.307 52.8262 cv158.803 52.8262 159.548 52.7432 159.796 52.7432 cv159.92 52.7432 160.044 52.8262 160.044 52.9092 cv160.085 53.1982 159.3 53.1982 159.3 53.9014 cv159.3 54.1494 159.382 54.4385 159.465 54.6455 cv162.774 62.4219 li163.23 63.4561 163.312 63.8701 163.519 63.8701 cv163.726 63.8701 163.767 63.5801 163.891 63.3311 cv167.159 55.2246 li167.283 54.9346 167.531 54.3154 167.448 53.9424 cv167.448 53.0732 166.208 53.4053 166.208 52.9912 cv166.208 52.7842 166.332 52.7432 166.498 52.7432 cv166.911 52.7432 167.324 52.8262 167.779 52.8262 cv168.689 52.8262 168.937 52.7432 169.227 52.7432 cv169.433 52.7432 169.557 52.8262 169.557 52.9912 cv169.557 53.4053 169.02 52.9092 168.482 54.1904 cv163.767 65.3584 licpf0.652832 64.9424 mo0.0473633 61.6709 li-0.0742188 61.1855 0.0473633 60.8828 0.289551 60.8828 cv0.652832 60.8828 0.652832 61.1855 0.773926 61.7305 cv1.07715 62.8818 2.5918 65.5479 6.10547 65.5479 cv8.5293 65.5479 10.8916 64.2148 10.8916 61.5498 cv10.8916 56.6416 0.592285 59.3682 0.592285 52.7637 cv0.592285 49.5537 3.31885 47.9775 6.22656 47.9775 cv9.31641 47.9775 10.1045 48.8867 10.4678 48.8867 cv10.7104 48.8867 10.7705 48.584 11.0132 48.584 cv11.1948 48.584 11.3159 48.7051 11.3159 48.9473 cv11.6797 52.4014 li11.7402 52.6426 11.6797 52.8252 11.437 52.8252 cv11.1343 52.8252 10.9526 52.2803 10.8916 52.0371 cv10.165 49.8564 8.28662 48.7656 6.04492 48.7656 cv4.0459 48.7656 1.92529 49.7344 1.92529 52.0371 cv1.92529 56.8232 12.2246 54.0361 12.2246 61.0039 cv12.2246 63.1846 10.7104 66.335 4.95459 66.335 cv3.07617 66.335 0.713379 65.4268 0.652832 64.9424 cvcpf136.344 51.585 mo133.49 57.665 li133.325 58.0371 133.49 58.1201 133.821 58.1201 cv138.784 58.1201 li139.364 58.1201 139.322 57.9551 139.198 57.624 cv136.758 51.585 li136.634 51.2539 136.509 51.2539 136.344 51.585 cvcp147.677 54.3975 mo147.677 63.4141 li147.677 63.7041 147.636 64.6133 147.801 64.7793 cv148.422 65.4004 149.87 65.6475 150.738 65.6475 cv153.427 65.6475 155.992 64.2002 155.992 59.8154 cv155.992 55.5967 153.178 53.2393 149.58 53.1982 cv147.76 53.1982 147.677 53.5293 147.677 54.3975 cvcp147.181 66.1025 mo147.057 66.1025 146.023 66.1445 145.444 66.1445 cv144.41 66.1445 143.789 66.1025 142.962 66.1025 cv142.259 66.1025 141.597 66.1855 140.894 66.1855 cv140.77 66.1855 140.356 66.1855 140.356 65.9375 cv140.356 65.3174 141.845 65.5654 141.845 64.6133 cv141.845 64.0762 141.349 62.918 141.101 62.2559 cv140.273 60.1885 li140.025 59.6094 139.901 59.2373 139.198 59.2373 cv133.655 59.2373 li133.159 59.2373 132.704 59.2373 132.456 59.7744 cv130.884 63.29 li130.802 63.4561 130.677 63.8281 130.677 64.1592 cv130.677 65.8965 132.456 65.1514 132.456 65.8135 cv132.456 66.2686 132.125 66.1855 131.794 66.1855 cv131.091 66.1855 130.388 66.1025 129.685 66.1025 cv129.023 66.1025 128.32 66.1855 127.658 66.1855 cv127.534 66.1855 127.451 66.0615 127.451 65.8965 cv127.451 65.4004 128.609 65.8135 129.271 64.3662 cv135.269 51.585 li136.758 48.4004 136.84 47.9863 137.171 47.9863 cv137.461 47.9863 137.626 48.7305 137.709 48.9375 cv142.92 61.8838 li143.293 62.7939 143.583 63.8281 144.162 64.7383 cv144.575 65.3174 144.947 65.5244 145.444 65.5244 cv145.857 65.5244 146.188 65.0283 146.188 64.2002 cv146.188 54.7695 li146.188 52.8262 144.658 53.4463 144.658 52.9092 cv144.658 52.7842 144.782 52.7432 144.906 52.7432 cv145.485 52.7432 146.064 52.8262 146.602 52.8262 cv147.884 52.8262 149.083 52.7432 150.738 52.7432 cv154.088 52.7432 157.398 55.2666 157.398 58.7822 cv157.398 63.125 155.33 66.1445 150.076 66.1445 cv149.083 66.1445 148.132 66.1025 147.181 66.1025 cvcpf231.724 53.2803 mo231.807 54.8115 li231.807 54.9766 231.848 55.2246 231.601 55.2246 cv230.898 55.2246 231.931 53.7764 229.988 53.7764 cv227.257 53.7764 li226.513 53.7764 226.513 53.8184 226.513 54.6875 cv226.513 64.3662 li226.513 65.9795 228.043 65.3584 228.043 65.9375 cv228.043 65.9795 228.085 66.1445 227.878 66.1445 cv227.423 66.1445 226.885 66.1025 226.348 66.1025 cv224.238 66.1025 223.867 66.1445 223.742 66.1445 cv223.577 66.1445 223.536 66.1025 223.536 65.8965 cv223.536 65.4404 225.024 65.6475 225.024 64.4893 cv225.024 54.6455 li225.024 54.5215 225.065 53.7764 224.776 53.7764 cv220.847 53.7764 li219.689 53.7764 219.73 54.1904 219.73 54.8525 cv219.73 55.0596 219.895 55.8867 219.523 55.8867 cv219.316 55.8867 219.192 55.4736 219.109 55.3076 cv218.531 53.6943 217.207 53.1152 215.552 53.1152 cv214.022 53.1152 212.451 53.8594 212.451 55.5967 cv212.451 59.1543 220.144 57.0859 220.144 62.2979 cv220.144 63.9111 219.027 66.3096 214.725 66.3096 cv213.319 66.3096 211.582 65.6064 211.499 65.2344 cv211.043 62.7939 li210.96 62.4219 211.043 62.2148 211.25 62.2148 cv211.499 62.2148 211.499 62.4629 211.623 62.835 cv211.83 63.7041 212.988 65.6895 215.594 65.6895 cv217.414 65.6895 219.151 64.6973 219.151 62.6699 cv219.151 59.0303 211.458 61.0566 211.458 56.1348 cv211.458 53.7354 213.484 52.5771 215.676 52.5771 cv217.952 52.5771 218.572 53.2393 218.861 53.2393 cv219.151 53.2393 219.192 52.7432 219.565 52.7432 cv221.053 52.7432 223.163 52.8262 225.603 52.8262 cv229.036 52.8262 230.773 52.7432 231.145 52.7432 cv231.601 52.7432 231.683 52.8672 231.724 53.2803 cvcpf245.917 48.126 mo250.638 48.126 251.944 50.0596 252.672 50.0596 cv252.874 50.0596 253.024 49.8086 253.275 49.8086 cv253.552 49.8086 253.552 50.21 253.627 51.8428 cv253.677 53.1748 253.903 54.0029 253.476 54.0029 cv253.174 54.0029 252.999 53.3506 252.898 53.1748 cv251.341 50.4873 249.558 48.8545 246.319 48.8545 cv241.421 48.8545 239.06 52.1191 239.06 56.791 cv239.06 61.1611 241.572 65.5313 246.394 65.5313 cv250.336 65.5313 252.798 63.0195 253.174 61.8643 cv253.225 61.6885 253.376 61.5381 253.527 61.5381 cv253.652 61.5381 253.778 61.6885 253.752 61.8135 cv253.174 64.3262 li253.15 64.4258 251.367 66.3096 245.715 66.3096 cv240.567 66.3096 236.875 62.7686 236.875 57.5693 cv236.875 52.3711 240.617 48.126 245.917 48.126 cvcpf183.985 35.6533 mo184.179 35.6533 li184.485 35.6533 184.638 35.5059 184.638 35.209 cv184.638 35.0586 184.581 34.9336 184.466 34.832 cv184.353 34.7314 184.212 34.6807 184.044 34.6807 cv183.938 34.6807 183.884 34.7227 183.884 34.8076 cv183.888 34.8652 li183.888 35.5547 li183.888 35.6016 183.892 35.6289 183.902 35.6387 cv183.912 35.6484 183.939 35.6533 183.985 35.6533 cvcp184.535 35.7285 mo184.999 36.4063 li185.056 36.4883 li185.202 36.7002 185.333 36.8086 185.449 36.8145 cv185.503 36.8174 li185.541 36.8193 185.558 36.8359 185.556 36.8691 cv185.552 36.9258 185.46 36.9541 185.283 36.9541 cv185.078 36.9541 184.893 36.8301 184.729 36.584 cv184.294 35.9297 li184.271 35.8916 li184.248 35.8525 184.208 35.833 184.155 35.833 cv183.922 35.833 li183.896 35.8359 li183.888 35.8711 li183.888 36.4766 li183.888 36.6113 183.906 36.6992 183.942 36.7422 cv183.978 36.7832 184.06 36.8115 184.187 36.8252 cv184.244 36.8311 184.273 36.8516 184.275 36.8887 cv184.277 36.9277 184.25 36.9463 184.192 36.9463 cv184.174 36.9463 184.139 36.9434 184.085 36.9375 cv184.041 36.9316 183.967 36.9287 183.865 36.9287 cv183.603 36.9287 li183.57 36.9287 183.521 36.9326 183.458 36.9404 cv183.414 36.9443 183.384 36.9463 183.371 36.9463 cv183.32 36.9463 183.294 36.9268 183.294 36.8877 cv183.294 36.8584 183.316 36.8389 183.359 36.8291 cv183.449 36.8076 183.506 36.7686 183.531 36.7109 cv183.555 36.6533 183.568 36.5293 183.568 36.3379 cv183.568 35.1055 li183.564 34.9277 li183.564 34.7617 183.506 34.6709 183.39 34.6533 cv183.308 34.6416 li183.257 34.6318 183.232 34.6094 183.232 34.5742 cv183.232 34.5361 183.259 34.5166 183.313 34.5166 cv183.327 34.5166 183.369 34.5195 183.438 34.5254 cv183.475 34.5273 183.527 34.5283 183.592 34.5283 cv183.647 34.5283 183.737 34.5244 183.863 34.5166 cv183.958 34.5117 184.041 34.5088 184.111 34.5088 cv184.667 34.5088 184.947 34.7129 184.947 35.123 cv184.947 35.3809 184.809 35.582 184.535 35.7285 cvcp184.273 33.8838 mo183.762 33.8838 183.326 34.0645 182.964 34.4258 cv182.603 34.7881 182.423 35.2246 182.423 35.7354 cv182.423 36.2461 182.603 36.6826 182.964 37.0449 cv183.326 37.4063 183.762 37.5869 184.273 37.5869 cv184.783 37.5869 185.218 37.4063 185.58 37.0449 cv185.941 36.6826 186.123 36.2461 186.123 35.7354 cv186.123 35.2227 185.942 34.7852 185.582 34.4248 cv185.221 34.0645 184.785 33.8838 184.273 33.8838 cvcp184.273 33.6533 mo184.849 33.6533 185.339 33.8555 185.745 34.2617 cv186.15 34.667 186.353 35.1582 186.353 35.7344 cv186.353 36.3096 186.15 36.7998 185.744 37.2051 cv185.337 37.6113 184.847 37.8135 184.273 37.8135 cv183.628 37.8135 183.101 37.5693 182.691 37.0801 cv182.359 36.6855 182.193 36.2373 182.193 35.7344 cv182.193 35.2227 182.357 34.7725 182.687 34.3828 cv183.103 33.8965 183.632 33.6533 184.273 33.6533 cvcpf233.416 50.9014 mo233.609 50.9014 li233.916 50.9014 234.068 50.7529 234.068 50.4561 cv234.068 50.3057 234.011 50.1807 233.896 50.0791 cv233.783 49.9795 233.642 49.9287 233.474 49.9287 cv233.369 49.9287 233.315 49.9707 233.315 50.0557 cv233.318 50.1123 li233.318 50.8027 li233.318 50.8486 233.323 50.877 233.332 50.8857 cv233.341 50.8955 233.369 50.9014 233.416 50.9014 cvcp233.964 50.9756 mo234.429 51.6533 li234.487 51.7363 li234.632 51.9482 234.763 52.0557 234.878 52.0615 cv234.933 52.0654 li234.97 52.0674 234.988 52.084 234.986 52.1162 cv234.982 52.1729 234.891 52.2021 234.713 52.2021 cv234.508 52.2021 234.324 52.0781 234.16 51.8311 cv233.724 51.1768 li233.701 51.1396 li233.677 51.1006 233.638 51.0811 233.585 51.0811 cv233.353 51.0811 li233.327 51.083 li233.318 51.1182 li233.318 51.7246 li233.318 51.8584 233.335 51.9473 233.373 51.9893 cv233.408 52.0313 233.49 52.0596 233.617 52.0732 cv233.673 52.0791 233.703 52.0996 233.705 52.1357 cv233.707 52.1748 233.679 52.1943 233.623 52.1943 cv233.605 52.1943 233.57 52.1904 233.516 52.1846 cv233.471 52.1787 233.398 52.1768 233.295 52.1768 cv233.033 52.1768 li233 52.1768 232.952 52.1807 232.889 52.1885 cv232.843 52.1924 232.814 52.1943 232.8 52.1943 cv232.75 52.1943 232.724 52.1748 232.724 52.1357 cv232.724 52.1064 232.746 52.0869 232.789 52.0771 cv232.878 52.0557 232.937 52.0166 232.96 51.958 cv232.986 51.9014 232.998 51.7764 232.998 51.5859 cv232.998 50.3535 li232.995 50.1748 li232.995 50.0098 232.937 49.9189 232.821 49.9014 cv232.738 49.8896 li232.687 49.8799 232.662 49.8574 232.662 49.8223 cv232.662 49.7842 232.689 49.7646 232.744 49.7646 cv232.757 49.7646 232.798 49.7666 232.869 49.7725 cv232.906 49.7744 232.957 49.7764 233.023 49.7764 cv233.078 49.7764 233.167 49.7725 233.293 49.7646 cv233.388 49.7588 233.471 49.7568 233.541 49.7568 cv234.097 49.7568 234.376 49.9609 234.376 50.3701 cv234.376 50.6279 234.24 50.8301 233.964 50.9756 cvcp233.703 49.1318 mo233.193 49.1318 232.756 49.3115 232.395 49.6738 cv232.034 50.0361 231.853 50.4717 231.853 50.9834 cv231.853 51.4932 232.034 51.9307 232.395 52.292 cv232.756 52.6533 233.193 52.835 233.703 52.835 cv234.212 52.835 234.649 52.6533 235.01 52.292 cv235.372 51.9307 235.552 51.4932 235.552 50.9834 cv235.552 50.4697 235.373 50.0332 235.011 49.6729 cv234.652 49.3115 234.214 49.1318 233.703 49.1318 cvcp233.703 48.9014 mo234.279 48.9014 234.769 49.1035 235.175 49.5088 cv235.58 49.915 235.783 50.4053 235.783 50.9824 cv235.783 51.5576 235.58 52.0479 235.173 52.4521 cv234.767 52.8584 234.277 53.0615 233.703 53.0615 cv233.058 53.0615 232.531 52.8174 232.121 52.3281 cv231.789 51.9326 231.623 51.4854 231.623 50.9824 cv231.623 50.4697 231.788 50.0205 232.118 49.6309 cv232.534 49.1436 233.062 48.9014 233.703 48.9014 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (BW_B.EPS)%%CreationDate: 4/30/07 5:20 PM%AI9_DataStream%Gb!R&k?8hZZ7c(2JF5^RA[:M>YRNK.,D&WD3.M1RJ-j)UQtstFj';J\Wf^NAX]Cg%Xo7Yc/5Pp3aJ%%\)P^25Btc]8h`]es2#k6k%[XG@G7W-lej0IiPV+P=bmW5.o9N-oj/&Hs>cNus0*E=-#L-N>\)I'?Pq:;!909;*jc9\LVeS)EnRh*bEHa16S:qsRp<Bb6r(E7Q/%NK%Q9Z/-p"<=:P9\QF-fHaqpZH+[t#(<aF%q1uX!Pl8*t^M,6bl#-cE5@$Fb>W3.cd)PbP,CFChL[]op5&>=%ctKB.L'FdJT'`Vn%ZocN&.U]MtQ*%&"Q>QDX*L3N453s<Wn#_pna7IKT-e"/gQI8k9VXWOdf2KdRb>G7=!MsnsJ"`Xcp`9j(87_>lTDJ8lEHBb"[-F3o%k0oB*erulKj7>XOe"@:rXgmY_4kitdnPh2QC^uu@+2X?E)AcOWPn0&soYt6^NINOGGO&=S:Ru+pQAsh=h%^n+&$=.9h>b8u##J27%3t2)co$D%j5M^Hia9[Z+[b^(gj+0R^GN5BW_eRU!gZi.3i2GMDBlmb91`p&.O,MXYp'G?><r]eZ@WR,9lp!G#Ng_?F>2/RUcJ9uJ%a",n!/2>n6<TVTkQ@j5Anu?N+c=UWs$(,'6*5ZY:_"@*)mV_Ha(4!7'Mp9i/[9=1s:D*JZ>$d2qs2EuIXGP<Y:8dX#Rgb3sF]Xh1%K>5#*26K/LY;RJBn6lW(<a^fW@-Km4DqI#E2gp8D0@-`mo_W+$$)q@1TZkh*I>KQd*a[dRAukau]`%K'=do2+h7RQg&*f]ifLCju%lh5FgA*dirjT)Z2pK)uUeb\+nFDc@o/R0MZjo*B[NN3P"k(*<onE$h%kZuQo'b40C][D+?hj0=lbm2oco93u;LC(rlruH5%:kknH%-T9E/2=UgkRUBM#f@9r%ZYP)Ps37CDefPt$DHc_rgUjMn$<"U]Rb5)5.YBn@C8h(&;uF,?ZMaUiZMAIkIT3@F6OrC`cJ@#<j7)M\%Vt&EO['dn,@#NaC&\@u6=6$"MX>Nm"or%-HQ[7sXY@sH'?[#;tYX<(gX'og.4sPD-+5YS@)q<Zgm09CL/?k'Tl;.(RR;c:SOrmf@%5gN,e`%Y>mIfY4"-[kUXq)$K1?hhoK/5Mfo*ZgdM.N`h;GL5t[i\uZ.+HV*r;ai%TrXOQq:o[d5_#FQ#ZHB(pe'F*EkALA#"l*b"%r9]8>^*`dM1]0`nlV[W!ilX.VD.N^=phg"XU67ai^Q=VIZ3.jHq#2p=DT@j/s6#LZ(haHrEi9U3NbB8*7R//[)ceQ6ZAir-9-j2t%Wgg(m@#:\1%nont7mJ8\m<=mEY[ghp7!Sn\&p[gXa9X?MPpe@D"=+V6DYMK`9I)bRXg;#`r1'n*JX1<5).N:CKso:a%j9mblo[0*%ogD$eMl!Ck5V_OW&"Ofkjb:DEA"u.f=ua.sJ[-G^=QTLE`E2qb#oB1ph0)E15"OQ7Zj0Fk3k[-tY`8UY<*k)iiP3l-k`KUdcTWE"%+$b?k:a6H&93IuD2Q:!I&ss34\otXr$SD2Sh__V18,505!t4@e!'nhZQb(]KShX:s0XD*d!H[t]'[2M6It4$o.rnb2kk28oC+t27%6Kspr8he?GZn;!.EBGf7s5PdIPQ3KHkA:sfb?DSXL[DMmI`)$$?[#R2s7Ot#m.]a^D%H9%e;nOj;u_;oG_495YYSJIQS4m68BZ(A%oL#ZZs*mtc#g1as?/:*EghJsV1er=))b*;G`IBpuj&Wt!;m2hI(Ost>m5I9BE5dHWD^>:^rpV,[,2UU9pB9!!-0$Rk)o)B=Nm?`,%=YoCGK*-`3b1[mG6gkW8;pYDTqtSZgb%e6=^PCt%IH.n0haGU!:&g<g[rZn'BO:/mQOf'"$btjurbpNSMglJulBq3.]S`t@=(J]8%cVh&uDB1@<lR8\TcNDTmF?0?\qZ>LB?dt>?5O?hlYCHKeF6!;i2J>>1?2\]>`@qKHc/qB:-SLr0+Cqn"Y7<?_(RaCQ4TAQA*!B7p%oY'h4k=.V4X1+)#S(f,$7&Kn.G0>$`Wb:".YC?H9m^dIDUg#t?J$rGVUb:l]X+(q[2ui.!aQ(8]^%o92DuTa>i;Q.<%\#,RWs0TL%rl<\V0WG(o'-8*`qDCf2_mUd2Z5jV1h#'uZ3GF?5d[63&Q4=iE>P69Fo;^BSW^!/bfV\+OlV==2^,0$JCO/VOo+=Se=DN3b/A[h@%%sNDL9B`Y;^?7RO;MsZ6olYke[@`r$n5/K#lfYl0K7&\a2'6#-E?DX4+'q"Qo&k<<g4&c\8NurY)[PjtX3kglrb@[Y)ZT5if<=X(%oujt&]?]<>PuKH6Pm/Bm5:tLP:H's"Rn!4Hq2D3^1i;,n)qT9eO(EJ3r'QshZsrh#DPP2)dO?^Fh(kEKk.#g="M/RDV,P*:`u^2j%>%6tbCrbYn7f-50S.(`fMtgsi7ZRG6c8-0&T1<Zn>^ih?6_iC[O"V#dPpGjIf9`6JQg:d!A[C7)/mmR7Ib??_KGL3-]/usshJ&3-%nGnseJp#e+7<Vl-VtP0P[bB9h0EuaQcj4K31TKRf`UTHH]6Olc/%/j3Uc5E1f^1iNb$Of^+4Yn58[ScdX4f''P&'>cXRG:YNRfnS%4d5arOTF%`_qe7dh!VP<pPjc]40X#$gMun*pC-FY?1Zr-(cS[*GhKO%D)+7IMjEB#?]D)ro_,Ti:k-'>,S*rD<O6i(\F-4Qjb:B[%a7sK:bP%p7`hIkT7#brikt&*F;5'A="i[\^rr$(ZRV/ImBjJ4%<M8'MXKSs/4h%IW!cSR>)JqZ'Ot%@VD]\AJO7h(P]D:boQ&4a2%q`7mND>h&ndcNC"OhY4oY2j,:(W=bk=V>SA![;jdFE[nI8^P&O4S>VMAgaM7B3))`1h2'=RSOs00'8sTY]3k4Sa8bZSiYEfLZd6l%VS4?SPI4aMgUndjUUnHPNJH9n?/FOtb"_HV\,eYe=+82o>;1bJPDlEAaAsfW]ST(QV7]BsbX_s@%i_EVD"aB@N.U,g"KIPfAb5_t%fcrdEB>>q3oh-oUc<7T;?&;]u?!rTS&[Ee'\usT0b_Xq@>s24g3E*uK_eT!?j0H>O"C?=Yr]YK"AcL]cFSRR;^WB<rF0#-&m\+([%bsWJCI>tk:SF&W(0\17:q"K31K[%eZUF!o`3tonTDY)h\61f=RGG*]]L[$`IOU/Ft-bjoM`m^uF/<]2l)COPgJ+iP)4^T!XS?2p^%,B]bG[sBYD9Z(Z/I):&)aXX+8bQ2.BR7arB`*%rbd'XSohQLAp4&*H*"3\qbfi")jIV'O%>+OPF_+FeIjLTa7GBp:ooWsfI"^&p2%/n0$+FHm]LlpU]3jV.k\]%uS<lo(!-H`pj-P('adr,,iXZ=r.O4Os$03[UZ9EQM5\Sd@9[P+/W2^:`boeoN6$-=pnSXJa,<_2QCp%FcXp;9-^68.0PP1V)"t3Qr;(aQfpK%PI>U>D78jtKBY,YR.(p]^"[/bIn]5eR>Sp\]r[H@6abcMEu-<%o9UeBVl+9:eK5^(XIe\U%b3rj;lM9E(mi7'PBs+&]Gmb\AF?gi_>$uOR@$Vl!cb7AMVord98_1QYF\L=Tc]pi_QBF%]Xu9.>4L!a*G9+6]co4*\)ZXK#b*Yc0%dMi[Ele/hL<\n@n;j(dd`HP+mE[3J6f$aJoH<#ikm:Eu]cC%2Q"&s[_-Rt4fUNNP;g/\a,DPkuF;?;JG[CSV4`C#!MeQVo@R^c2C%r?--FQ'nea[E9qJfZpg"l0:I/>t$o+Q0\7<FZnVS-Jdk)K-R?k'X=73*ul&5&5-9074`;"PBrSudKP*ZKWmCc;r?ZWO-m"sJ+jAA%jXGtk@'UOrR&tN6.rOIH7#AM3Br!>3O3L>iS^nQAfCXn#37P&pTe\s><6RnCE5F.^/%Xu_YX>_GS#uNEnjW*_B84Mj;^BOc_cEE@%5@u+oCbh3FB[hLJ^t$+2H?P;p/)34P]\i.^>^c:+2a>^+2r2YSH,H)rN*$:*El=ur\'b?;3eC$&_r9nSG3#haO=t%AZV1;O]skZS%F32"BIJBC_0#_%uI]F"I9&rIXfAQ2bg\IH\c1$X,?#/-%/fLdmel)H\oASd)jiYp*:EMdE4kW'V/DDQ"g;N[-HE"3Y](Q#W4nBhE%o#Fe/5C%,?eYh*^PKO,F@<U8mhL8XUj";Er<n;`=S+g,#TAS2NIT^;VnuFSDmW3>/2YhamB5I#0pX\!`<OFS?GB*RuCsL]n*1PYs%6XLBaX1G]`Cj,(!F+r4dgMrROVr'[*P<V8%-J(Jcn@sF$>c,57(Y\j1q!7F[.gbjO*GmnZ3E,J$X&9,@aeitBX-U0-[r3Ih3I7*!%g)PJ,[@R#o-oTe$^V$!0"[=pf+Re!Pk]j5cC;">2D>e^#Y\u+<LJu]'WYB2VeSa*u^!k`i>\^*"DH=2$.h/$+$Y*>)?FJ,qB"pS_%B!o;"]p7i=j6)2$>,CVCo3`lFd]K?AiR:Am;QPSPoqkMthd#R;VH)>rq7/IB;gCIu1TaPj_chMY;/%`S.XL\:VNm\"=7>Lf[;iSE%.CH)6)paG-rO^n3WKh?r1i%q?q0o#P-U61ph5gW@DLK9?5%:A;?,O97rl)#7SOpob27r!mnJ083YP)@E1,5id;7QEeQ,7FM>W423%dJ@j'q)P4u`=)_@qIW#n>,l8dT$JMGAQB^%r&U?AYOq57FK<)7gJ4sE+?YE_q"jCCCO:*dbg*0:^R^s$Bl'YJl:q;GIJ`/(lRC>X%cYD:.p_1=,VH%AJm!N!YW&0m?plW=];<ca;XQ5B'd8=Xca#@A=HX1FB*iE&Mq'eAH)W%UJo4-<T<pBJTq[HY;q>cRP[jU(Zd/_L7%<P!>Ckl7&r[\2(<3E^'5Hg_3CoPAt+dF1u>oW-NGW`l1$?WX>_j/4TEdd?RkW-3>!V,k2-d+D6]_Ru8dmSs3KcXg)PD:UbLrHUu<%FN6PJD/:baV,[loEjU8(S_;W4h;IL0<i'T_M00l;='D)c34chkGsdj_.`oDrSA/iP<dHOO\9Q<!FP$@E^V#_1BrM0aY0VQB+15-J%#PdW?d<T?#^W2CM.iFV$&$-lGT<hKGY-CB%pQ"_1(FsiRWKj'IT3c&/g2&<9h5"%SWaN6Hf$F$C>5A5;*8BMOSPS!SQ*skCo+Sdb%96WG%BkHCnFdFR0<UBR,B@EYKMlde>e\XrA\glNc2tc?]rU`6PqQ?*^FEXp72TI>]O(VFg5a/J,b-,aDN0QITBD/c*+?j#qHf$`d%deRdP\i9ZSaaJ41Q*,:n_n3Y^]1S@J]M,HR,tR"Uodm"5m]4=W*Kq0qB&?%(hltO_mRi,Spq*l7/ZA=%R&Uj8+`YY-ftV*H?!dG.%9apO[k.C;5<pB0pX_&%r9^M6&-Lk%HTak,rY>48#bZT>)jO-KkpQsKAme,U]qH%SR2U.EBaSOVB`NX]e^7*R"4$0[thsR\Smp367%f6:9_^$F%sD?Bi\frBI,p<p\'9)e\'Wa5&r=h.V9h6AV1f%5%[s(_FPf%1;qE:pr_8$)Ub[lNdDA7@+UCXkIl^H7_Re[LRZr`%G"%"Fh;q=taA/s5$JL[]G\QZ$5PMEgq@35$B<mo?1iTBuIa9X=pd:%p?I;X=qEdC=^u=lg$t6,O=Z6lc88A))5T+hnOrtO5I_7ZG+?0%q=,C_lg&o`,.NHZf>JT>B\Cq(*BtcmIEIS"3kH8:0.6+OfB4*@,Be?GmsH&RR$%9GC%'k>G8XbkVsUhJ40R,JqWCXEDr,ZOArW2,%4rBcZrjYI*S]R_-/bA:`Z0Kp;-2'2fq4,aJfN[h)DtOi7Cit3hZ`\jR>p%=o1u!A9lnSI_S,8.DBa*'n@jOkBjN?Si?$X33R9\Q-%=q8m0^2BG]XaOK)>:h"5D60m>Y?"_+(3X;4rU"7Z!ScY?qQu\=gdtBIM9;N`o1`)rL#(s,dTUm>qLUfh)\C%sDq44C:+Y26]:=U]%1qqh,4tRfm"Lg8V9YNTUB5@_D*0&,,Q27tgk;3j;ik/*qhUs>XRp,(O`q;Z1V539b<!o?OkW*ck*n1#OSc-d3FE9Xs._U<0H9tV(%d_Dm5V+O<PiWG.fru4i"k(>D(j&:9#hVftb.HlD-27$2Dr\\uF:%T0ss6o3;H=u+j.tur1F:sk).f'-toUf889)mLGPr>ouNV5Q,%)Y09K=->!f.ZLl5VRX^IoM]3o99k4CM8_L3!;_VWoYmud:J^_^5WU7beI%T*9cpT]N*83K^pFFd)gC<G2!rD'X3s=4s1CZR*$[(F%Ct4PqDpKHYF7PrA]!;g@NJ%)/n"u_`:KYDFfnN;4Oq1kXZ$ECm5,Kl!ejmJQTmq#J^Z\!<Y@(_GAdrmt%8)ef4d@Kin`K?B!3[pN%TDGN60lrhPfXR%<gR>hTUV3XL=#LqlVtCDsB5Y3#`^]0$JfLg4^`$H8##HE;Q%du4=p=qW"hAGdk;S6\0`I6_W4DR]p(&6@43\c?%$&AF)J&k7t2=eD8UfXJfmpN5@s6-*$M>8qa5+4d!PBYJf:nPL\QPn1qVUM@6Y:6C%'m>u$1RQS)2mW\=B?;!lSAOEC=mVk9Cq4JU%4ca2d=hj=n1H"U1pBMdc=^R5\;^sJ'ee!K,Cg*uj<gsET"#\Cf)\pG:f-ffKR30#FW>2*Eq_ceXrL2;KqUh@`Fn/bSq$[/=a,US+%.:]jdrF@I;Co?_oVV%^28jMd7g5oU0T1F&ucAOF,<o]kLR[ke$N&#MLi3@L0?F*t;^6m+BI,/PEn%T8m=3lakY[-LjYOp)1f*PU9%R&79F!\9@e"nt[`^g(DkBrfWA?Jm>(Y%4E%Up&k(bOuL$R4R6Emb2fMc6&pu%))*fd"o'"3KnR-o.gWXhX6o08lHU,YeK)oGZi^^%h9D<^r.d5%R@ui:^2NYjUk2'EF":2%8UA!\1YZL>>-386k:bZIh#ETcL#l$cpSVe!m\:QjMGE'WBl-_q"2-a4B<`a00pX<"18C;q%bp6:`ZDG4eeTET;I_BII?VPEt5^L#&a40B3:3a1_H?VC"F3.^+3\+RtO6KB%XhfM:I`ZKW6mf*:;jT^u>ipeR]ml:t=A0F#^D)6Z%O'$rN9FR6;W*^M\>n$S_CO0F()^b`j/DY'c$Sr[C@"kk[ISKf%*SH7:Enug%p1n[5lc;O(C"g@VEP%O@_fV4D.)hI;E2hiuS=XAV%TmiftS#o@aYZ0jb-.3\'(7qaH'i]"4P(M>O/#W.%,MA>dGQtI;]>hDrjlt":EF6E4W>/<q@;NFoVQ2l!e\5!C$HD5&g5@:n1.>5N%H4^=U+mJhe2Pmq7P1^C<"dK!A^mI)M)ktSMG>n(AI8Vk+r0,F!3_O>FQ'qP&9dciK8^kdPjHuhl.<@DSk4^c1Jbj\qKd9M]L/Gka%d=1@he0lWa8(In?^"l?JaD6sA,se:e'-eY#gBdqCV=,3D!5H"$&qEjj99SnA1HX8#`D17_nJ>:64_09-Wo^O6En)d<X``uuQ/<O;%rfPN,s,60Nn:p"N?YSWD)-knnrb(H2U7m1QoXVq^"tObIVsqjs_(rKE[<mfrI\\QeWMGfj/'+qI\ZZdha8<.gW3K:6o'p4MT%B$$%Z"u3P6#R-&Dj)_oc(6K?[7naCpsEA23SNks&*K?>gfO"f/"p&,(c\gsViOZt8[C[;8sQd:dah/[[dN&@ZYY,=6%9`BU(94;IP4o4%dKYkCZ2'c&Y=TrBR\c]W8IEqiM[,f+0^UJ7<sfcXZUJT9?_2I8@="$?><]JGBruqiqIP=A8P(mi7HePAF2'j+R#H!gY.^=%Y/rKi%5,aWZ8<Wd[Xn,F:B;I81)DaD2?lc7lKku1J"CS-cgN=$"WR/F+(gZFBjN4]Zn)NW!X=e")$H]T;;"MW$3f7K!Gnn]*!p8q-.dZD.%g?D"o`g:K4hE6&LTA)pFHqIh"fiup_.TM5[I(3nW68U]HXl?EV:CXYiea-)X%(gSZPhEEA`;+j(jimDTRcITaPr%<im6?6l;,Pk1%dRCF)MWsACH1UZ!SM1=p/4hZ*gZ+s2hX%+=;")8ejW+,mTCL%[GL+J*CT#NNPU:kA;)D*Sr+WU&pJ`_p/f##Z$;e*>7FAF'V$KLO%BbmOY]e/_UfWZ&alBP2u#UimRhAsGha+O-f-rJS7lh5cEKVDm()?hk@`VM0a>-p0?B<P:[6Ddr$E8-n2-WX*U/>-4LEQVnb%Y_9b%_hD&=KfaVNXb%J;9UBT9d397OqZ(dS5&@,0+\`mD/X`0$j<*Gp'%sY`I4218WBRq"kkgHep0*^)S37\8V+\M11X;G0CDr9_nC\me%ZtH4G.<DAoVft.R.Fa*+"Nr7ZHBc/R=]'2Q(A&]ljbEHuc.O?qXH1siS]7m;pWF#\'_OZ4e+cb[)N?V4<\b@I.f')@T/9lA@Y;p4%B_HZ]RnGIg<Zg3>!>gAdOsa:_Q88RQ+tCVO8[%K6^-=;1`!MpZ[3t^p%2Yr)'&4&'Cb\3LK.XkJTcr;SKj:O?)[>pur?MtZQE?5e%6`DtSf'+-P$Ku1g&mI4/QFXJ!b$S\'?aL/3]#K'<*jK*0asG9maa>1:C)M^#1tQio<eU,1/C^VM/#$g#EP#e60f^b^BCcGLeE&^<%#?sgq>b.JJ0r?.dC\pT5DTB&bUY4BPIAs;K;g"j$]PXpX6EDKpm)Ftuk(Se0&[.^a^Fitk:-BQ[R`V/H\,)M;`b)u%k;hGb.jD;k%b&0e1au0YEp/P,jbZ`Z/Qq>m\p`-N]=S?Yl+&;);FSj3Mr9F7V`mN5NH<L__IKWqSl5MR7:6,MBNhB=[2[gKiQQJL`Vq!#JU!&Li%bD6r#4,.W22hFdo$P"%AQVf2mTMs?\\/;gT#W`\P3*ZktG,6$AQPhC-B+/'p"J%RMK?)@#8'o@;^*."Mng!@cKk0rq])2gpm2UDO%V]tqR/^;rp:M8^-5Uend#I"0g41c2EOu*YZC#U9&'FG@-9h\\BVja-GA]at\B$.m%a!ockHS@H<RW1)W9PJrJ7E6jnke$f;%#%@0%gl`_5B=R7A?;G9(+b.U@S;$j,'/q:M(o)kSNTqB[OPZf$aN*@M:<u5PCf52p<R*Rl[&-[@>aM'\Ym#KghNo``7We%op\dd>].[6I%FYXjOYk/\b)kX=sCUBo^p+#:[pPIaA=LMM+4<ZH3XdCn8O'oFJHZ=$u0*]$'5&a)\R'aBTo`ED]4V&N?=AiBiP\*c`&^^tBUD\)p%)CG%pKdG^r/tHT@Le&A@e(/e1RXFA4jNg-N&C^LN`HWi^'<=B[WO_g_ncKa!>c\Il*j(N!s+W=>`(\&lb.;YkR:Hs9B"`^S;;fCX%H8C>_)0'%IUVNVL#ik^*?h-3T5B2(aA?Qm,BOs$Bn:@3Zf>nAP.3M5%TkSd9nGAhV68Z#YUO)aOpCkT6D*BU6Ik$KIA:EaZA5UlF%;(6n-G[]8Qk)#gCe3Hc;4lU>T)_l\],F7uq+)8aLiC;$Jr3@gs%9KHsX^8<E+Z@3ocOd=iH3`hpc/(6[/h?dt5S:[8%de,F5igtM%f$MR2Pa"5P4a4AsSMR"=Q=&ek;!M?);VUgfaI2:o&ODH4.t4qi$meY<deJ_7C,/03H>_?+K9>fh+(.'SLW7W(MKg1MLV/);!D+`g%cmtH\eliA?deV;)l1CZ]B!,ZPSpd"Y"pg:=@sKnR2*3"^R!GT[4SF,K1claKl#goiXOoM/R<K:%ZrAJ2:ApT)1+cR1Z#SH_L7BT5%=_'@KYOK,6:$TbCP945bQUN7!8\O.jF2l>/aLpga/M\0+eB862Qpp0-@f_K]0/#3We`,)ZTe/%D2Z@],NdQm08)QZ9?1Xri2`rA2%`#h2RDiqjr:KV/7PEESrd!?[`-S.$PnbXCu@?JCi4MaF,4h>uqRcETG#gUQNaJQ2Scn-e5n)VN_WZB>9MHRgecLCR_/MDRQo^Ys1%WbAoca'j/TBW9F@;.jOWHc(f-%%Wk/7JKuOlU$cL'T9$XpYN.BF"rQQ)aOmC7<:F+e9c/4?jOkBQJF;.>aK:1mC@S?]oCcSO[`(m%:Jq5ZYo&?Q]$nQZgt1.6*j4"R:YihVE%,G':tV`,i<K!Pm4051a$Y!&nSlB9U_\fB.i^-#<'6[?a0^Z4;9-Rg5$(5VL2*N#_dkm"%XsN`]W_k_sY*9h:Q^jCNj5K&kQ8&@V&_D4h>`Vfj4^Mr<Y(H!l[Ej03=CIgm.',ouD.3M00'MpH/[2JG':h<2^((OA=QRRQ*>eF&%ls3A[CG#*QGc;Z]I3,asksBcIO^,p/hF3m5=fgcC!F-b;+L)6pC:uHfgkP.P=7Z[$R.CJT")UBLX)l(tWZIiNgs09J20nagTq.Bi%X\:LiW]tndF\YjT)u>o@0k>5;[fKDf_ehb<$K$NSgtb9X'[iiLn%,35MMq1rJj#k_-XBftoX\lhcas5SQ`sogGd3tmFfn&j0h@p8%_\`0E@p_\COnrX2&ZK,,'9W.icU]6XmIC"77&3.0,D\n0;FV7\MWKd@+r0.iMHp=T*kc/\R*r1e:.9MV/1%da7B=VB%l(U$ZYhWR%[LJ.L_O4X[1KnG4:cQobMXbK^6mu=.4n'[(Ke%8.3-6R=Y#fd.P)Lk):914pC[1d)Ke!nKZ"1(83))(Pm57g!]PQcpB78P@cT(Ju%nj;<oip,rq2^*@8^(p:?_SZ<5+9-$:@pp>&0Hak6SHA([+W9DnH-,Q+LC5YdXnr)GjYj6RgNepK0BB@M%-EXsRhdh1ES#DaEHRd3%kV;NVFLOb4IJSl\;kIENpgX$W(s#@XZ2&)4@VfZ>NBK2/pA)nagr]@84rSl,2KSL6^qU@5h<NYjc@q<_dcl2$g!RFo^#!:>em\iq%:#uMi*@t=h(lP=KrYB-nnl8V<!7_L$S%="?q*$%kD#/M8F)gC7-JqT%]<)55)3kC>7T`VFf^1d[_JXG=:[9N\$[K($-7_g1@cb8X%p3,eX).Sp;!W2NgZW:caf^6r$nQn\]rp@r,0/LpW&U*$a=^J>eNKmYG[II`W42S.@^Mn4]*FW$qWH?TmbcJ2%^A0aNW)Sh^)uDf2%*+o`M>[C48?ROtM\*H.V:Oe5SO7ln_o2G4%q\+r5l,NJTNL?B")(AcC(\`4i3VL!V&/?-#o$0rUfP1=jC;!nj','ZJlc5fj]P1/Q%f$ONYBV%$):'msmJTn3Pk?lbEUe0pL][ga_`A6o(;*J'VH:]a6\s3"g?B:H6$;TF<G^hnY3U`^8HuUFjf/Mb8Er%a57Ho,0JOec.%pWpJ`3TV=WKO]I+s,ug/R8%/AdC_sAFJ^V9,bgU<hN'0N:,VKe>*J$jP3MD;"%:V7[8;cP*DnY!`e]U6RP%;Qc$kRlctL"tY'&R#%0m#6X=tEtAH0)ihFF?SA%NJ3@9p;qB%qE"BO/>QK5.$S;U1h-0?I0pRVT[u?UQ)-$@^R7@RP$1XNqtNZBY#2@Se4H@FYBBQc.k;K%JYMDWpkQL`@:[c-Br!WZ<-5'P3ho8/Q;4cHN[U>K/XDDcF,VlC/oCS]9CF:'l-a&*Z<mJK4IU0G'AgHtkmG@1NZacC/XC;L&aSt1%:4FKh31;IJ`'tbAQZe>)./t]jl-]ne<CS!'QaXAgF`^U1FD8"%3B'fG(""7p0!,,;_Mf\-/hNAAq<$`,d<'*-FN3/Z8Mj^VpeAa[%1mu8/T)tCiiR$r<i6cY'-4'j[^PGif!F0Gb"n,-eV2?+ea'HMH\u]No1LlAAV2O_IDcJ-=5PqiEr`WU-F>;9lF_MAN'n&$7pNq%.%0l,LRfQOH".gqEeD3B>A\5=WcCVAW!eXD`_Dcu"t\tVo.hAuEQck[Y"m*2&Hb?<+MomD0G[7T0g"r\3b5VgU=7GLu7rIWIQ7-n,E%,O4te.UiV*I-.RbDlA5Z\P%d/l$hj!07QBbC]'U4@;Hb!T=JH/"$I^:)o<H0T",fo5Io,sGGRV<L;Q2rLT`K+I-@`kA[^:<ga-$B%+YUdJT=O:J?9$jN'*BikNPFh=/C*7#-P9LG'e<H1TRH@Z#\&(&$Me0'$@3\eYJ^0>j.$qUBJ/rfU`8"ks*:N3<t7,B]qa#54bSB]%'+VO!R12%d;)Hh*.-''(K/5PU;JO]7;P-#92mCIug4fk+L*E%8<8LFcrBIBU3^u:C^%p%F5!Oj/9&g)tkr5It/c#dr)>\2O<_E,c%)s!R.rZ@TQGpdSgJ[Jah5[2-*=((Fa7ZXmOiaH3/)cj6=b2*aP(,h@JbVEOoaRn7LHn$t;\f*SE^A")gTg%^)dRC8+5_dMHVt\*c%X+14RUO0iHGa'iu*Y3K]5[s2S1l$OYR\!eX$Y8JqN?KjNs$2>,2^#&h;8dP$-?%3O[%*Ya[1$Em;X\H.)^IrR*oM\fA?YE<#hZBO%7/S@^bW"td%.)+Jk;=?EU>'X;([a'9XlaQW%EU[,$[9KY4r/G&Y0]ge6cTjsQh#mfL:Jtmp%_MBJ1o]S]J=!0ES"9#RL?'QStHnf%]&.iTM5(57WMjMJS;r/>f-;PHM)i9;*Q>l&`PUbp3Ps&PKm?%d/hl"=eC]\n,9QdlXHg6.A3%O4ep^2hf%KL;p+E9<,urXJnk8Da%E;]qpiQ[QXkF1AhgJ_?m<lsgi31ka:gkHWIh"]#U_O,R9=MI-q1h)jb@@,[0]=ud<)R8#umXbV4Z*7O.Km%$Y8%;=k%q<]2.kb([%m\.f7@To;%&tdG.qu+LD6BcGBR'cb1$c]\_G+H,UQ7Ef<MT<60S6is@XcaaodA=SS2OpD1fh'H?HIs'9-nP+-.RSsT(#sVnmf0i<%lk(2d4P;l](Y(q'^]6*lB=TQH&bTD-;$C#h3cbiJGdW$fr8":#qY2&[g9$[iH,YF.5/q4PgNS>N]H<WVWd_mj^/^'XX1G_6Q)5e@%:,J%3AV?qgg30<hmn`Nq[W,q7c?SJhr,o!%)2?ahq,s9?f7s+Fh-9%hqo-+agNkP,7[2QW]\(!VG%RT%`im(nbXtNnfCm7CX/ssg%lb%Go<XuN0c-Wik`,.l"LVmD3%.M];=-'YjM0QPpll\D-hKRX+cGAjc`)]q*?SM$8o:pAu'nl<+0-7:`)00aAp2>$?k=K9^PDuR2%2Cf':RTX@(!nGjK1],m@+"rUb<]]sRa8D&SVi=eX:OhnK-rm-G^Ks,?83)+to(^]j>qkg3I/S.OOcH%\(b,Df^@!tM`42B,*tgo<%YfKL$G-T>PQWA\Xl/s^WeRdHk9kcKH2!E[tRbQn2YF$>(DIf-%;Cs.MR54fO[JjF3ZC;!VY'H)fT[?dZq7#l.J!jlMJ88/^3B*Z%%I9Z$`[466f9HeVYW3hsdjf74:Zl\ZVFK_ULU<(o@L%XE&Q.s('pKb)<#P1:;qXW'd-=oYd^?OmB?F3;)eSh5905n-:>@iIn[s+oF%Y,8hQebOMu2Wj?b;q=HX*UVNbo'N?kUQO-BTB,=dPu:H_G^Uj84D48<]$qS5DWu>H^?f>H"ZXkk[HVgd;1QPfQ8&RtH!t?PmqAtW%l1<';CcfjeVOpmTqq/4uokjZ7]?bXQSNjg3\4%f>I:I@[nteF>hkX0/;fB#L%XQf.b$E@J=?2`,(GOMgCb#2,1K#(]=dc(:EF;l:%9dR9FhK%3)ZYVed2L:Lf==@R<HOfn0Z+B;bSqHBril2X+l;JT[RUhjKo)\qQ8'VDE2!OsHTq!AW?#TFaoql[VB.GQ--_X]8;-:$c%0"i[ma>ntIHpsr0]5V)\Yhj00BI=2+ne<aYf?%T2,M)HLSUO$Z-QoNA>W>YCb`2]\:94ZJLl0+Nb'QY`M?5=I"5#sZmh#`%"suP=%YTJ5_i%OB;PrqkWT[ALa(r5Q@bd,6!Ql#F+XQVoHJ/TZRN</C'ZH4)H@:%G.b!0hZ?qQ2P_hPI>j<@HO.?_em>-CaD9*?=6"-<#P%(YSf08,;_WE2.cE0@L7edRX+*Ko&9[=Me>5V#)G-T6QUHHnX`VHBbVK?"tU/PcoiQr.lEUU\?:j3^Z$PB/Z`O\pG;hIa?`s.l96K%?,(b=\%pfrL#2Lg*Q^0rGPtVhfBDXW8q5Hr:N+tght>0BeSh+mTi0b?bO89=%CZ:\rDKP-,^2W?n+u.XRIp+k0)2SV^9<bj/VeZ(%03;Q=)9)J^po[sWRo3)e5Q>$(I"*K\f6V#tGQ#ag,p..H^i#S:Y$_2)9RE==OE^ZOU@(M/Tpg5X07W$E`E/)\nIHM$33r%KbZFah%^L(.1?,-;C=$.sLR-+J_D[d-QY$YAE'Xo#*R\P=/k[CUqn*q-Q"jVVJDaa'aoa(OJr#T4+GQ%)*i@uQE^[#Mj.2e\C:+c?mf2(h)%e5uU3G7Y5[Y$ZX&$F>d&s/r!6]2FA]bfd6ZqW5KW-R+;"IFh8K8u7C4"%9!Yk]<14OY0l3s/o`.X*u;Gqt.$uOjiUSht>/G7D6`#%I,%*_X+(#^a#D*"grX5imW\U6O*a\^1T0-Xh1+3Iri:M$qFc>,q@+O3<odQ$HuWI^$k<$8T@pBC[Q&doT),Tss3gZbn+pU[Embq2%He%$Hb:f^-H[LH^_aGr\`d1b&M?]8T^Zmc)NB/NWqT\0:lIUG>OrJ5"q6")^;/)eO^0#a40.X?Bhfo%iAYu'.2ALVkYL%WD"laKZ%]VCg)c0G$d^;2@f?17:mIA^)fX+$).nI>K#?co?GJ\0D.IFg.0XsGXg_nPH'(A!d-`J/cl0@@mpg7E?2eNiU"jf@dF&\[LsJ"!?r%fMM&5))Kt=WaD?(R6e>\ht7r<Ha(8/rUL+ZVBl]OY$[c.GhGQYhGLrO\!6ci+))K8Gh4VK`.k)X&\RFrHXMTU[3KtKD^kE\5P$F?%n9=i:/=fp&[g_u5?ZqX[/O/j7hu4^GD02=)&si#c17QKI6]Xl6X^B,,$VAf"@*-Z0qC#7H=cW65YXN%b4XY&J0KBB=8fonQjlbuo%4pViL+@Dgej%l_'4@N[@gI5V[eQVfspO8h-p>ZB>qJtdn/rd&3&r`^)=Iu:?H>BVQIJ3=NRY&O+caRf4WpbCdR!l=5-_>b`k4@9m%dG96">$q<C@'0I#?aM_75-7s,c+BFPq'hoEC>4(O<pfG/NOAf5\?ufjh:OdB^,rT[gUFr!'<?bto&T`)MtLZ\ABOa0G<Ba@\/aD8%cHf:9=Vm^dNqLjaS[<k6:46lb>3cQup@m^=er0KKdX&H[VV76mCD7%<G;-=DErPKQCO^+Qrq69Oa4HfcRFd_QK3-Hi#E\d3#D\cj%?f0^A`lI+n]r?jDX3.je^YZa'ICf,q7YCi'^!&WdHTu4:=P2A`NME8+or<!@fKh<YK(+&b!O[S][+cEo=rWr<3V0U*+Se*NM^oZt%[HPGG]_o$`^-/*+[J&`q1OG"eGgiRsDr&P0f#GkXMRE!?lD(bt^\?BP3"IVrG'/bq\+F<]p0G'"c!&c0(rM`Z:Y,A6GX9[R=UY+d%\\rA`gIK2ql3hIo;;#0]Xsrc`7fm>`p"8ok4`>.c@IaOGDV)m7X[NV-F49U8,PH+np=&eCWIf]1Hh_<#D#T'64Z9cr\huD;B*.p5%rtFo[c(<7'As$uFZ=d5*2lh/q"WMf2nbu7"X@8>ZZ0psJnCQX*4a1tR"Fm!?iHBZciI8F3\_U?WA&kmPWXJG4M;f6LlZZhCnn_%,%qL20<RDkf)r9*(h4T:l65AM;n!2r.qrTaAXN4&H8eq_:XXo2\kbEj;9"ZeAVkYaCB53P.3H8hmQW4uMa-U+WWWt3LufAgH=J@-qF%0;qYhHej&\H1l+Ni>a2GnmF%c^7.ue?M!=ESG#7LH#pSi]Q.lo=P<FO-td#Cq9f3?!hV[2o[@)0*eU'imoA$W,U*;u0o&>45fR]C%&2ca?(]c4j76ln,@:Bc@(XTHM8%eE=.fbU/fGQS-$O>SEL#'Xn(NLV6n5$]f^ot(@61rW/330$0q'g(S#nnD.SR5U"^O<e?o/(a*%nTNacXfZ+GNk'H38QT0G%a:GH/Eg\@Z&(e?Pleo3$;8?5IuHS1dH8IGai;`^p,.>s')HfeMj8\Nbc]2j?8e[h[^VglLPq!eKpEW&%WdAatlM<iZgn2X'RY(VNTA\o&!c7u5ldW3nCYR>-f/K0j^C-Ckc;M=B^oUhm?2@2t'fZ_/eX7J[-_17YrRhDVG`.'"`.+(]mh6_/%qt%Im:&pIGk:XEeY"`na!_>0:`dVEPp*)3F_\q`&7e8h%rT3BO;;\)lguU3Too4moD`bJrX14^ufL)-fp-#uHDp@e-D3$>0C\-Fq%@7S)%'=37:+2e>u<i[X?S2+@grgB'mZG3Z+DB&]"+;Q%O$aDTtc[&M<`)j),WMr=kNu+c7;tg(`i`guIT;+8%JMP4-56,M!2$3<C%I<iTu0`JFfcTSI8CEMFlX_rFbW]-D.+::$J"%X[2Anfi?'4-i":kD\G]CbMo\U2bFp6.Bq.A.s)(D8*-h]8k,>M#.<[8uVLeSA*<%+^sI!%TB#K\[-U(kpZXl0RV`$<tt22X+6P[K0R0LU)3NJoBWU*8&Mrkd'7e-O$[5f*uc"=i2ZIq%eLtCk!lWVGPdjZi)%'8bf*!f%'3meMo5.`+3n'-?+g00@Hh70T_DOL$Z21(1NnocBir&VYlR/T73*4_O\Du:u4p0\lq$@\3naLK<#iP%R]-@B&+FTWK>5n5g$*Wu'%/\<TDXaMTN7DMulj)Ob/0fF*C8Jc%%bn*f_?@n#8iTKI=eE;bc'9G1-ltQhZKn,Q^p-=s@0:aH\(S&L3TC6'f6^>,j:"=-)h,AO0%'2MZTa[L84o<%+\$<_8o:<:QL5RB</M@`,&gGb1cKmY_*MB=0C?@@"D6*$R-l;E=9b9t00Akn#kI+5EY:./P0\A$9aAED&XZA9TK%&QekABgl]J8Qfogmtk\cJe`jGi=46?MFWt24&?O5mZBSqd$NO*Y_O[=MtiE:qtcCu013tk2jH8/aV%VBkm_c\@E>oG3n6QqV5qO@%.u"c^Q^kIkG'GI:H8<rD,@d/&ZYs\#XaEat@R@@#Lr]soK=j;;"r,AQp'*lHs$q``G%.;)kPp?W?E,9ho7'.f7uO)bT)U%P3S?!,%nbaI@c:aFM3I3O!q&hGBs2$e_(K3Hr7tbsMM_:U)W6(f?/&^D-O$"XX\83hLa$8"lSeXh)_njKpU<&4%o=^,j(J*n#/,;7,+Y3ZO%An2GOH1q_36]ss%nfN1*?S,%O&c:kl4P_cGqsGtja<rRjX2[HHkltt@D],fu^Wt_dQZD_6Gri?JcV<8j$hMZN)In+HmbkP2RFSRr%/FNHW[eK1"o<;)l#eI>E7>*$mX$?&;>U)+S?m>1>X6j,RA8bYo^FT"iD7n!ps3:;E-ogQ#]3Y=6/="(#Elq6eGu_VlnG21>dFrNp%h:t/Yk=TYb$QlfoqtTEe\^>.KNZ.rcX>R1f*ZInGnmZn'_r9nSG3#haY+!t%nso5VUh93TCio);j@6u;i:6-fq4AVNn;D'fG?aS%%:R_kB^FrZ;mXG$%@ID8:nRgH<M:O#V?e.l8[FMDJ5A7I$fO.9cItJ_MAaNR3H+u6,q-AF9QZ]a4an-kM:-Kcu6*&QP>&,TtEu3Hc%`o`eN_m-2C2Y70(1F>sR/]"f9,10J(dDRa^$2."XAbBX%lUKp!g:d>moCH\#[sC24`l[r_mHZ^-b!nL5J$Aq6]mKb@C[GgBH@>Yg%_cAI78IJb%W-#%VceaG%.G!1_R-39Q71H)dr=d\qLFQ@CfdfTdrY](X$_8`2jXrTA?hr5DnWuC-68dZ@g@j0J-C'^B!r`&J,&L1f%gK5TX6+(N3qBDNDQ+Sl_ip6/&@bG,1&+fW&fDtPpC4QheI<o55Oa1d1_rf)`jK<hc3d*W..JLoRro(l/Q63,/$g?<;9tn(Re_-DK%5j#:`ZOOIQr#(!5d`]A;RDk<e1rkba]a>Rd0EM#-gPK#'mnhR1Zp4sZn><8JD5=b8Gd1>BNi?,^@mO<8/]RISl$3er_U6"kTU4QN%OXpG&b!Yi6k/5$cYM.^Up=Q(8]h6E=,s9C+:OWp?0ItH@f#HJB'%=uRjd#V?p.k!I^N8nEZ2*EqFS"J\jji2`fBWMHHY'8Nlhkuf%J'Y[KfsrVYP@sB^[H14;Q7n1n3bt?gOhQ9Ii.T_^!bGa<5kiqb[U9qZaLK^;^KgK!BeO(r.dFh2[B],\Y3]ZQ0E0UB:9B"Kg&8E9%rQmS*!Y>?M>$8>78);p+dM9L`-b0Z^+dsZJ89Emba`l\-4VLcYLm6#PGN/q38[O&_JE5B!9WcHZ$naO8hDA_ulegU[cc'$q5M;Kh%Zgf&VSDXfm<U"TB,F,8SC4N$c`@.F^L!1@ZJKBUnnlg,-JXniU6-"KA3U>q-gq>M6gT=N;-JdXmC$sWVZFsVqp\rFL"^r.G=dFQJ%Z^a>c!a'h/qhu4?SMc6Z::#<>[##U-61^rf_`C?3\]alTCId`*9]jn%\M"CBT+[SG=VTW^\o$RZg?CB\FJdctLkBU*cHKnNg\UCf%9M!DGdfY/(U#pPV/(@OGjr.:!?t-4CnnLl:ZF\7^.goM]p;Z?oXj5tJY)[Pn]<`sG8IK`8a6U*!([gE$QY9)$m,X5Cc<:U"qbOQd%X1*"sP5Wg752"[Ff"Q%R&6aHYb6AUK<-q<A>sn?L;`\s%7QXo"N^T3XYn!>Rc)B&iPITuO5'ehj8'8%NHr!pIju#dE'_,,6+I!rR%qR9CiY<IF@7dk3"1$K$djmCW'9pNRP.,.pkM2C*VlZXQF#c.1m['HeCA1Rl6HDWqH8sPnjm.&cfg9<Oo2l+^if4oHBkYT,79.bb@%r)8K'2EYbj+(VbN&Moasg-&IeZ\;"6[TVX!Dd4s>VI)9?l(1tY7!ZEu`]3(](fZ3*?Ie2hMQ.$(l&V,?R)?:EdVl`s;(4$PhV(bS%H45D1ZZ9Yre(:9^EoD*=c\geV=bm0OIo%CLFOGY4,c>q@X8^!\3PDQmqXGXCan;-#s#H3(.?4?`,!!okOn[1YjN(\UnWMoDa/&qL%9C\:\+cf8(*1!mDUS3]@$QPHV9cil8o`$J-hNTL'qmfgY]%674V+LoQ_a`hN)&)c].ug%1Vcs&f7]U'dg&G:Gs7gLLQYe*"42)4i%Hphb:V(##@[\q<VVc)VciBsZPG'DKICHg9QJ!Ur`3o-nYDm,EBb:N#aUjZ15K%=$?O;^;WUTs%b>'NoMarfPkVuJ6[^jl(:IlA[3%2Z_jOiQ"I`j#97'.XU:5o!]]Aq&4=%0"JDp[;FeMHa[:h4D=,WNWmre%_Qfk0Ycnn6(!MJJJFYV<"3\+0"\Os);o^DNFU9e]2i0Z%?pkR1>Uq;-Q<_V5=qT=%<^"XGEh(d_7X","AlW]knZcm<5'rO>WObn,eRqr(W.M65[N2BopK_S9FMeF_ZIU?NbD$(!olfnTf2BV_%<r)u5=EPX>\&=;D)Bjqt<A2?e6>rF9#JdCoXris8a0#W4'i:gd^JXg,j>q09E'2\DLQ^saeL5P4Y.JRN[6;k!'j<HD:/J@b0VAan%bHVA[X0LcuHInoAPT<]SSH+gs2guLQFBj^H;q'jW0<eh<7HF;%LQQ/Ye2ulQDmLl$!gka`WeOWT#ClLiUrKtja+^5(DSd6#k8`\*%-%[iX+km*;Fp-'5I-@F0%0@d\Tq@ni<h0eJN^sl$6o]0DYQL=6KVF!*Tc7Da(rX5`$*eoG6:>YEK:Y*M8h[QN#uG4JgJk[%`&:7'%KpXLn,RUN^d#MN43F4S'T^42BR4sea+$h@eP/GXVs.%0HHoUV3*S[fQ0cU$."d,S"Y1>b+C^EBo.tI1R+$(E41rq]nLU`)C3:%5"%YW;h!TmWS4_ORVJZ:1QCQt=<mIcE&g4m8^M6PB8;D#t7BW96K[4kNoI$*7n&@D?*[$KFDm_!UB5*fY:&`6\i!1'A'r@1ZQq'Y"Z*%>ZA5)!QJa!h@(UFI+U\8<>74,o=]YcBNWL,KWn$%+-6t;/;Q_Q%KdiF+4L,j:a#aljlTJ>%f@EpARPU!q69KoS)V5C=][rD$l8IT%ZFMTW$1';Z)<1pS/`p/a5SJk[MN;B]KKbC,+2M?3*];_*GL,.rc)Ma\W7#hkRT2B9:mrIfg)R\c4JJ7*#di:XD0&`0(fE"IWBo`m%H8>O-S03AJ[agOU4nLJ7,F4>^&.m%(_,B:n'+r<n&6M-N@C1I9>+ju1qh\/e)!92+fjo=[T@Crefeg_Z:h$jM,.;iK:e*3`YahbF%MrOm9agQTV!b%&4"HjC#T#7#tU[&O.>.Duln_*BHATLJnQ#bQB#tjo#MbtZ_MIKVQ'm[0<quA67-5"W(L>CcQ_5f#ka*+I_F^=>g%ba*07b"&m.J_e\C'$3GX_/=NN2Dk-NHpKg#+PdUMr[M-J!Nfm7D(tXE$E.?+isBeei!r8qNFEfKa,Poo!>YfU5c"^/(fI@fnCTo6%OF^7:>h>`/_(b^p/%LlTfGF3"7KV/697&k0BI-#u4mEE^^^lAu!?3/eD0&JqO`im9:V[n>@q4c>+-H$_[3r63E[.-,!Fgu#,S8+2%XF;;D0[o1T#Pl1B!fa(&aS;i=UM779I4sT<aIGQ<`$6J`YTeK,?T8]06]N<ge%'c`J@S^'euoAiYQhen0sM9kW0@Qm.Lh39bIFls%oC@lA?-0NER]+3[)Yk?\M2Hu!TBSnJ>0AUe5W9sc/2>p71!2!8d3Uu,6l9Vinop,0!js5A\2'.&0CWZli?#-VJL8BJ#RfA[;;+Cg%*F!?Z]#Zd7.)GX0,Y5^L@?D/>"jFic!>lAJQVr*[a&;_0'd3VFF\H<"2U;W`+s>)>,$#d>1P\MhMgV'@%$tmKg,4i*1Dp;JKc^kU%O!@E??n)6;mm03\"H&54S#[fCH!DhTClcoL*tW9TOYpaG*a"!6Unu]qG>Fj"<2*VOkfA4lUcOG_qG,!#3h`*uG`4m9b[WI)TOS#.%4XNo`TuZ:"(0Eh2SAR`:Qu>4]GSc!g':T7liiM--\IjfMY%@gL^gXO$k?CUuMJVW:aqmh:oC]qq7)XUKYV?S9+"fS77Bg/b_IgI,%EP7b1GrTjdPo^T7JSDQ%j=.<g""*F29^8@/7gd<QK2%77WM8MM<'"u#T/pKXO\IDM5nF:;%pas7)+n;l^l;`YZ?Zo=Ls:C-Z45'Z%D7a&#+_Ht/_Q/>@rDK)0.A<P39>lg<P]@b2Bu2u;S2#*tf0)sm(aX;-r5c0<,`Vt3mMZ9k%cq-WRT>7A'*&SOCdLB6$5J0GJCZbP%I:Xm;mX`CcEff22\33\V&.%>!%$n9(VZK^:=2%^u$bRd/NVWWr@llAC_'3BkZ=;Ve#(deSjl71q=]36ZA=9#-":a=bM>8D$q_N83%@iC_EUY)Oj2G0rBD+*5,&1e4/0*7jnYo7%WkQZ?.5[<1o,[`*rNl34:BGbZ'9ug).+h\[OW/[htV]ONuJV^:,=NH^l6@=3Y&HR>&%Rr\U'-EpuC's%TmFL>6T3oD3Of&n+*1e:l6T#rDU=VZUc,.,V[@"/1pYk:t#6'W+c+T^>%/>'l5+@)]PNX+9'.7?nD`$2u^H,_".%(siJZMk,D0S/)^pbDqF@,0eiW0pe:]&FiU#66p*Val'saZXJ_sZmgeF2IBAO3snMOZC'>i!5:(5hprG!/C=sh`=Q8DI'"T_gXlu-%'Xi_n#(MitV\&'T.p%_K=NBP""2mJ[8jdu</^RR:"H*GQDld2O)aWgH)8\lA!>#gQQm%+N*fdJ\ajpoVN6Ne-C'`j(3^T,>IA::N%X[H;OgU>#<.H&ef+[2lQ$A"W<pu^)1a:"Da#WRF6L)?1!a-[!o.=<_$/QS=186C3KMWic9>:;#6=s<t%:otT\fl7^?oq7o<R40\O%[]'OA3=:>Z%R![M`0a\!E$"@(R=QW6jqm+Qh;%5qR+TV;EA"PZKK)@3ZO8n\R*X8RdVrHU$?2!8*Z#jV^fLdu%YZf*dM&>>9VVu)%&Zuu\JWABf:Y>jTbp,;G9udAm6+%FrH__BOm);#[fSbbE''c4)_UTM=+J<F0##3"4]<SQ;K#WIPW"DNbaR#Qs:lo"N5t`L2\@/7A%@dN!N%3"S[3a"u#a9lash%EQn6H;>@O-j?'$=f'I.Km_g38i%l(lZ$>O:=UqptR%pMBQ2dJKHphOtAan#Z=%(-<)H+T;%Dq.(%-<%4WTBI8Ib7t%,)GBA8BPrJ1H'kG_$XMq?)Z3d1J7Z3_#TpXAZbem!ulL:N.qZLRrF'/rs->2&>C3j0HKL;.C,H4VdFc<`4a.(/maj%V9/8P6mVC9iXqC&&D94'"jD@iG,/TO&j^NjVL@=/Qh`gHnga'Pd,mV?$eatAJ_7l##JE7\/20JMWt,W`,n^I[+p7qb5QilC(aEHc%MB@S]rnFb=ZXlN8/I@H<Lb%0tLmLB+ToZ'=0+_A#a#mb?4Jq]0E["3ZQB$_pN>TiYCt(Bd'i`1tQ]4,!C^-Ku.0Ri"R@:<,iqtup%KoL_e,6<uF'a1<!OKu&uSFWE=d#Js*oHW6Y'Mm.3Z5s&)GY0N;T,&JGBS2$Dl9J#$0^G'72BHf_gQXqL.NCs)+r;Q\822)#/cMHh%OoPeNcU]4)$Y)ah'#u10LW!)AMII[h4;:"2"+\e:m>BR"(8E=KW.BOG%?-\1"ZHLhHtbhcnrb7F=[aTHGtD>9YEk_%q7qPDf1Zm*%S;(ul/dti#/V%PjP'"D<o)Y(J=1rP__oOa9",uS1>,kE'AbZA<X9)Wbj-WPM%_"CU%`,ItdSrP0V9hPG8#2':75uVtd'_&Z(>._+%D;@O-P,]RG%#paTK:ul3@G<<</7oanD)YE"gR,-2rKO8_0%EKM8g1G.d@Q<m,_hU3>VfIpXtZ[kj&$%a6Nk9G54Sb"Q#&GN?0"H^%62;meBeY]U<W\A:6fNl+3f?@gg0d;MkY].;3C:Nd7,96q5fWrQ/4fp&!437ZhrD@NU^7+Ji,#\9!>>3OTFf?0Er2k/,nVjs!M35a%Be9PKK'!'!O%cuA[!og^JTU5)C*A0r-!;/%>02_Y.ZqWoFD-\*El4IOJZ"CFHpB`&Tps#7.tU'm]RWWs%MBX$/RsgE&7cHYR]Xra%;h5-E>6n$[>ZV"Y`b7(CLEb@N-oq,hhAr(929<_8/imk^a;%DgSN3WJJY\S4PD<-;,@mZPaN#R3OY9*N;7J.lVn0)lOA=5#HKmG]%!'9o*dl=LAPQQ_9bR8/QH]UDnOj@XD`\8KG)Sh/Ri-:Fp<(U8BW,r4eO84%el\9^89+ZD3770G07$(P,V-60X;N\X&$?A_j'.Z8W%/$>,f&E$ZR[7T&`&>PF%@IFOcIeY45X,[IR<aje?"b;buLen-c7L=)Ri5qErWkeIbWIb`E+J<e!SU(NLeI2!p&Mr9Z`UHeVUGCa9%IUJYEQtM%^3X3G)3J@cL<tI,S[5)nS6s2VdVMneA`f+1a_ItMDZ)nUF-n=kV.&bn36<IYKSs7EWLfb'nVCinIQ7`Im6^NIZne&HL%VNm!.8&UWB9JCcXLjH*&%UEt9eYXKX>sHj%4S4>M6;2(VGKkCM0Jfr!#hk3FE316>9a?O?_CB@1hb4ahgjmPcE.o]%Q]CT%^]TKc%+"%)f3>[chjH>V/EJ79?EU6LXp#q2Cb7u@?>TnE[BGRZ\%?7MC@mZZ5b>AQI[ZI<S(uj3n\!mX8'5&CeGV,3$2l.qB@frmaj"b1J%,_1.NKh[LO4G>0kQ]CTRo7\P$>S9m,/I<ltQ<^W1\qL,u/CI(cp5?4o_7&@H7@CX7jqBatKUK;k7$tG/VO=n--Ho[[bcTsS]VQ19%9'@*JDZqli/)fM-`12[AnHXpcOVB8XKRAW5.1C1?H+#HT5\k3io(5mf20NK;T\qcnmoi/Y=?EdZ65j0u/tihfhU4,6Db3DCPUlu/%o2ZY`;UQSA!*B^qhM>ZP</qc6*\B'6_GJku:e#Cd4Bf'8Kj6o-4BZl64VaQ:qi4^?O-1iVnd0kp+Lsm6kEMrR56a;]^@5K28!#!#%<1h+UHA9#6j-+l3`mfq*2b<7Zga<)<UhGo^"0ISgDU4:2#T*A-ZR?F0"uOL:k%^4)a&Ja5&DD"!^o0qcY*K9Q[#Ird&A*,$1GK/g%5?(<qoHUVud2Je\-pEMjq`'8_,0I5L%?e'Vj3]@.(m'Dc8B@=7=S3;jq0\+TEqjrOY*plD4K8-Fao_tdXs`*O_*p[M:!=&EF?h!;%#tTBo0H:?';k_q.0g7m0%lhBj58bspM30AWd'FaH&RogPJlH[unX2Ckk9CD[FEjHb1GP$o&TN5g;,RWpdV7CH%\!q@C"XuBh+61R%TIaoY:J.i0L#c'9)+p4tibdm^bfjMsJ&S*L'nZoe*'sWbQ(oS&+qS[MQmVtG-+X].m"?d1ao;Gt&>rZ$JDsuNnSj,%=B(r9^gTt?%$KCAOX3P5#'F$mZF-'+)^oF,r2&"Kk88X=dV_YLLm/rW-SuqB[+8t[3Oehs9UIQo6f4(p5\faoP",VtgE8:lE)m:f'hF`)4G1rl2%,8%1b'dg@>+L0t<WrL]ocf3M1YsM98@`BCKg$rHBJ@\sVUD#sZCl@[L'L2(GZP[`@MDFu>QdA0i:e8qerU`1-\]Tb0@EaC2XJdkH%dY1jLeh57q,OR.7LdNLu\KV"Sac3F^a<g"B-a^BB.'XoIGei'BQ1C,.>U/gK)E&&!_1pj-55=X%Fp/t"'*S!<Su^rZE!?-42F4?I%C,H,+G6UmC6LI)h$c:kGN62]P*Bd,IUR:m^oLVB^gSA])>\l_%bWoWqKI76#R;E!;h[^RO@AG(Qq-b08e(#t,fOWM<nfs0KVu\&.%`ul:C!!;)?QHkWC'LF$<@@3KDgS+!n+?+3ie++I^ks-6;!YfdM(l:TLQ+jW5jmJiN&_$*JOGZC#abib;F@hJbKXi&V)qZkY8kGe[%&]WlgFRt=+Z:^qHBlf2t5ZUfEa@.=CJ4UO+ptd64&iVKi)F-VZ(QCbN$dhR%$>o3#WtIG:;Qn4L*AZU=Je:8l%nf\4`1`ZO#SsQs%_'_T,cGar26=+0'R2kgdcQ\ZC:.N5M/`_D]i@$)+Mun7ZR2ND@F;(\e"r]W\.FLd!,,%f7K"[4onq]\Bj=,bI7@m[4&NOa_H9o?,%4Aop2iT9K\kgOE(P8QnSX9kRSf_Aq*dJCj6P+Li]#/C\j$4>DdXok[EBU>tN4m317YR6O,K-kkrR$4,d:Gq5J#:-`nM9mEo2:`Fe%EC[1BTH[f\QDn?cmP<?cN#lA=D7EXBq4:7o7bi#O<](O&$VFkpU]SJmS60,p\2.qJS-<T4A'H9[3'*]$M%u],RHNd,$j]sKZT0/#%G0K,*^M>:cf*HFLD?C>bA4E8)egF&05b(pj`?9:YV.#Ns6(;Ae="u-n+WAhX0ZKs-N,!kV3]\Jd"SRg%kK$(Fq%4_Z'8I=S!gVUO%\=gf>3S`sK$Z_I:NMqfb&1r`KCQ-L<W95]Fa+UOOp4U4hkQ:8,.0OE/K/hDb.1#Tnht>0m'5G\Z/<<RN?ca)X^Q/KU-;9A(Ra"]=%EQI@bO"n__DBO<;.S-Z&J34[V*S4$7aUpDgLRlZ/C*BEtl$u-s6k!*TLo`N/\KIpY#]YmBmA5J@Pn8j9^<:dOFQqhgLV+lC%io,5%?p7AtQH;Oti#0JT,S2Z1.E`tZ<+4/U076#ohmIUFB4Hge"GYACZFD?;H/.>9V?ZJ'6BkgX0([P$eI.1n[g3Q%6[lrR7i8o:.,rdp%#)Mq?Ga]l&B3@6(?j2/Xn8(]FcRb=be*FPj8J]Cf?D9Vc@:\6E;d&0V9m.]75^<$K5(V+$27C;Y/3X1^="+9nRDThk^r2>dF:8V6%./*Q%JJ^IhlL`sjF\n7<`"G<\k3'+!PpD\KWT$HAj-XgeZ9^YU#4+%(@YNLF]mMTJJ=lomG+$dgr%s\#/'@$:AfCZ<ZuYQC*E!<5%6u94L`$tr%6p]ecDapN+J3k+LheKpjkXPQ3R%6aj_0'#\mJ/KgHHiSu"EOa`]1l)?#)16`3-:;#cZ'9-Hk$P*dNhT+Hs3m,-W"L2%M3K].+FZT<#n7900sd`e*j\B^il/?<5d4`o/:W[f=cop9b>d[+i^_.IJV_KCSq5%>:5cAqVNM5L'.1T?',lU;PL-((QKs5sUVSka%_CG$-!M?IGj1CJ]IlVq9/SXf#=;akd'5C..*Ffq@a#>T=_/P@gcn_sk)qS?UBY(s<]Ed9O<'dalK2C1nCn.^Xcl*$P)!L*G"6&eN%ATRcG.<nh#`Dp:"#%\O3^ij!n3+2d*gf90#Z4O;>Lf%[ffV+>p<Pn;]%$j3s;RiudO\&<k.#`Q+!a&Zu'%L+-@kZ1[Bo)No5F<c0%:ICp#BOE*0,(`+(P+PWpO^[0J;l:7:r3NGjK>`r.N0TWc(p'2t:DKUr8uS'jBg2Eg^.=fCb#B"I^1`>0MJ*hFkP^373F9e.1jh-T%.`IAQJ1^6*ZP/1'06g+:d*eT?3#)0Jl'>8%a5,Ma^dC#2"6I(ZL?K=>V:#rT;)EqFKT1@W9f"KK'Y4nK-B'fm22/l.bok$qRR!A?%7n,;q@4%J&R%<dsji,(oj88]6,N_#'gIS+I?!V`\TPi@='e7!=GuPqb\T+Q`FFa.0A6Ot(1e8<72h;lUTu67M5+].o67;/PE&o1J%=<k#*`E)>mW?`Z\OpH83:ma69W9KZhL'ZNFW9MnFV6]?QbQfHY_D"#D$^XOIId!ODkQVNdihuI4jLAmPKs<G=V^HM</g^rmB:lt!%2*`^O_F,jj:tmNm+sbdHHlNf4))e))F-=P?=WuRF_4&J"_(f^d-B-Y>_T^P\:is-6ZnC[$TOF;gV%s;K&3.Hb$Dd7)baq[AQka<P%+tcfk>coFVim@4Y5Zh0nDeq4pbt_kUk!a)/j9Nct3M+72CH<e!:()pb/5<_&&>_SU(d">;&K1i]6e`jGAB[@n:3!L4BuCR]l<t=\%=L5auU(@tI:oTQ:\iP0Se4#QIO@O$JJd0#%#n7L5?"$"MO^Td",$QW"[JL[BEgci01T?OmVpi^2ifLddOD.*M'Yi0Qc2iWLVit&C%kb8:>fI2f79F`3BhBQD\[pKD76TA::KU]*._%gI$6]EY]!2Ddr!Cp0#JZp^E>?kFlWT9rL`2;&r.[no-bMpaI`j"+D/Xe/S,TIY@%Vt5Zo)MQ6?%;HXa1R04=81AtH_EpEp`H!1d'h7c7L+O0.2#Z&`YbA[Vj>pnQaE*?(E+ZU%QnXb5E2USuqC#?<`ukK.\,h\9U/f5G%ec_J&>?*.8Fja:lp4]'n/(:\3M4d=uiLn*bB79r'\\qb3Nk('uL>Wpmq$JTF*#mFM9[HlMV5%NLBl[..U+QY9aN+#t7d6VEK19-#%hFo:^(msZFqGA;fD$^jU-S?7Z)EU!"_/!d*rM0]Pos%0m+%A(Kg9EjDdO;t);1RkrKEPl*+LNoS&'5Q\N,B7A[aLV$0r$X]a]Xoa%Dg57cpUDDX22+;g"@nA+n?d'*8.-$:=^@i?5RKa(\NNE+82!E:M*g>DVkq8JW_iF8^e5b3`tUi/g'8M]_c#_).nN*]aJ1H'Z*4Co%IQ!o#FmLb)>I%`JU4>oX+EK@tgU@'bXLk7c%24kiW()m7pl:Zfj[\P\K0)XIU0E7,N&S)?@m[hJq>*uI;2(r7d4mP$Xt,*]`:1?C%3mf=k730jMYHC[e>:YM/;ptum%G84qQ7?E/PZg@t:`YpENn;"`Q7e]e`@Sa*:S'oJ&7@[2j+Dk;II-5$,nW$#'%:NY_RT1):nWI`%B_taPC,6eGd3qD!NC:>TOB*SF/ij\8HCBqprebU'!P<GCVbqIPW)Q=MA*rJ"YEU`sOBbOZ<"e%a-+`Atm$GY$mq(nG6sCgl8h#]@%`Z!$eT*]:["'?'<Of/`-!Sj3-#R'4U^,nbI%7#97r`f.1#tVF$.n4i!i*BP^XIk+nKPq_tA/%KH!/PRXSh,,MKHn@H3((Qe<1RY.%d\oc(2NhH=%Lu@3:UXZmZ5aji^uTo1]T?i\"JSMNM"8p?0dc6Z,-P+P7(CDOk*)l3d40ii(DOHh8jp,:/ld]s^GRQ2GS5hST1IW-%\3Z'K!aVFD0a`l6eBmB:$a_s&>;65QgE\q-QLNpofU2lF?#IqVB,Ti:i0$*e`@QZjNOi)@.tK4nAOX%GU]Eeq;phs)%><pIbJl8S%r725'OGN<k6Z\d:4F0-FaZM>L6:>RA`DOQIeE"]k*U+8"nkf&N1^8)&;WFRNP/GJgn[\ppNmV+='SO\t%e9h[$:snY\ZWeS]!!RD%-OSq;%V\2,EYWW6o#8=YVIC<L[/2mb!jS0eTOBa&e4%=;oH4bM$%VrCGW+]G'_=!l=V)$(Z6k9uRunX.e^6rVaAT9t,=:6+Z?lYh%HoAU2a%.K]asI4AM\i2A$=K4rd?TS%WtE>Qnmt9YaPqmXC?!5o6IpE_(<?25>r<YoQle@q%`\3p3!Md-c/KLgDH1\-;qOsC*u:T4%iEP(g7Q5/a'=-Ug6SP,[I'^1Z&of+kLBcbCZVlMQ9R";KfS*GkR"cWSX,gN:,WC\#,h&l%6lOH=8t/"a2M`%,$WfWCK';JX#"jS.%k:d](EIpaU5D`luIUYn=`gdaL'2-!u.HCtR]Hjk;S(/Z&'Mdm:N<h`+`@*tk`?OBR_V*.A(DMQeMZI4gFN@3^*YmTnm(,ZFgi`aB%a;M5*UO769,<79KNhQNf:3\\68BE+mY@0Wh85oj*e8Y3DTRcI?]\+Hpf]gNmN'NGLI!^Z(,mGP'7MR8qf^UjHFXn#`%<;e?;ugOJ%]dCUc=JAp9MMd!jX"&ME`JHcaBVus9],5;Jl"BZA=sLtr#d6s?$9],JXQLu+#"%H5QB,N"cjT<Ko.6d61UeI=+dGK$E.k?2O$s1c%WRuMee^/:Q;<)A$oJj#Kf]#pT2G5I,EVCdr/&D*O6Z-'rJ.iH#GkOt&:g)I7]'E>tGYs-,OrRGE0JlWS3Kc\,Z6b*(\8]2(6<7$P%blb3nf^4tgm>lqJV.nXOGl10425MFfg0S=84/rKkCo.PL='oN\98$s'HU%Vd7N0V9H>,bPQ>W@I^;RCR:VFqIquRZ*LfikC%.db8%Go1\>W3;k]Lj1ttb+cLWNE#gN(9Jj=E&3`qE!aK/-Yo(d"jc9h>Yrq\CBD@/7:F&W!MpCOf#GkO)[RMA*'KNW!a"8:(qhL88DX>$%/D=W[!P:9c9*MCiT*G'B:EMu99JeQR7'=mr=fWjCohE>;a'a:Rm0\UpS61L748`1o)()k(9uf4B2\>+eN</Df="jngAU3:@,ajP,%*YmF+.g$g9>di<Qi>V!ekj05*fJt4t&FijjZHH$i:ci6S7ZO^Y*-Q%HQHH(\j&ejI3^Wb3j^X\9hDH;e%$du1oaI6T6cAB>$?Nc2%?Um(KO2TG;`mQ+"`i;qqh0'"/Fp/9%=?9_%Ca?mP/Rs4]-#q>5!tl<&Tp\Ls]YbXShF0mtO*NBf"'jG4>KHk>XPsd[X+tMO"VgMX%:f&,V#q"fq8dE:$=.#e6T"8*$dSc:gOt(uj<fB<J'O_5WfSdZ_1^kSDk#\oDN<9`IRGp@Fepg-AQsE,,,Qi$@X:I7#9WjHY0fH"s%.Z?7YW;U<LKN(\tmLQVf.V'Q/,)S]4eVL`PYEP8S\A!i"^<Hc-j^@p;^O]F\@i1UXn%3#-+q!D[$3Gq"$d@li<5p]7*?l)>\tD;c%7$t'R`%Ua1Zae4KNnuW6o6>r'njC=VLce:0`t9j1K=N3YO`[60'+QJPAP>"O?/HHR-k*uh7?""ck4,"!/tsaj.0-n:gF3caLl0%P%EQ%oD:Cn6OH+QDmXtqc"0Cj7[io@/AO`0T,^jLES%nhUXWWkMtn3(nENZ]gc_]::-.\"E<C*fQl^11%UhbI&a6sL<:,>-sO,+:P^%GF7A^Ul1V%;ip]'!FOL=,_Uf1G<+.]LggAji&$*]SO7VFMVkJjKRs%jYl-l/1_Z=j8&G1[he>SM.RZCWo/n4>LtDaC!J1tL4$q>^%.q1UUHF3J$fa8ppl`p;B-:'hS8uL3.pM]l;J.QcAIRm,?A/cQ%I?3:=5X%7j_T7N;M,RUe"pfp8$_?"GlaWSV>J_Ke96XT<D3>&k%r!kL,9e+(SG4iaF4%)"Z6$ud+ke7fYWl(%k=MsLH;HKi<pFZo;:1+\JY$rP\H0Bu##^<5t0^eh!#j=.7LB\p_=f\7tE4/*q_&0J9%O__<bGRV@V?j+F@\6gObmUuba?EB5=[aM7m2cK7S(U*m'Rm`*(F4S0Tr/u/IW`gX+?JH[_8PWiA(CLfTiJiUE%X=@o(^;!jM[D$T%^?3V5"+3[36r$FkI(-N*_\K"pfs,@u\A4=T$AAO0$c:X8`5+?=;/"m.os5]-kWUGt,b.SW[5.JA0@3K%a^HkY*;pSG3i>8k!73Mn%\GWS)`@L>H:i4P/'XC$C,Xd9G\BMcV`s3/2J<"E*3Hg4F=H!&)aT2P)&8^<3b+2*Yr\4b&0@1iAHFgEhL(]Bj%IS%ad<i$>pl'`9%`K"8^L'VE*\p,OPI7`t["5al\HD3&AL,/U/?mTF&LH]P1QP:Ya/4]F\<J^2lQ'g],W\D/5'd2WBq\okq;=7)7*KD`-QP>'"".^?$%5S4S;@d>4'%3s:;1gV]kRL;g7Rj)YYPArJ>LSR5n/""Xo(Op.uJA-7pCh4mn8,%/`;F\cFf/;jB&@O>/U-)!^-9Ojerlfq6&d:\%%g>%f)"5AM(/(4W-UcXa>1s1pp6](q/"$E3.Z&ZDR-q<d4^anM;MNPN"@&1)Y]l<D`*(^m>*(^mB*(b:3\W*W;2'e2e/Ie0eMdF^A%=H1=O3QT:#pj<[U%2"8D@=jVO"tF"_(V=loVXd0'NX/\4&J;1=0G1O^8eN9T3l6Lb,UC8CA3hti5p7_"6-!*s!g[B-HLQOQSeeu3%kZXdna2U\=+M_B26)YrCZ3&'%@i*YEaIH`9AF+o.LtDlbWRqB.M:dO/if?1BW!(b]Tl$4&$Z_0(;uq@F7.Kn'jIsOBF9,sK^pVET%&n.IA#/W_D'IH-_0UaYRo[!aj[jh.l$<squ.G(Fmn<*ph@8@h1+s0lCfFq0LL-lhgAOh+h:f\ke)g^cP3l7IHOHG#JQ+[*Nam4Ju%PBent?p9@Z:I6V]B(dSDb'!MCK$7,(gVUDANEJ:R1J4?L67YK3=3&p0l/W=iBaDlu#K#YkV/jMVs0<nO(iklWCpQXJZpYsb]Liq"%W@P5aFWS:O6;J>QG\pRr8!KQsI%e'ma\4nn5`*BQI,0T)X5aa"YYX^\Geu;Rc$k>Mcrj^\MhdK"3cE(B>4m]+KeJ$+P:\h=\O)r8%isjg]+)Aq4>A+^$WMe`K045sQY'bC&7Dt90]YMaEZ*2[M)Eh-;kR_M.!M)>5bW/ZbdrF$H5nl'pn3\IXM+*+^H/`j:G,Co5@SnRJ%(gHMF$5jT)%VT\P%Yet^@q-L/D@s^>H_):HM7;'VYo/sd05Odr^@^V!A0E%Q;^6SFSZE>\R:5bYf?[9#Z5TJ1:W(g-TW+"DBm0K.%(GuS_Mmhha$L&\4f(]!2Xb+cK=GmtCZ'2_SS^Q'p$b_(3*4,rdWVH,r=I*giQU"g?j_LhT,"qLG\rG>[,Kgl0jc"'i!DT%JXWhXN%JMBMZP,f.Ys.JO=5E+[&BF'uL$/Gra+VBV\`d@iGnQn]sf;P7Kb8;5ZM[E;oTYN\5@]pHtGYJTqoIQILCi,+bomenj"REtS;nOtc%V'>f>98J;Q%W%>]Ynds\mIW-A_FWe/*-(Kd7mp/nOoT)%pr.M.;8<TlLsV.#)Ifse(KirZibj3/KjtcAmUS`c"X=Jq;'=kSp!4j5%YYj2A.T<%6b-.[-]:h+fTst2a7O>njf.DI7.F,/7n^4`6efpSMWr5a;3%klU7SBTKq3`(c7#n5ZdHa^J#`s:sL?aBPE?AqYN"ps=%I:KVsdlTP/mo#9(L$Y)-'"63!)=f;o#f6@(GmP9_jE&oj.DKtA;7b-=V$&k"DZnJIV""IC)_GQG1p^aB5:pKlZRk5)a)-88HMb=?%Ap8?+4PgVjBil!=#1ZQ*aMVkR%aCl,VI6B"ki^LDD)"G24:T,C5$.1E<$4jp)$i0pC)@JQG0#-XW<2oD.0)$2VE>3Y=DEURP@MVA%@^H;"FAI\:/t(f[ANOG6jqlB@qtWma?6Ea:Yr7[?f3pok3qm&F/\c9V@"B81@LuDN!=K?'O0;+9+o@99)ZYr4Yf([QTUgpLUO\&I%ed)X'7rs,F`"T3lSLP?3Ze+DC8Ks=`9Xh#_\dmRO!IFM"Wha&U];a>siU_GF&ufTZ@n\c:%;'\UGFf.A^.;J;%\:T7T!>Tb!)*)'%Z;`Gt*7IN#fV;SqFXUGgAf>Z5"s&LK5[(=5Lg<N'+u.&,M?1L>Z7B_/5l`MLnLthMMkW1^9>kF.8P").=fBT>246uuE#&St(KLN<%P(TqXL0>LN9dnCB\fm(Rem_)Tj`UpK9kKO7EcL!j2N:q^*iMBCZUcATMZVpg,0gj=k4).8gk!2E@WCWIpN4jIL@TbunA3>id8T!e%7GQ^e]Q+^:/!tV98;mUK>dF2VN(ZCf"FaK/F8din/nA`7(\\L"QXOsOMYc<8V@J.cgGiRd8f?m=)V?=ti1c'TQG`Hj9'(rO)d/?M%0>Z-'MmS:5TsH`F&IdW\UC`oo!)23XR(/0>?KUl3rB/0l,Sq&J33lC2Oi&j@:okh^5fA)/pdJMRMk6T&$:7XCdEFHM+tFE0Ic(Un%MneMI@TmE)a4nS9C6@]J(-[Vt[<SQkb2F!>)a;:M"'mjnfW1'R>q(Fb-J)9Ek4+eJnG-8ep_u;?[IElO961SQZg:1_TIFVr8@W;1%EeqeH)!?mK5r_/T,kB:,M^e@XO_q`IR,:8!Jqls/ZcFX"!m_>jJh,[==%I=e0dN\e91Fa#ZD-Pc"iZTDp>kP),#Y_;%tsK-[N]>5%7"dSol%ma#.s7s3.=lU5acCup$"D`pg+fhK`%`qij<?!JG]AR#[YDSNi$?Lj,#X-/Fps?%`er7p+_Gc5K+RSj33r@.BHif>c$5EH%Xj2G#U`BJ/8=\c#nK@GF'IU[';('-`-M#.HXVTWfGcV`0>W7d0H(OH]#n<O4,Lg=cD#R,+Foj45mujY:R*$i,j?,i[;d?t!4:[=6%WEe>j,tB-D"B`^s@2'ae8nT=$[L,lE^_5*+JTZpB!n4u[YE"#CTSMX:)+Vk.2a-a=7jG2P7p7O+4d%:[@fmlia]1pM7'JqtD=0#n%.&8+3J%S](/0B)Ccr+$+f`bto_qV]S@uSQ#">@.q%oeXW,[/b>ESDP*@%^(j#OkWaL`bNt7!RS)mQDe]U0'oF"iPd$ZWQj"-j(U]%70]Q+&rAquCDuLYa*]5N@'f))Cf4XhnsXILik`ilY\)TAf+N>.J0,Wf\qj4b$j*;o8s`u1kDT;UAXOHF+h_qKXB\4EddXLmIckAm%XtnSNf2>1nmLlEudIU7LF^Q++@KGMtK$3*RP/Y?-aT2la`Y39$E/uukrljIn?_.O84g`07)X^mbK^=P0[LO-$_?s,-(81`p,nu3/%K3Srk]TjJ3Yfed3\SLa4_H_--_+)H"S]GA\KO?;tn_P3\jbhYZ"FJ'SY/o1Us'+*_XB'@Wd4auRGiE.`W`1H>_ZUSX(m7/hGBP^$%kld1;i,01upGqQE-.TQ]5sq8UPtImnQF(#bd`PF%bjmaMeA3^m%mdVY3?97N@EY]D[\]DC/C%K33p"#=1)J*7#ugCGmIIj!Oc329%CbaCel$hO\mJ:3o&>-`gaQEK3@0Png-?QkZM"`kR4TKbT;fr44+CG_]&^@tQU2Zl2U[p^Z'7;G@,#2=L?n!?-d*2_'7WpNQ2"?[n%WAph1Vuo<@ZZW=Q8-%&3$Ug!@]khI5ctYZ'Z+s?DLc8boNTW"SkV:Fuh7,$^h#s[NJkfW5(otU!`Bl;'p_&ge\^/Q`:HcV#Y=K-2%o>I:c4R<9L)9XPOY)AUYXoit2cm]4F/6*p[/*J-=.d@(?VfE;Si$<<n<%3og^90H&606F$OUsA/;5eiTQ7@bk=_\R:#2Z7np<n[>%<ju^MeX?(?\4a'T@iH43:eGaX=iE";cAQWgY=Po`(#;J)>tH+-fRU!t_-qL02pIlfpT*?IT(@sNbo'AjCu5Gf+Pl1l&sX<U?q_d_%ph!kK+LDQ/ir,+X$lHSVQl&2N9b%U;XY]1G'la;,"cG"#2.`7'pc_MW,Eke;iAFdB^B[W;_B62W?pROe>/03dm4ij)s"uh8.#$<f%/Vrj+!i/Qld$1&d?HQdm6NRZ"&61H=!28su!qY/IlsuDc<`IUB$I3'V1b"mP7$thgRYO]435\_BDHmW\9^YAe>ROWgq>]q8-s-^B%+)#]HDpUj121he]J/i]VGopc(X9LZ)_s\P">^d/Ypa`Z'0mc0_?!8`#p8+4]Zd53`Zdl#1]ARAsD.)R)]+-6O=%u`>O]gs?&e21A%,Df9.IGG@5k>mp=@G6j>F#87gj6K`:,KbmeO!k<0q)WQd(+DH>*":OoO*@/JQ;P173XfcoT[H`TFs(ZgMj0s.]]%\\oUSaDKUCJa%Y=3[K^QLNp/t8s*\7G[qUG3JJ?Be#1ab?#J\h_]I$WBQ2)^,Z:%7CXrq1rTS.>4KNoHV9>g1H#``Fr-X+V>/6r@_c^g_CmHasiO\%6Q3p;gp<X-6qNF1:HmSd]\B1X&luHGZY:CjIK^q0A?`3jaqV!s0ZaHl=^$m!:[D6:G.N,K<?_X!+[?Uc.g0?G'+_1+6s,Wg9Z)!d%%=!'Lj4/!sgF"_%G\!#iBM^X;NMK/V"-:1ln3Ac^F\]J<`(HhM#e/iQkBa6O6\_[cI68)]+9?;**Iq>8D/tpC)7t?hqLr^mI[:Yq%EQ6MdiAEQ"RY2Z,NWCI/Yu'=0(Po&+l'-.4P$XVEP%po/7;[!3CX]CNbuX=jWT3/cC^B"7IOk*JQSP$6>d*>$+urcPXr'sE5\T-:%Oub.pA*5Qa&=YLWCqS*4iRt,`giQaHde=<X\U&FulJ&j=<E!>7!quOpYX?^GmTZVuJT4"]0LTbpkLufm:h$eYj"r@A[.nbh*WpG/%Bf=H<!TOo^\NVQRPtkgXaQ081-DjV+-4:t/L;gEI]r)I!_5l\#<9o*Gp#]SLT<!+Y'[ldhM[AOZSXt\^#*QFrGcI@C?-:M7>X7VH%iVC-)A(=7AqF1.]f*W)8'`+%(6qd8tEkdk(iaCe+;5lVh,aCtF7L,g'T@rH^JC$OXIs7`7#_Dkdd@?%<Ac.YVc-)a4aPrYfdolb.%b5<E;UiQU!2@4>J)J)"tildL@5e.ob35^g[&X"VVmDK?F@S`9nEIZ#RO&AteTU9\+7FDkQeJ"Hjbh&C.,:27gPT96`4VrHu]N*_n%G5'BE`#P!&Wo#?[C?]U/jL+$gM*F/#a8c).E39FqS1N+KO10T\*p?b:gERjjGS]]i4g'Gb$)(E<D\bJq2nBIl1#ojk>.ADBk,^25%S;Xt^]`Vr*2qDI@Z[;,=W/@KSYB/2-6hOe.e>R?-O]L)G'n)6UkAK7KDZnBdk9?OpC8gm,N]]-^+*KRu)'N#=ao95mnI<A,B!_=8%`90i'1eLpEi)9Zp,AlE,Fd^s6"C#MY1NPR0EMV9,1*qrh\Jr,b$KiLoaNOU.O;0P&M314BQWRQi]/tUjFgbfK`U.U*cknYqWLp%/%j;445b=E;ONOp^FA$^L%25(,sA%QY[$_9oE1Km3hQL[#hc+uCb\b@.[.4YIhfCi+BgUTN5kqgOBh?=:9hiFU&4k.!hkQQbq)c-qk%X76`OfUFPKeW3iL41'cBi3To?k-D08E^+I%*mdBn_PY[r/^n"K7`#lhD3PgHdEc,1muI<2&P)Js,E&%6_qcXK,$lJL^5]pm=GE3F%VY#,"$adg0Ul$@*95\Ut%eb]+!!?0J5a^T6RXcApb)TpSU??QMe;mMFiNMXo"Q,JQ^Ze_pWi7Y2Tb#Z!?4NII0o:fB8YcqHdC@F4%fU]Rl]N[j)q\GBaQteBr2m>+m#538%gE!`Uqf9Y,_qN?%07I1Lh:''l-3GjMDS(4q:+)8NkF5a5g5M2fLZYYPg2b]2eX+6s3rr;*%NmQr\^qCX;ZV![h`.Ogc>K@-?X!6FfPSq3PVSRq(X0\1^j%=$J4;G_ChIcL#l!@Q?IN,Og09/%2_d52AbEI'`eE^uYA6Is>(0Vj+%,;><\&,,$%^qOZPYD(J`GI`[qiTRN]M1/_b.Xcl<etssbQmNmC4/NN92A^6'LP/m(o0?:0@PD_\'#N0L[!<%YOg:YiC@M>Oa59[0%hQV7lG3:=W;:kQu@BJ^6D&&'67lYKc':m":)P:9'U!:b:<+E^e>CB'>/8%<tigNEe"aS)J?d+sdFtl3k[7W08(r*Lb92PdC`#[!>%!$Pk-F_so'BRT3r_N#[#X9B*_GI<<<.DlhJW*5D_aO`m>=s"&"<`t>LJAXdNW!Pjf;$A]_FmI+'.*$dA&I0XgY[*i_?"OKf.9,?Z%?"lHQQohm?;e<:heW@^V>t`S(esab6NFkI#f>3=n!>c=%FhFlZR,M$"Fa&Sp7[uqbi,93nfrZ]2Nue[<U#11,Q?#C4%E\Jfd[Z;)%$?p?XcW=dQl+G'$plIR0QJj;JVRK"Z$6\)bahtPSL!QThd@HV$pj]c)kAMH6^A4K#pUcL$4MUgcpAWTD%o5tc]mP)%q>KEahr!94%5(%hTlg=6(j2Xr&?G=)NH2GeFL\J:(?Tu0<4b!D'e)*E.O$rN9Vsf*4ro%5G$LP,~>%AI9_PrivateDataEnd