%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: BW_A.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/19/07%%BoundingBox: 0 0 325 80%%HiResBoundingBox: 0 0 324.2627 79.9546%%CropBox: 0 0 324.2627 79.9546%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-10T13:48:08-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-19T11:26:20-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-19T11:26:20-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>64</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAQAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXkv58fmfa&#xA;6Jp8fk/TJFl8zeYeFqIgf957WdvTkmkP7PJaqv8AwXbFXrWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5h+df516Z+X+mfVLTheeabxP9BseojB&#xA;2E0wG/Gv2V6sfapCr5uubPU9M1VJvMM7Xv5keaGUzRymp0yyuP72W4oaJPJDUCPpFFUmh48VX3Bi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzb87f&#xA;zhs/y80ONbZVuvMeohk0yyO4UDYzygb8FOwH7R2HchV82TTah5U1Aa9rwbW/za1tll07TpV9Y6aZ&#xA;qelcXEVCGumBHoQUpGKEivFcVX2Pl+90/wAwW/leKY6r+ZXmecRa7d8vWGm28rc7iHnvzuHTkbh6&#xA;/AnJOpbFX1p5686w+ULKy1O9txLpMt3FaahciTi9ss7cEmEfE+oocjmOQIG4r0xVkuKuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV8gfmb5ge1/MTXfNl3&#xA;GL7zCl++jeTdMZfVWD6kRG960RDcuMh/cp0aUs37FCqx4te+Tb02dkz61+butuUublCbh9Ma4+1F&#xA;E3xc76Tl8b/7r6D4qnFX0P8AkT+SUHkSwfVtYK3Xm3UE/wBKmrzW2RviMMbftMT/AHj9zsNhUqsC&#xA;/P7z1D548x6d+WHlyZZoI7oT69qCn9zF6IPNS/ThbpyklboCAOoOKvV/yO8xzeYfIa6gwb6v9fv4&#xA;7BnJZjai6cwLUkn4EYRj2XFWf4q7FXYqwmDzL5r8xa7rVj5ak0+w0/Qbj6hc3t/BLeSTXYjSWRY4&#xA;Ip7ThGgkUc2c1NaDbFVmg+edUsdQ1PS/P8umaPc2TQmwvUmNvbXsUysS8QuWrVCvFlDHifoxVOh+&#xA;YHkI9PMmleH+9tv3/wBniqa6lq2laXbfWtTvILG25BPXuZEhj5HovJyoqaYqlR/MHyEDQ+ZdKBHU&#xA;fXbf/mvFUy0zW9G1VZW0u/tr9YW4TNbTRzBG/lbgWofniqEvfOXlCxupLS+1zT7W6hp61vPdQxyJ&#xA;UAjkjMGGxHXFVD/lYXkH/qZdK/6Tbb/mvFUdpXmPy9q7yJpOqWmoPCAZVtZ4pygboWEbNStO+Kt6&#xA;b5i8v6pNLDpmp2l9NB/fxW08czJvT41RmK7+OKqep+a/K+lXAttU1ixsLkqHEFzcwwvxNQG4uymh&#xA;p1xVFabq2lapb/WdMvYL63B4+tbSpMnIduSFhXFVX65afW/qfrx/W/T9b6tyHqenXjz4V5ceW1cV&#xA;QVp5n8tXi3T2erWVylipe9aG4ikEKitWlKseA+E7t4YqiNN1bStUtvrWmXkF9bcinr20iTR8h1Xk&#xA;hYVFcVRWKuxV2KuxV2KuxV2KuxV2Kvkn835X8tfmR5p12yi/3Kxy2mneWEALtDNqEBvLu8QGv7xZ&#xA;JHCeDSVH2Rir1n8ivyNtPJFkut60Fu/N96nKaVvjFosgq0Ubb1c1/eP36Db7Sqj/AM5EefPMOmWW&#xA;m+TPKayN5l8zs0aPDUSRW6kBih24s5NOVfhUMdtjirwCKztoPU/LzyTPDd6hfqR5v83MeMAgiIea&#xA;KGU/3dlDSssnWUj+WgKr6D/5xpeCXytrEmml/wDD0Wo/VdG9QMrSRW1tDG9wUNeJnkBkYA/aJHbF&#xA;Xr+KuxV2KvJ/Mv5SX2oeYL3zf+X/AJsm8v6teSMuoRRUnsbi4tmMLepGDxDI6Mr8lb4q7VrirAPP&#xA;XmfztcaR/hbzvZWt55j0DXNGurW7suIivILmWRVIDhFRqoV3CjfcClSqznXfJieddP8ANFjJ5TTy&#xA;3rkFpbNpN2xhaSW4DyTxN6kBaGgliVDuWALVoDiqKi8zQfmN5X8p6WY1L664uvMNsQf3MOkyo13G&#xA;y9V53axxCv7LE4qxuxkmsvMX5n/VPJaeYYRqImdz9WMYdrRHZWikPqv8RLn01JNfHFUy8weXte0D&#xA;8wr3WvIkIZ9D0TSfrfl1SQmo2rS30LJXc+vFFax+kxqdqb1oVU40yfyP5/8AN2l69Bbw6jaSaRI6&#xA;idBzjlhukX05oz+1EZG+Fqiu47HFVLyl5U8ry/mn+YEUuj2UkUI0hYY2tomVA9oxcKpWi8juadcV&#xA;Sb8srzVND8xefLDQ/Lk2p2UOtGNGhuLaIRLHBGqRn6zKjt8I674qreSfOWl+XLz8wdc8w20mlNNr&#xA;sUX1FFFzO0z2kZSJRbeoHd922NOtT1xVMLzXP09+Yn5b6q2l3mleo2uLFb6jEsNzwW0UB2jDOUDd&#xA;QG39sVRfnvTrfQPPflHzLpHGyvNW1L9Ea3HEOK3dtPDLN6k6igZoWhqHIrvuaYqwS784+j5z0r8z&#xA;eOpR29zftpd3HNY38VnH5fuOMVtObl4Vtv79Bc/DIa+oB2xVlHnfTdb8o+eYNW8rGGCHz7Kmjaok&#xA;gHCDUSjtb36JT4mESyc16MRvucVem+XdA0vy9olno2lxCGxsoxFEu1TTq7EAVZzVmPc4qmOKuxV2&#xA;KuxV2KuxV2KuxV2KvOvzO/Lo6zq/l/zPplmt1quialaXd3a8lRrq2t2Y8VMjJH6sfPknJgD0J6Yq&#xA;9FBqAaU9sVfPX/OR76vJ5v0nSvLy/wDOwa5p72Quq8Pq1iJWe6dpCKRq605yA/DGrg7NiryTQdDu&#xA;fMd8v5b/AJdEyWU5VvMvmVkZfrQjYcnb9qO0jb+6j6yNQtuQFVfY/k/yppXlPy1YeX9KQrZ2EfBW&#xA;b7TsSWeR6ftO5LHFU5xV2KuxV55e+UtU8q3Gva/pvm79E6HdyTanqNnf2iXkEErfHNLCweB1DU+z&#xA;vv74qhtX/KFNc0+OdPMMkt9e31pqt/rEkKTPcfU1JtIokRooooI+ZIVVJNevWqrKdH8u+ZIdZOpa&#xA;z5ik1KOON47XT4YFs7ZOZWskio0jTPRaDm3EVNFBxVD+U/y60by15h8w63ZMzTa/cC4aFgAkG3KR&#xA;I/aSVmdvoHbFUqsfy6826bqGvX2mea1tptfvPrtxXTo5BEQojVYucp6IqirV6dMVTPy15L1nRvMN&#xA;zqk+utqcF1aW9k8NzBWfhaGV43NwJd3MlzKz/Bx3AUKAMVVNI/LzRNI87al5q06tvPq0HpX1moAh&#xA;abmrG4UD7LvxHP8Am69a1VW+X/JmqaV5x1zzFNqyXSa96X1iyFr6Yj+qqY7fhJ6rn4YzR6g8jv8A&#xA;Diqn5K8jah5b1jXr+bVUv49fuTfXEAtvRMdwQF/dv6snwcBTiQT35Yqv8o+S9S0HXte1SfVkvo9f&#xA;uPrc1sLb0fSmAEa8H9RzxEShSGG53qOmKqPnLyNreu+Y9F1zTdeXSJtCWf6on1Nbnk90ojmMheRA&#xA;VMYAVQoINTU7UVQXmn8sdV8y28j3/mFl1MwyWtrcRWqrBaw3KencmCH1OQlmj+AyPKxVSQtK1xVM&#xA;fPWl6Q/5cX2i61qVppVlPZrZTahLGqQISoWsULSKAdv3a8zQ060xVg0kml6vb+UtKl8/Wou9Duor&#xA;zTp7vT3ga9mgVooQxmmiVz6bspEZqx3xV7PirsVdirsVdirsVdirsVYz+Y3nzSfI3lS71/UTy9Ic&#xA;LS2BAae4cH04l+Z3Y9lBPbFXyZrH/OVf5uX5b6rc2mlI2wW0tlagpTrcGc4qwfWPzR/MbWAy6l5k&#xA;1GeJjVofrEiRE/8AGNCqfhiqp+X2iTeY/MEkMvme18tSwQG4j1TUbk26FkkRREkhZTz+PkBXscVf&#xA;Sv5peUJNf8vaY7ecdIs79tCgTVdTllq1zYxUluJrfgSzQTylGZgN6KK7kFV836t55k08Q6R5Kubn&#xA;StGsZPUW8idoLy9uFBX63cPGQwNCfTjBpGu27FmZVMdH/wCcgPzf0qgg8yXFwg6peLHd1H+tOsjf&#xA;ccVewfk9/wA5R6vrHma20HzmtpFBe0htNThRoSLgkBFmBZk4v0qAKH26KvcfL35gaNrvmPV9AtIb&#xA;iO80eSSK4eVUEbmJlRihV2anJ/2gPwOKsmxV5l+bOseVtQ1PTfIuvaxa6Vpd9G+oa49zcx2pe1hP&#xA;GCBHkKjlLcUbb9mNvHFUt/J3zRd6h+VupaPa6pDJrPlFp9NTUoeFzFJFbVa1nTfi8bxLwG+/E4qm&#xA;XljUPzP1nyJpfmuw1W0u9RvbRbttFubVY7aQsK+lHNG6yxt4M3IV6imKoX8rPzM1fzH5nmt9Tnpp&#xA;+q6eup+XoGhSJ1EdxJb3tvI4+3JbzLwFPtL8RAxVBfmJ5w/MKwi836xoOrwQaR5dmsbaGKW1jk5z&#xA;zekLpPUJ6RCZCNvtFlP2cVZDqkP5jWj6glt5ssrqW30qW6htvqMUc6zqy+hI6+o4eOURyoxHHiaU&#xA;riqr+Xv5if4+8ryiBzonmi3ijF/avGHMDyoJI50jkP7yGVTyQ16bVrvirEx5j/NuL8tL7z3Pr9lx&#xA;hsje2unfo9WV1Eau1ZBKjJ+8LoB8XwgHqdlV/nHX/wA2tA/L3/GyeYbK4ijsYLqWx/R4ipLcPCFU&#xA;MZJSy0lau69B74qyLU/Nt7D5uXyjeeZbfQ57fT7a5jvriGFZdRlmaSOT0hMRCqxmMVVQWJbagU1V&#xA;Qmsr+cOi+WvMWvXnmOwY6TBd3NnZrpylJoLWIyRsziZWR5AnxDcKemKrJPJHnTztoelHzH5jjfSb&#xA;yCC+uLaxtEtpYrgKksXB3a5EijkwPIDsaYqpeWzF5p/OzzI2ocp7PyLBZWei20xLqlxeI0k13Qk/&#xA;vf3XAMd+Pvir0bzH5c0fzHot1o2sW63VheIUljYCor0dSfsup3Vh0OKsC/L9fMmjedZfI1xrAvdF&#xA;8u6LYG1T6tFE78g0A5MCzUUQg9e+Kqt3rfnKTz75q0a31lbex03SYdQsF+qwuySzmQUZju6r6Pfx&#xA;xVP/AMtNW1nXfy70fVtSuhJqep2guJLhI0QI0oJHFAOPwe+KsE1fzP8AmJZ+X9EuY/MEZu9R82Te&#xA;XZpTYwUEAv5bFJAtftL9VL+/KnYYqyHRvOmvaPr/AJr0nzPcxanp3lywi1U61bwiB1jkV3aCeJWZ&#xA;PUCxlkpSq/PFUdoP+PfMejW+uyatHoY1GJbmy0uK1juBDDIOUQuJJG5SSFCC/DgOw8cVSDWvMf5m&#xA;2f8AhxdQuINKur3zCmhXiW8Cyw3Fu8ckyXcJmLuhdYqcSTSviMVT78ydZ8x6XqHlRdI1FbOLVtYh&#xA;0u9iaGOXlHNHJKXUvupX0eP04q8I/Nzy1+c35reay+neXLu18uafyj0qK9KWdVrR7h0uGjbnKR04&#xA;1C0HicVS3SP+cPfzBuQr6lqWnaeppVFeWeUeNQqKn3PirN9J/wCcMvLcZB1fzHeXQ/aFpDFbduxk&#xA;+s9/bFVTzJ/zhz5Vl06Q+XNXvbbUlQmJb4xzQOwGwb044nTkerCtP5cVR2qfk5rnnDR/JuiXcs2i&#xA;6fY+XtPh1+cKDK8kCAJZoDShD8nkrUAhNq0xVu6/5w7/AC4e3422p6tDOBRZXlt5FJr1ZfQSv0EY&#xA;qxHWP+cMNQWraN5mhmrWkd5btFTw+ON5a/8AAjFWFav/AM4rfm9p7N9WtLXVFXcPaXSLX5C4+rt+&#xA;GKvo78jNT82TaDLpvnDQ7jTfMVgEin1GaDit9CgKxSGdRxkkRRxb4j/N3NFXo15dR2lpNdSLI8cC&#xA;NI6QxvNIQorRI4w7u3gqgk4q82/LvRNI81rrHmPzT5db9OahfSH6trWnPG9tZxfurOCI3MYVl9JP&#xA;UYx/tsa74qxnzBZyeR/zUvZvLflvUJfLuv6M9vrEOk6dcSW8V5GHNvInox+kWYUQhTtyJOKsi/LD&#xA;zVcaX+Wej6W+gaz+ntOs0tjpk2nXdt6kyCgAuZo0tlQ/zNIKDr4Yql2reQ/MflbyB5X1XSoP0j5r&#xA;8oXUl/La29SbiLUZXbULWLYkqfX+E06LXriqJ/Mby3qGm/kZc6Etnc6vrV+0DXyWMEt0815PdrdX&#xA;cpWNWbhy5mp7UXwxVuF/J+izapP5S8o6vE13p0kN9NHpd7aw8Y0kMKpFPCk00ryuqURCAp5EgLiq&#xA;0eStWvfJ/lfzV5XR9M89aBptvbCG8hlthdxxRKk9jdxSrG/Esp4MRsdwafFirWp2OrR/843HS5NN&#xA;vDrFxpH1VdMhtpprgTyCgRoo0ZxQ9SRQd8Vd+ZUN/f8A/OPJ0+y06/uNSu7GxtYtPjsrprkSxPGX&#xA;DwCP1Iwoib4nUD33FVU18w3nlnzJfTaZ5u8p3d9ozQx3OjaidKvZ24yKBNE4jia4tpldTsVSq0+l&#xA;VKodC1DRPyU82aSlnqD215HqcHlrSjHPeXkdrdQmK1haNFklWrktRvsK3xEUOKvQvJEpk8n6KWhm&#xA;t3SygjkguYZLeZHjjCOrxSqjrRlPUb9RtirANc0HzL5L/M+7896Hp02taB5ghjt/MemWY5XUMsIC&#xA;x3UMVR6uw3Ub7t44qyfUvzKVLIHRfL2t6rqUq/uLJtNvLFA56Ca4vIoIo1r1PI/I4qwzRPL0Ot/m&#xA;ldSedvLY1GaXRbG2+uXWlyTWAv4Ob3axTSxPEq1eityo3QE4qjfLvl/TdN/NfzNYaXocukaNqWlW&#xA;9nBc2umy29ibmL1WmpIkaQ14SLRq0Y/CDXbFUT+XXmS68r+TbHyzr+h6vFq2iR/U6Wmn3V5b3IiJ&#xA;EckFxbxyQ0daf3jrQ9cVSHzv5f1OXyR5T07U9Hurqa580/pvWNPtbea8EFncX1xeXCTNbrItY47o&#xA;JSvxGvHlTFVW48l3OjXGv+UbKyuW8jeeraaWwuobeaQ6ZqE0XBknRFMqQv8ACyl1AUjie+Ksn8j+&#xA;btR0ny1Z6L5p0bU7TWtIgjtJ3trC7vre5EK8EmgntY5kIdVBIYqQTuMVSD8wr2+8x2PlT9MeVr42&#xA;S+YY76505rGW/K6ZFFNCJLuOFJ0Du0ob0d2A7bHFVX8wPKXlbRdU8m33l7yokFxba3BeX1zo+ksZ&#xA;I7KOGVZPUa1hLU5yRn0zuaVAPHZV/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:72069B1BE8FC11DBB9739E7606BFB90D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3A3EA06DEFF011DBAC05C6DFC5F72130</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -79.9546 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 79.9546 li324.263 79.9546 li324.263 0 licpclp[1 0 0 1 0 0 ] concat36.5913 69.71 mo36.5913 66.2134 li41.5542 66.2134 li41.5542 65.8843 li41.5542 62.3828 39.9404 59.8184 28.8169 61.7451 cv10.5249 65.0029 li0 79.6021 li25.2568 75.123 li32.8247 73.8237 39.4688 73.5527 41.5542 79.5698 cv41.5542 69.71 li36.5913 69.71 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf45.0054 79.5688 mo45.0054 74.8066 47.8193 71.5352 53.5625 65.792 cv57.6094 61.7451 li76.1064 65.0029 li86.6499 79.5869 li62.396 75.4019 li54.1719 73.8237 47.2012 73.271 45.0054 79.5688 cvcpf46.0303 66.2051 mo47.8628 62.2744 51.7646 58.7192 54.0083 56.4756 cv55.605 54.854 li62.3975 48.061 63.7031 45.2515 64.1152 40.5732 cv64.1338 40.3291 64.4839 41.4897 64.5884 42.3115 cv64.939 45.0684 64.7363 47.0688 63.7988 49.8291 cv62.3984 53.9541 59.0815 57.2407 54.7778 61.5444 cv50.0962 66.2051 li46.0303 66.2051 licpf49.9746 9.24658 mo49.9746 9.20996 50.0884 9.18945 50.0884 9.24658 cv50.0884 14.6641 li50.0884 19.5635 43.792 25.2158 41.2837 27.7075 cv32.0586 36.9575 li28.8691 40.147 22.4844 46.4448 25.165 52.521 cv25.2544 52.7231 25.3364 52.897 24.9951 52.6548 cv24.313 52.1709 23.2788 50.4697 23.0034 47.3618 cv22.5122 41.8232 26.2886 36.8638 30.9468 32.2051 cv39.7461 23.395 li48.6704 14.4707 49.5405 12.8979 49.9746 9.24658 cvcpf41.2837 36.979 mo43.792 34.4873 50.0884 28.835 50.0884 23.9355 cv50.0884 18.5181 li50.0884 18.4609 49.9746 18.4814 49.9746 18.5181 cv49.5405 22.1699 48.6704 23.7422 39.7461 32.667 cv31.5723 40.854 li28.6025 43.8232 25.8789 46.9365 26.0044 51.9634 cv26.082 55.0435 27.6304 57.5962 29.9609 58.1978 cv30.9194 58.4043 30.8613 58.2793 30.6328 58.1826 cv27.3418 56.6289 27.5781 50.6855 32.8984 45.3652 cv41.2837 36.979 licpf31.022 28.7852 mo24.2295 35.5771 22.9238 38.3872 22.5117 43.0654 cv22.4932 43.3096 22.1431 42.1484 22.0386 41.3271 cv21.6875 38.5703 21.8906 36.5698 22.8281 33.8096 cv24.2285 29.6846 27.5454 26.3979 31.8491 22.0942 cv39.7461 14.1841 li48.6704 5.25977 49.5405 3.68701 49.9746 0.0351563 cv49.9746 -0.000976563 50.0884 -0.0214844 50.0884 0.0351563 cv50.0884 5.45313 li50.0884 10.3525 43.792 16.0049 41.2837 18.4966 cv31.022 28.7852 licpf45.1216 75.0947 mo45.1162 75.1362 45.0059 75.1367 45.0059 75.0947 cv45.0059 69.71 li47.2593 69.71 li45.9854 71.5361 45.3345 73.3027 45.1216 75.0947 cvcpf45.1382 66.2134 mo45.1338 66.2549 45.0225 66.2549 45.0225 66.2134 cv45.0225 60.7324 li45.0225 56.6152 49.0581 52.1631 53.0581 48.1895 cv55.6533 45.5962 li57.7471 43.5024 64.1421 37.1938 61.4619 31.1177 cv61.3726 30.9155 61.2905 30.7417 61.6318 30.9834 cv62.314 31.4678 63.3477 33.1689 63.6235 36.2769 cv64.1147 41.8154 60.3384 46.7749 55.6797 51.4331 cv53.2808 53.8438 li47.4971 59.6274 45.5732 62.2197 45.1382 66.2134 cvcpf45.1318 56.7075 mo45.1265 56.749 45.0161 56.7495 45.0161 56.7075 cv45.0161 51.1436 li45.0161 47.2178 48.9097 42.981 50.7993 41.0913 cv53.7285 38.1685 li59.0488 32.8477 59.2852 26.9048 55.9941 25.3511 cv55.7656 25.2539 55.7075 25.1289 56.666 25.3359 cv58.9966 25.9375 60.5454 28.4902 60.6221 31.5703 cv60.748 36.5967 58.0698 39.6899 55.1001 42.6592 cv52.7256 45.0337 li47.7583 50.001 45.584 52.9043 45.1318 56.7075 cvcpf246.81 66.0474 mo246.787 64.4639 244.923 64.8979 244.923 64.4204 cv244.923 64.2251 245.096 64.1821 245.27 64.1821 cv246.072 64.1821 246.853 64.2686 247.655 64.2686 cv248.327 64.2686 249.001 64.1821 249.673 64.1821 cv250.041 64.1821 250.085 64.312 250.085 64.3989 cv250.085 64.833 248.522 64.4204 248.522 66.0474 cv248.522 70.7329 li248.522 71.0366 248.522 71.123 248.849 71.123 cv256.787 71.123 li257.004 71.123 256.961 70.5811 256.961 70.4941 cv256.961 66.0474 li256.961 64.5508 255.335 64.9194 255.335 64.4204 cv255.335 64.2905 255.378 64.1821 255.703 64.1821 cv256.419 64.1821 257.547 64.2686 257.959 64.2686 cv258.762 64.2686 259.087 64.1821 259.521 64.1821 cv260.085 64.1821 260.128 64.3989 260.128 64.5288 cv260.128 64.9194 258.675 64.5508 258.675 66.0474 cv258.675 77.5439 li258.675 79.1274 260.648 78.7368 260.648 79.2793 cv260.648 79.3447 260.562 79.5396 260.41 79.5396 cv259.824 79.5396 259.152 79.4531 258.371 79.4531 cv256.982 79.4531 256.376 79.5396 255.963 79.5396 cv255.769 79.5396 255.443 79.6045 255.443 79.2578 cv255.443 78.7368 256.961 79.041 256.961 77.6743 cv256.961 72.4683 li256.961 72.1211 257.048 71.9258 256.787 71.9258 cv248.783 71.9258 li248.522 71.9258 248.522 72.0562 248.522 72.2949 cv248.522 77.6958 li248.522 79.1709 250.584 78.6938 250.584 79.3662 cv250.584 79.4746 250.432 79.5396 250.236 79.5396 cv249.955 79.5396 248.371 79.4531 247.222 79.4531 cv245.682 79.4531 245.443 79.5396 245.356 79.5396 cv245.183 79.5396 245.117 79.4312 245.117 79.2144 cv245.117 78.5854 246.81 79.3008 246.81 77.1538 cv246.81 66.0474 licpf264.897 73.748 mo264.897 77.2188 267.153 78.8022 270.081 78.8022 cv274.16 78.8022 275.092 76.1123 275.092 73.5527 cv275.092 66.5249 li275.092 64.312 273.075 65.2231 273.075 64.3989 cv273.075 64.2905 273.228 64.1821 273.292 64.1821 cv274.139 64.1821 274.984 64.2686 275.83 64.2686 cv276.242 64.2686 276.632 64.1821 277.022 64.1821 cv277.131 64.1821 277.305 64.2905 277.305 64.4204 cv277.305 65.0278 276.025 64.5508 276.025 66.5464 cv276.025 73.2705 li276.025 74.3335 276.285 79.6914 269.973 79.6914 cv264.269 79.6914 263.184 76.5029 263.184 73.1621 cv263.184 65.8521 li263.184 64.5723 261.427 65.0928 261.427 64.3989 cv261.427 64.2471 261.795 64.1821 261.903 64.1821 cv262.468 64.1821 263.011 64.2686 263.596 64.2686 cv264.29 64.2686 264.984 64.1821 265.656 64.1821 cv265.765 64.1821 266.351 64.1387 266.351 64.3989 cv266.351 65.0063 264.897 64.3989 264.897 65.9609 cv264.897 73.748 licpf282.162 71.21 mo282.162 71.6221 283.508 71.5137 284.527 71.5137 cv285.46 71.5137 287.542 71.123 287.542 68.4336 cv287.542 65.7871 285.525 64.8979 283.398 64.8979 cv282.618 64.8979 282.162 64.8545 282.162 65.7002 cv282.162 71.21 licp290.059 77.1753 mo291.62 79.5615 292.683 78.7588 292.683 79.2793 cv292.683 79.5396 291.469 79.5396 291.273 79.5396 cv289.689 79.5396 288.844 78.4336 288.02 77.1968 cv285.611 73.4009 li284.831 72.186 285.156 72.2515 282.727 72.2515 cv282.032 72.2515 282.162 72.6416 282.162 72.8584 cv282.162 77.4355 li282.162 79.3008 284.419 78.6284 284.419 79.3662 cv284.419 79.583 284.223 79.5396 284.05 79.5396 cv283.854 79.5396 283.355 79.4531 281.555 79.4531 cv280.731 79.4531 279.906 79.5396 279.082 79.5396 cv278.952 79.5396 278.865 79.4312 278.865 79.3008 cv278.865 78.7588 280.449 79.0625 280.449 77.4141 cv280.449 66.373 li280.449 64.2905 278.584 65.1797 278.584 64.4424 cv278.584 64.312 278.757 64.1821 279.018 64.1821 cv279.407 64.1821 279.299 64.2686 280.406 64.2686 cv281.664 64.2686 282.9 64.1821 284.028 64.1821 cv284.376 64.1821 289.169 63.748 289.169 67.9346 cv289.169 69.6265 287.955 71.0801 286.436 71.6875 cv290.059 77.1753 licpf300.31 63.9868 mo304.388 63.9868 305.516 65.6572 306.145 65.6572 cv306.318 65.6572 306.448 65.4399 306.665 65.4399 cv306.903 65.4399 306.903 65.7871 306.969 67.1973 cv307.012 68.3467 307.207 69.0625 306.839 69.0625 cv306.578 69.0625 306.427 68.4985 306.34 68.3467 cv304.995 66.0259 303.455 64.6157 300.656 64.6157 cv296.427 64.6157 294.388 67.4355 294.388 71.4702 cv294.388 75.2446 296.557 79.019 300.722 79.019 cv304.127 79.019 306.253 76.8501 306.578 75.8521 cv306.621 75.7002 306.752 75.5703 306.882 75.5703 cv306.99 75.5703 307.099 75.7002 307.077 75.8086 cv306.578 77.978 li306.557 78.0645 305.017 79.6914 300.136 79.6914 cv295.689 79.6914 292.501 76.6328 292.501 72.1431 cv292.501 67.6528 295.732 63.9868 300.31 63.9868 cvcpf310.423 66.0474 mo310.402 64.4639 308.536 64.8979 308.536 64.4204 cv308.536 64.2251 308.71 64.1821 308.883 64.1821 cv309.686 64.1821 310.467 64.2686 311.27 64.2686 cv311.941 64.2686 312.614 64.1821 313.286 64.1821 cv313.655 64.1821 313.698 64.312 313.698 64.3989 cv313.698 64.833 312.137 64.4204 312.137 66.0474 cv312.137 70.7329 li312.137 71.0366 312.137 71.123 312.463 71.123 cv320.401 71.123 li320.618 71.123 320.575 70.5811 320.575 70.4941 cv320.575 66.0474 li320.575 64.5508 318.948 64.9194 318.948 64.4204 cv318.948 64.2905 318.992 64.1821 319.316 64.1821 cv320.032 64.1821 321.16 64.2686 321.573 64.2686 cv322.376 64.2686 322.701 64.1821 323.135 64.1821 cv323.698 64.1821 323.742 64.3989 323.742 64.5288 cv323.742 64.9194 322.289 64.5508 322.289 66.0474 cv322.289 77.5439 li322.289 79.1274 324.263 78.7368 324.263 79.2793 cv324.263 79.3447 324.176 79.5396 324.023 79.5396 cv323.438 79.5396 322.766 79.4531 321.985 79.4531 cv320.597 79.4531 319.989 79.5396 319.577 79.5396 cv319.382 79.5396 319.057 79.6045 319.057 79.2578 cv319.057 78.7368 320.575 79.041 320.575 77.6743 cv320.575 72.4683 li320.575 72.1211 320.661 71.9258 320.401 71.9258 cv312.397 71.9258 li312.137 71.9258 312.137 72.0562 312.137 72.2949 cv312.137 77.6958 li312.137 79.1709 314.198 78.6938 314.198 79.3662 cv314.198 79.4746 314.046 79.5396 313.851 79.5396 cv313.568 79.5396 311.985 79.4531 310.835 79.4531 cv309.295 79.4531 309.057 79.5396 308.97 79.5396 cv308.797 79.5396 308.731 79.4312 308.731 79.2144 cv308.731 78.5854 310.423 79.3008 310.423 77.1538 cv310.423 66.0474 licpf213.319 54.5928 mo216.44 54.5928 219.354 52.9282 219.354 47.8647 cv219.354 43.0093 216.163 40.3042 212.001 40.2354 cv209.92 40.2354 209.852 40.582 209.852 41.6226 cv209.852 52.0264 li209.852 52.3735 209.781 53.4141 209.989 53.5522 cv210.684 54.3154 212.348 54.5928 213.319 54.5928 cvcp206.66 39.7495 mo207.354 39.7495 207.979 39.8188 208.603 39.8188 cv210.059 39.8188 211.446 39.7495 213.319 39.7495 cv217.203 39.7495 221.019 42.6626 221.019 46.6855 cv221.019 51.6797 218.66 55.1479 212.557 55.1479 cv211.446 55.1479 210.336 55.0786 209.227 55.0786 cv209.088 55.0786 206.938 55.1479 206.799 55.1479 cv206.66 55.1479 206.591 55.0786 206.591 54.9399 cv206.591 54.4541 208.117 55.0093 208.117 52.9282 cv208.117 42.0386 li208.117 39.8188 206.383 40.5127 206.383 39.9575 cv206.383 39.8188 206.521 39.7495 206.66 39.7495 cvcpf229.549 48.1421 mo230.035 48.1421 230.035 48.0034 229.896 47.7261 cv227.746 42.4546 li227.677 42.1772 227.538 42.1772 227.399 42.4546 cv224.972 47.7954 li224.833 48.0728 224.972 48.1421 225.249 48.1421 cv229.549 48.1421 licp225.11 49.1133 mo224.694 49.1133 224.278 49.1133 224.069 49.5991 cv222.683 52.6509 li222.613 52.7896 222.475 53.1362 222.475 53.4141 cv222.475 54.9399 224.069 54.2461 224.069 54.8008 cv224.069 55.2173 223.723 55.1479 223.445 55.1479 cv222.822 55.1479 222.267 55.0786 221.643 55.0786 cv221.019 55.0786 220.463 55.1479 219.908 55.1479 cv219.77 55.1479 219.7 55.0786 219.7 54.9399 cv219.7 54.4541 220.74 54.8008 221.295 53.5522 cv226.498 42.4546 li227.746 39.7495 227.815 39.4028 228.162 39.4028 cv228.371 39.4028 228.51 40.0269 228.578 40.1655 cv233.156 51.4023 li233.503 52.2344 233.711 53.1362 234.197 53.8994 cv234.891 54.8706 236.139 54.3848 236.139 54.9399 cv236.139 55.1479 236 55.1479 235.861 55.1479 cv234.96 55.1479 234.059 55.0786 233.156 55.0786 cv232.532 55.0786 231.978 55.1479 231.353 55.1479 cv231.283 55.1479 230.867 55.1479 230.867 54.9399 cv230.867 54.3848 232.186 54.6621 232.186 53.8301 cv232.186 53.3442 231.769 52.3042 231.561 51.749 cv230.867 49.9458 li230.659 49.46 230.521 49.1133 229.896 49.1133 cv225.11 49.1133 licpf233.919 39.7495 mo234.474 39.7495 234.891 39.8188 236.348 39.8188 cv237.11 39.8188 237.665 39.7495 237.873 39.7495 cv238.081 39.7495 238.289 39.7495 238.289 39.9575 cv238.289 40.3042 237.318 40.3042 237.318 40.9287 cv237.318 41.3447 237.596 41.6919 237.665 41.8306 cv240.301 46.0615 li240.509 46.3389 240.647 46.4775 240.786 46.4775 cv240.855 46.4775 240.994 46.3389 241.202 45.9922 cv243.422 42.3853 li243.561 42.1079 243.907 41.7612 243.907 41.2061 cv243.907 40.0962 242.242 40.582 242.242 40.0269 cv242.242 39.7495 242.451 39.7495 242.728 39.7495 cv243.214 39.7495 243.769 39.8188 244.323 39.8188 cv244.948 39.8188 245.572 39.7495 246.196 39.7495 cv246.335 39.7495 246.404 39.8882 246.404 39.9575 cv246.404 40.2354 246.058 40.3042 245.919 40.374 cv245.294 40.7207 245.018 41.3447 244.67 41.8999 cv241.618 46.6855 li241.271 47.1714 241.133 47.3101 241.133 47.6567 cv241.133 52.9976 li241.133 54.8706 242.867 54.2461 242.867 54.9399 cv242.867 55.1479 242.728 55.1479 242.381 55.1479 cv242.104 55.1479 240.786 55.0786 240.022 55.0786 cv239.052 55.0786 238.22 55.1479 238.012 55.1479 cv237.873 55.1479 237.734 55.1479 237.734 54.8706 cv237.734 54.3154 239.398 54.8706 239.398 53.2749 cv239.398 48.0034 li239.398 47.5874 239.052 47.1714 238.914 46.894 cv235.237 41.0674 li234.682 40.1655 233.643 40.4434 233.643 40.0269 cv233.643 39.8882 233.711 39.7495 233.919 39.7495 cvcpf189.096 64.2329 mo189.9 64.2329 190.658 64.3281 191.463 64.3281 cv192.173 64.3281 192.836 64.2329 193.5 64.2329 cv193.831 64.2329 193.926 64.2803 193.926 64.4224 cv193.926 64.9434 192.363 64.4697 192.363 66.0796 cv192.363 77.729 li192.363 79.2441 194.257 78.7231 194.257 79.3862 cv194.257 79.5283 194.21 79.5757 193.831 79.5757 cv193.357 79.5757 192.41 79.5283 191.463 79.5283 cv190.137 79.5283 189.711 79.5757 189.379 79.5757 cv189.001 79.5757 188.953 79.481 188.953 79.2441 cv188.953 78.6284 190.61 79.3389 190.61 77.208 cv190.61 66.0796 li190.61 64.5171 188.859 64.9434 188.859 64.4697 cv188.859 64.2803 188.906 64.2329 189.096 64.2329 cvcpf149.16 46.8247 mo151.449 46.8247 150.825 45.0903 151.379 45.0903 cv151.588 45.0903 151.588 45.2983 151.588 45.5068 cv151.588 46.2695 151.588 46.9634 151.588 47.6567 cv151.588 48.2114 151.588 48.8359 151.588 49.3906 cv151.588 49.5991 151.519 49.6685 151.379 49.6685 cv150.686 49.6685 151.449 47.7954 149.646 47.7954 cv146.386 47.7954 li145.9 47.7954 145.97 48.1421 145.97 48.4893 cv145.97 52.4429 li145.97 53.7607 145.831 54.3154 147.634 54.3154 cv152.697 54.3154 153.46 52.0264 153.738 52.0264 cv153.876 52.0264 153.876 52.2344 153.876 52.3042 cv153.876 53.0669 153.322 53.8301 152.767 54.3848 cv152.073 55.2173 151.588 55.1479 150.686 55.1479 cv149.021 55.1479 147.356 55.0093 145.692 55.0786 cv144.79 55.0786 143.889 55.1479 143.056 55.1479 cv142.848 55.1479 142.709 55.0786 142.709 54.9399 cv142.779 54.6621 142.987 54.7314 143.681 54.3848 cv144.235 54.1074 144.305 53.4829 144.305 52.4429 cv144.305 42.5239 li144.305 41.5527 144.305 40.5127 143.125 40.3042 cv142.917 40.3042 142.432 40.2354 142.432 39.9575 cv142.432 39.8188 142.571 39.7495 143.195 39.7495 cv147.356 39.7495 148.466 39.8188 149.368 39.8188 cv149.784 39.8188 151.796 39.7495 152.489 39.7495 cv152.697 39.7495 152.697 39.9575 152.697 40.1655 cv152.697 42.5933 152.42 42.8018 152.281 42.8018 cv151.727 42.8018 152.143 41.7612 151.727 41.2754 cv151.171 40.5127 148.883 40.6514 148.05 40.6514 cv145.97 40.6514 145.97 40.582 145.97 42.0386 cv145.97 46.0615 li145.97 46.8247 145.97 46.8247 146.802 46.8247 cv149.16 46.8247 licpf153.599 39.7495 mo153.946 39.7495 154.293 39.8188 154.64 39.8188 cv154.917 39.8188 155.264 39.7495 155.61 39.7495 cv155.888 39.7495 156.027 40.0962 156.166 40.2354 cv166.569 51.8184 li166.709 51.957 166.777 52.0264 166.848 52.0264 cv166.916 52.0264 166.916 51.957 166.916 51.8184 cv166.916 42.6626 li166.916 39.8188 164.489 40.6514 164.489 39.9575 cv164.489 39.8188 164.627 39.7495 164.766 39.7495 cv165.391 39.7495 166.015 39.8188 166.709 39.8188 cv167.471 39.8188 168.373 39.7495 168.928 39.7495 cv169.066 39.7495 169.136 39.8188 169.136 39.8882 cv169.136 40.5127 167.818 40.0962 167.818 41.6919 cv167.818 54.3154 li167.818 54.9399 167.818 55.2173 167.68 55.2173 cv167.471 55.2173 167.264 55.1479 166.848 54.6621 cv157.483 44.0498 li157.414 44.0498 157.137 43.6338 156.998 43.6338 cv156.929 43.6338 156.859 43.7031 156.859 44.1885 cv156.859 53.0669 li156.859 55.0786 158.732 54.3154 158.732 54.8706 cv158.732 55.0093 158.732 55.1479 158.524 55.1479 cv157.969 55.1479 157.414 55.0786 156.304 55.0786 cv155.542 55.0786 154.432 55.1479 154.293 55.1479 cv154.016 55.1479 154.016 55.0093 154.016 54.9399 cv154.016 54.1768 155.888 55.1479 155.888 52.0264 cv155.888 43.9805 li155.888 39.4722 153.252 40.7207 153.252 39.9575 cv153.252 39.8188 153.46 39.7495 153.599 39.7495 cvcpf171.494 40.9287 mo170.106 40.9287 170.106 41.2754 169.69 42.4546 cv169.621 42.6626 169.621 42.9404 169.344 42.9404 cv169.206 42.9404 169.136 42.8018 169.136 42.6626 cv169.344 40.582 li169.414 40.3042 169.344 39.7495 169.761 39.7495 cv171.425 39.7495 173.159 39.8188 175.934 39.8188 cv179.887 39.8188 181.898 39.7495 182.314 39.7495 cv182.801 39.7495 182.869 39.8188 182.939 40.374 cv183.077 42.1079 li183.077 42.3159 183.077 42.5933 182.801 42.5933 cv182.037 42.5933 183.216 40.9287 180.996 40.9287 cv177.876 40.9287 li176.904 40.9287 176.974 40.8594 176.974 41.9692 cv176.974 53.1362 li176.974 54.9399 178.777 54.2461 178.777 54.8706 cv178.777 54.9399 178.777 55.1479 178.569 55.1479 cv178.015 55.1479 177.39 55.0786 176.766 55.0786 cv174.338 55.0786 173.922 55.1479 173.783 55.1479 cv173.575 55.1479 173.506 55.0786 173.506 54.8706 cv173.506 54.3154 175.239 54.5928 175.239 53.2749 cv175.239 41.8999 li175.239 41.7612 175.378 40.9287 175.031 40.9287 cv171.494 40.9287 licpf183.008 39.7495 mo183.841 39.7495 184.604 39.8188 185.436 39.8188 cv186.129 39.8188 186.823 39.7495 187.447 39.7495 cv187.864 39.7495 187.864 39.8188 187.864 39.9575 cv187.864 40.374 186.338 39.9575 186.338 41.6226 cv186.338 46.3389 li186.338 46.6162 186.338 46.6855 186.615 46.6855 cv194.592 46.6855 li194.869 46.6855 194.8 46.1309 194.8 46.0615 cv194.8 41.6226 li194.8 40.0962 193.135 40.4434 193.135 39.9575 cv193.135 39.8188 193.204 39.7495 193.552 39.7495 cv194.244 39.7495 195.354 39.8188 195.771 39.8188 cv196.603 39.8188 196.949 39.7495 197.366 39.7495 cv197.921 39.7495 197.99 39.9575 197.99 40.0962 cv197.99 40.4434 196.533 40.0962 196.533 41.6226 cv196.533 53.1362 li196.533 54.7314 198.476 54.3154 198.476 54.8706 cv198.476 54.9399 198.406 55.1479 198.268 55.1479 cv197.644 55.1479 197.02 55.0786 196.187 55.0786 cv194.8 55.0786 194.176 55.1479 193.76 55.1479 cv193.621 55.1479 193.273 55.2173 193.273 54.8706 cv193.273 54.3154 194.8 54.6621 194.8 53.2749 cv194.8 48.0728 li194.8 47.7261 194.869 47.5181 194.592 47.5181 cv186.546 47.5181 li186.338 47.5181 186.338 47.6567 186.338 47.8647 cv186.338 53.2749 li186.338 54.8008 188.349 54.3154 188.349 55.0093 cv188.349 55.0786 188.21 55.1479 188.002 55.1479 cv187.725 55.1479 186.129 55.0786 185.02 55.0786 cv183.424 55.0786 183.216 55.1479 183.147 55.1479 cv182.939 55.1479 182.869 55.0786 182.869 54.8008 cv182.869 54.1768 184.604 54.9399 184.604 52.7896 cv184.604 41.6226 li184.604 40.0269 182.661 40.4434 182.661 39.9575 cv182.661 39.7495 182.869 39.7495 183.008 39.7495 cvcpf205.689 47.3794 mo205.689 48.4199 205.759 48.4199 204.927 48.6973 cv200.487 50.2231 li200.071 50.3618 199.724 50.5698 199.516 50.5698 cv199.169 50.5698 199.239 50.1538 199.239 49.9458 cv199.239 48.8359 199.169 48.8359 200.002 48.5586 cv204.44 47.0327 li204.787 46.894 205.204 46.6855 205.412 46.6855 cv205.759 46.6855 205.689 47.1714 205.689 47.3794 cvcpf154.717 71.2886 mo156.99 71.2886 156.422 69.5366 156.942 69.5366 cv157.084 69.5366 157.179 69.7734 157.179 69.9629 cv157.179 70.7207 157.132 71.4307 157.132 72.1411 cv157.132 72.7095 157.179 73.2773 157.179 73.8457 cv157.179 74.0352 157.084 74.1299 156.942 74.1299 cv156.28 74.1299 156.99 72.2358 155.19 72.2358 cv151.971 72.2358 li151.497 72.2358 151.592 72.6147 151.592 72.9463 cv151.592 76.9238 li151.592 78.2021 151.402 78.7231 153.202 78.7231 cv158.221 78.7231 158.979 76.4976 159.263 76.4976 cv159.405 76.4976 159.405 76.687 159.405 76.7344 cv159.405 77.5396 158.837 78.2969 158.363 78.8652 cv157.653 79.623 157.179 79.5757 156.232 79.5757 cv154.575 79.5757 152.917 79.481 151.26 79.5283 cv150.408 79.5283 149.508 79.5757 148.608 79.5757 cv148.419 79.5757 148.277 79.5283 148.277 79.3862 cv148.324 79.1021 148.561 79.1494 149.224 78.8179 cv149.792 78.5337 149.84 77.9658 149.84 76.9238 cv149.84 67.0269 li149.84 66.0322 149.84 64.9907 148.703 64.8486 cv148.514 64.8013 148.04 64.7539 148.04 64.4697 cv148.04 64.3281 148.182 64.2329 148.798 64.2329 cv152.87 64.2329 154.007 64.3281 154.954 64.3281 cv155.38 64.3281 157.369 64.2329 158.032 64.2329 cv158.221 64.2329 158.269 64.4224 158.269 64.7065 cv158.269 67.1216 157.937 67.2637 157.842 67.2637 cv157.321 67.2637 157.653 66.2222 157.321 65.7485 cv156.753 64.9907 154.48 65.1328 153.628 65.1328 cv151.544 65.1328 151.592 65.0381 151.592 66.5059 cv151.592 70.5313 li151.592 71.2886 151.544 71.2886 152.396 71.2886 cv154.717 71.2886 licpf159.5 64.2329 mo159.878 64.2329 160.21 64.3281 160.542 64.3281 cv160.873 64.3281 161.205 64.2329 161.536 64.2329 cv161.772 64.2329 161.962 64.5645 162.104 64.7065 cv172.475 76.2607 li172.569 76.4028 172.664 76.4976 172.711 76.4976 cv172.759 76.4976 172.807 76.4028 172.807 76.2607 cv172.807 67.1689 li172.807 64.3281 170.391 65.1802 170.391 64.4224 cv170.391 64.2803 170.485 64.2329 170.628 64.2329 cv171.243 64.2329 171.906 64.3281 172.569 64.3281 cv173.327 64.3281 174.273 64.2329 174.795 64.2329 cv174.89 64.2329 174.984 64.2803 174.984 64.4224 cv174.984 64.9907 173.706 64.6118 173.706 66.1748 cv173.706 78.7231 li173.706 79.3862 173.706 79.6704 173.516 79.6704 cv173.374 79.6704 173.137 79.5757 172.711 79.0547 cv163.383 68.5425 li163.335 68.5425 163.052 68.1636 162.909 68.1636 cv162.814 68.1636 162.768 68.2109 162.768 68.6367 cv162.768 77.5396 li162.768 79.481 164.661 78.7231 164.661 79.2915 cv164.661 79.4336 164.661 79.5757 164.424 79.5757 cv163.903 79.5757 163.288 79.5283 162.246 79.5283 cv161.488 79.5283 160.352 79.5757 160.21 79.5757 cv159.926 79.5757 159.926 79.481 159.926 79.3389 cv159.926 78.5811 161.82 79.5283 161.82 76.4976 cv161.82 68.4951 li161.82 63.9961 159.216 65.2275 159.216 64.4224 cv159.216 64.3281 159.405 64.2329 159.5 64.2329 cvcpf177.305 65.417 mo175.932 65.417 175.884 65.7485 175.505 66.9321 cv175.41 67.1689 175.41 67.4531 175.127 67.4531 cv174.984 67.4531 174.937 67.2637 174.937 67.1689 cv175.174 65.0854 li175.174 64.8013 175.174 64.2329 175.553 64.2329 cv177.257 64.2329 178.915 64.3281 181.709 64.3281 cv185.639 64.3281 187.627 64.2329 188.054 64.2329 cv188.574 64.2329 188.669 64.375 188.717 64.8486 cv188.812 66.6006 li188.812 66.79 188.859 67.0742 188.574 67.0742 cv187.77 67.0742 188.953 65.417 186.728 65.417 cv183.603 65.417 li182.798 65.417 182.75 65.4644 182.75 66.4585 cv182.75 77.5396 li182.75 79.3862 184.502 78.6758 184.502 79.3389 cv184.502 79.3862 184.549 79.5757 184.313 79.5757 cv183.792 79.5757 183.177 79.5283 182.561 79.5283 cv180.146 79.5283 179.72 79.5757 179.577 79.5757 cv179.389 79.5757 179.341 79.5283 179.341 79.2915 cv179.341 78.7705 181.045 79.0073 181.045 77.6816 cv181.045 66.4116 li181.045 66.269 181.093 65.417 180.761 65.417 cv177.305 65.417 licpf135.843 54.2461 mo135.635 54.8008 135.427 55.4946 135.149 55.4946 cv134.802 55.4946 134.525 54.5928 134.317 54.1074 cv128.907 41.4141 li128.352 40.0962 127.242 40.5127 127.242 40.0269 cv127.242 39.8188 127.381 39.7495 127.589 39.7495 cv128.213 39.7495 128.907 39.8188 129.6 39.8188 cv130.155 39.8188 130.987 39.7495 131.265 39.7495 cv131.404 39.7495 131.612 39.8188 131.612 39.9575 cv131.612 40.2354 130.71 40.2354 130.71 41.0674 cv130.71 41.3447 130.849 41.6919 130.918 41.8999 cv134.733 50.9165 li135.219 52.0264 135.357 52.5122 135.565 52.5122 cv135.773 52.5122 135.843 52.165 135.981 51.957 cv139.796 42.5933 li139.935 42.2466 140.143 41.5527 140.074 41.0674 cv140.074 40.0962 138.687 40.5127 138.687 40.0269 cv138.687 39.8188 138.825 39.7495 139.033 39.7495 cv139.519 39.7495 140.004 39.8188 140.42 39.8188 cv141.53 39.8188 141.808 39.7495 142.155 39.7495 cv142.363 39.7495 142.501 39.8188 142.501 40.0269 cv142.501 40.5127 141.877 39.9575 141.253 41.4141 cv135.843 54.2461 licpf125.092 55.1479 mo123.427 55.1479 121.762 55.0093 120.098 55.0786 cv119.266 55.0786 118.294 55.1479 117.462 55.1479 cv117.254 55.1479 117.115 55.0786 117.115 54.9399 cv117.185 54.6621 117.393 54.7314 118.086 54.3848 cv118.641 54.1074 118.71 53.4829 118.71 52.4429 cv118.71 42.5239 li118.71 41.5527 118.71 40.5127 117.531 40.3042 cv117.323 40.3042 116.838 40.2354 116.838 39.9575 cv116.838 39.8188 116.977 39.7495 117.601 39.7495 cv121.762 39.7495 122.872 39.8188 123.774 39.8188 cv124.259 39.8188 126.202 39.7495 126.895 39.7495 cv127.103 39.7495 127.103 39.9575 127.103 40.1655 cv127.103 42.5933 126.826 42.8018 126.687 42.8018 cv126.132 42.8018 126.548 41.7612 126.132 41.2754 cv125.646 40.5127 123.358 40.6514 122.456 40.6514 cv120.375 40.6514 120.444 40.582 120.444 42.0386 cv120.444 46.0615 li120.444 46.8247 120.375 46.8247 121.208 46.8247 cv123.566 46.8247 li125.855 46.8247 125.3 45.0903 125.785 45.0903 cv125.994 45.0903 126.063 45.2983 126.063 45.5068 cv126.063 46.2695 125.994 46.9634 125.994 47.6567 cv125.994 48.2114 126.063 48.8359 126.063 49.3906 cv126.063 49.5991 125.924 49.6685 125.785 49.6685 cv125.092 49.6685 125.855 47.7954 124.051 47.7954 cv120.792 47.7954 li120.375 47.7954 120.444 48.1421 120.444 48.4893 cv120.444 52.4429 li120.444 53.7607 120.236 54.3154 122.04 54.3154 cv127.103 54.3154 127.866 52.0264 128.144 52.0264 cv128.282 52.0264 128.282 52.2344 128.282 52.3042 cv128.282 53.0669 127.728 53.8301 127.242 54.3848 cv126.479 55.2173 126.063 55.1479 125.092 55.1479 cvcpf141.505 78.6758 mo141.269 79.2441 141.126 79.9546 140.795 79.9546 cv140.417 79.9546 140.18 79.0073 139.99 78.5811 cv134.639 65.8906 li134.118 64.6118 132.935 64.9907 132.935 64.5171 cv132.935 64.3281 133.077 64.2329 133.266 64.2329 cv133.929 64.2329 134.592 64.3281 135.255 64.3281 cv135.823 64.3281 136.675 64.2329 136.959 64.2329 cv137.102 64.2329 137.244 64.3281 137.244 64.4224 cv137.291 64.7539 136.391 64.7539 136.391 65.5591 cv136.391 65.8433 136.486 66.1748 136.581 66.4116 cv140.369 75.3135 li140.89 76.4976 140.984 76.9712 141.221 76.9712 cv141.458 76.9712 141.505 76.6396 141.647 76.3555 cv145.388 67.0742 li145.53 66.7427 145.814 66.0322 145.72 65.6064 cv145.72 64.6118 144.299 64.9907 144.299 64.5171 cv144.299 64.2803 144.441 64.2329 144.631 64.2329 cv145.104 64.2329 145.578 64.3281 146.099 64.3281 cv147.141 64.3281 147.425 64.2329 147.756 64.2329 cv147.993 64.2329 148.135 64.3281 148.135 64.5171 cv148.135 64.9907 147.52 64.4224 146.904 65.8906 cv141.505 78.6758 licpf103.451 53.7607 mo102.757 50.0151 li102.619 49.46 102.757 49.1133 103.035 49.1133 cv103.451 49.1133 103.451 49.46 103.59 50.0845 cv103.937 51.4023 105.671 54.4541 109.693 54.4541 cv112.468 54.4541 115.173 52.9282 115.173 49.8765 cv115.173 44.2583 103.382 47.3794 103.382 39.8188 cv103.382 36.1426 106.503 34.3394 109.833 34.3394 cv113.37 34.3394 114.271 35.3799 114.688 35.3799 cv114.965 35.3799 115.034 35.0332 115.312 35.0332 cv115.52 35.0332 115.659 35.1719 115.659 35.4492 cv116.075 39.4028 li116.144 39.6802 116.075 39.8882 115.797 39.8882 cv115.451 39.8882 115.243 39.2642 115.173 38.9868 cv114.341 36.4897 112.19 35.2412 109.624 35.2412 cv107.335 35.2412 104.908 36.3511 104.908 38.9868 cv104.908 44.4663 116.699 41.2754 116.699 49.252 cv116.699 51.749 114.965 55.356 108.376 55.356 cv106.226 55.356 103.521 54.3154 103.451 53.7607 cvcpf110.11 62.4082 mo106.843 69.3691 li106.653 69.7954 106.843 69.8901 107.222 69.8901 cv112.904 69.8901 li113.567 69.8901 113.52 69.7007 113.377 69.3218 cv110.583 62.4082 li110.441 62.0293 110.3 62.0293 110.11 62.4082 cvcp123.085 66.127 mo123.085 76.4502 li123.085 76.7817 123.038 77.8237 123.227 78.0127 cv123.938 78.7231 125.595 79.0073 126.589 79.0073 cv129.667 79.0073 132.603 77.3501 132.603 72.3306 cv132.603 67.5005 129.383 64.8013 125.263 64.7539 cv123.18 64.7539 123.085 65.1328 123.085 66.127 cvcp122.517 79.5283 mo122.375 79.5283 121.191 79.5757 120.528 79.5757 cv119.344 79.5757 118.634 79.5283 117.687 79.5283 cv116.882 79.5283 116.124 79.623 115.319 79.623 cv115.177 79.623 114.704 79.623 114.704 79.3389 cv114.704 78.6284 116.408 78.9126 116.408 77.8237 cv116.408 77.208 115.84 75.8818 115.556 75.1245 cv114.609 72.7568 li114.325 72.0938 114.183 71.6675 113.377 71.6675 cv107.032 71.6675 li106.464 71.6675 105.943 71.6675 105.659 72.2832 cv103.859 76.3081 li103.765 76.4976 103.623 76.9238 103.623 77.3027 cv103.623 79.2915 105.659 78.439 105.659 79.1968 cv105.659 79.7178 105.28 79.623 104.901 79.623 cv104.096 79.623 103.292 79.5283 102.486 79.5283 cv101.729 79.5283 100.924 79.623 100.166 79.623 cv100.024 79.623 99.9292 79.481 99.9292 79.2915 cv99.9292 78.7231 101.255 79.1968 102.013 77.5396 cv108.879 62.9072 li110.583 59.2607 110.678 58.7876 111.057 58.7876 cv111.389 58.7876 111.578 59.6396 111.673 59.8765 cv117.639 74.6982 li118.065 75.7397 118.397 76.9238 119.06 77.9658 cv119.534 78.6284 119.959 78.8652 120.528 78.8652 cv121.001 78.8652 121.38 78.2969 121.38 77.3501 cv121.38 66.5532 li121.38 64.3281 119.628 65.0381 119.628 64.4224 cv119.628 64.2803 119.77 64.2329 119.912 64.2329 cv120.575 64.2329 121.238 64.3281 121.854 64.3281 cv123.322 64.3281 124.695 64.2329 126.589 64.2329 cv130.425 64.2329 134.213 67.1216 134.213 71.1465 cv134.213 76.1187 131.845 79.5757 125.832 79.5757 cv124.695 79.5757 123.606 79.5283 122.517 79.5283 cvcpf219.307 64.8486 mo219.401 66.6006 li219.401 66.79 219.448 67.0742 219.165 67.0742 cv218.36 67.0742 219.544 65.417 217.318 65.417 cv214.193 65.417 li213.34 65.417 213.34 65.4644 213.34 66.4585 cv213.34 77.5396 li213.34 79.3862 215.092 78.6758 215.092 79.3389 cv215.092 79.3862 215.14 79.5757 214.902 79.5757 cv214.382 79.5757 213.767 79.5283 213.15 79.5283 cv210.735 79.5283 210.31 79.5757 210.168 79.5757 cv209.979 79.5757 209.931 79.5283 209.931 79.2915 cv209.931 78.7705 211.636 79.0073 211.636 77.6816 cv211.636 66.4116 li211.636 66.269 211.684 65.417 211.352 65.417 cv206.853 65.417 li205.527 65.417 205.574 65.8906 205.574 66.6479 cv205.574 66.8848 205.764 67.832 205.338 67.832 cv205.102 67.832 204.959 67.3584 204.864 67.1689 cv204.201 65.3223 202.686 64.6592 200.791 64.6592 cv199.04 64.6592 197.24 65.5117 197.24 67.5005 cv197.24 71.5728 206.048 69.2051 206.048 75.1719 cv206.048 77.0186 204.77 79.7651 199.845 79.7651 cv198.235 79.7651 196.246 78.96 196.15 78.5337 cv195.631 75.7397 li195.535 75.3135 195.631 75.0771 195.867 75.0771 cv196.15 75.0771 196.15 75.3613 196.293 75.7871 cv196.529 76.7817 197.856 79.0547 200.839 79.0547 cv202.923 79.0547 204.911 77.918 204.911 75.5977 cv204.911 71.4307 196.104 73.751 196.104 68.1162 cv196.104 65.3696 198.424 64.0439 200.934 64.0439 cv203.538 64.0439 204.248 64.8013 204.58 64.8013 cv204.911 64.8013 204.959 64.2329 205.386 64.2329 cv207.09 64.2329 209.505 64.3281 212.299 64.3281 cv216.229 64.3281 218.218 64.2329 218.644 64.2329 cv219.165 64.2329 219.26 64.375 219.307 64.8486 cvcpf235.555 58.9473 mo240.96 58.9473 242.455 61.1611 243.289 61.1611 cv243.519 61.1611 243.691 60.8735 243.979 60.8735 cv244.295 60.8735 244.295 61.3335 244.382 63.2026 cv244.439 64.7266 244.698 65.6753 244.209 65.6753 cv243.864 65.6753 243.662 64.9277 243.548 64.7266 cv241.765 61.6499 239.724 59.7808 236.015 59.7808 cv230.407 59.7808 227.705 63.519 227.705 68.8672 cv227.705 73.8706 230.58 78.8735 236.101 78.8735 cv240.614 78.8735 243.433 75.998 243.864 74.6758 cv243.922 74.4741 244.094 74.3018 244.267 74.3018 cv244.41 74.3018 244.555 74.4741 244.525 74.6182 cv243.864 77.4932 li243.835 77.6084 241.794 79.7651 235.324 79.7651 cv229.43 79.7651 225.202 75.7104 225.202 69.7588 cv225.202 63.8066 229.486 58.9473 235.555 58.9473 cvcpf221.092 62.8896 mo221.266 62.8896 li221.537 62.8896 221.675 62.7578 221.675 62.4932 cv221.675 62.3589 221.623 62.2471 221.521 62.1567 cv221.42 62.0674 221.295 62.0215 221.145 62.0215 cv221.05 62.0215 221.002 62.0596 221.002 62.1353 cv221.006 62.1865 li221.006 62.8022 li221.006 62.8433 221.009 62.8682 221.018 62.8765 cv221.026 62.8853 221.051 62.8896 221.092 62.8896 cvcp221.583 62.9561 mo221.996 63.5615 li222.047 63.6348 li222.177 63.8232 222.293 63.9199 222.397 63.9258 cv222.446 63.9277 li222.479 63.9292 222.496 63.9448 222.493 63.9736 cv222.49 64.0244 222.408 64.0498 222.25 64.0498 cv222.066 64.0498 221.902 63.9399 221.755 63.7197 cv221.367 63.1357 li221.347 63.1021 li221.325 63.0669 221.291 63.0498 221.243 63.0498 cv221.035 63.0498 li221.013 63.0527 li221.006 63.084 li221.006 63.6245 li221.006 63.7441 221.021 63.8228 221.053 63.8604 cv221.086 63.8979 221.158 63.9229 221.271 63.9351 cv221.322 63.9404 221.349 63.959 221.351 63.9912 cv221.352 64.0259 221.328 64.043 221.276 64.043 cv221.261 64.043 221.229 64.0405 221.182 64.0347 cv221.141 64.0298 221.076 64.0273 220.985 64.0273 cv220.751 64.0273 li220.722 64.0273 220.678 64.0303 220.622 64.0376 cv220.582 64.0415 220.556 64.043 220.543 64.043 cv220.498 64.043 220.476 64.0254 220.476 63.9907 cv220.476 63.9644 220.495 63.9468 220.533 63.938 cv220.613 63.9194 220.665 63.8843 220.687 63.8325 cv220.708 63.7817 220.719 63.6714 220.719 63.5005 cv220.719 62.4014 li220.716 62.2422 li220.716 62.0947 220.665 62.0132 220.561 61.9976 cv220.488 61.9868 li220.442 61.978 220.42 61.9585 220.42 61.9272 cv220.42 61.8931 220.444 61.8755 220.493 61.8755 cv220.505 61.8755 220.542 61.8784 220.604 61.8833 cv220.637 61.8848 220.683 61.8857 220.741 61.8857 cv220.791 61.8857 220.871 61.8828 220.982 61.8755 cv221.068 61.8706 221.141 61.8682 221.203 61.8682 cv221.7 61.8682 221.949 62.0508 221.949 62.4165 cv221.949 62.646 221.826 62.8262 221.583 62.9561 cvcp221.349 61.3105 mo220.893 61.3105 220.504 61.4722 220.181 61.7949 cv219.859 62.1177 219.698 62.5073 219.698 62.9624 cv219.698 63.4185 219.859 63.8076 220.181 64.1304 cv220.504 64.4536 220.893 64.6143 221.349 64.6143 cv221.804 64.6143 222.192 64.4536 222.515 64.1304 cv222.836 63.8076 222.999 63.4185 222.999 62.9624 cv222.999 62.5054 222.837 62.1157 222.517 61.7935 cv222.194 61.4722 221.805 61.3105 221.349 61.3105 cvcp221.349 61.1055 mo221.863 61.1055 222.3 61.2861 222.661 61.6479 cv223.023 62.0098 223.204 62.4478 223.204 62.9619 cv223.204 63.4751 223.023 63.9121 222.66 64.2739 cv222.298 64.6357 221.86 64.8164 221.349 64.8164 cv220.774 64.8164 220.303 64.5986 219.937 64.1631 cv219.642 63.8101 219.493 63.4102 219.493 62.9619 cv219.493 62.5054 219.639 62.1035 219.934 61.7563 cv220.305 61.3223 220.777 61.1055 221.349 61.1055 cvcpf84.3252 69.2466 mo84.5303 69.2466 li84.855 69.2466 85.0171 69.0898 85.0171 68.7754 cv85.0171 68.6162 84.9565 68.4834 84.8354 68.376 cv84.7148 68.2695 84.5659 68.2153 84.3882 68.2153 cv84.2754 68.2153 84.2188 68.2607 84.2188 68.3501 cv84.2222 68.4111 li84.2222 69.1426 li84.2222 69.1919 84.2271 69.2212 84.2368 69.231 cv84.2476 69.2417 84.2764 69.2466 84.3252 69.2466 cvcp84.9077 69.3257 mo85.3994 70.0449 li85.4609 70.1323 li85.6147 70.3564 85.7534 70.4712 85.8765 70.4775 cv85.9346 70.4805 li85.9736 70.4829 85.9922 70.501 85.9902 70.5352 cv85.9858 70.5957 85.8896 70.6255 85.7012 70.6255 cv85.4839 70.6255 85.2876 70.4946 85.1138 70.2329 cv84.6528 69.5391 li84.6279 69.499 li84.6035 69.458 84.562 69.437 84.5049 69.437 cv84.2588 69.437 li84.2314 69.4404 li84.2222 69.4775 li84.2222 70.1201 li84.2222 70.2622 84.2412 70.356 84.2793 70.4004 cv84.3179 70.4448 84.4043 70.4746 84.5386 70.4888 cv84.5986 70.4951 84.6299 70.5176 84.6318 70.5562 cv84.6338 70.5972 84.605 70.6172 84.5444 70.6172 cv84.5259 70.6172 84.4888 70.6143 84.4321 70.6079 cv84.3848 70.6016 84.3062 70.5986 84.1982 70.5986 cv83.9204 70.5986 li83.8848 70.5986 83.834 70.603 83.7676 70.6113 cv83.7192 70.6152 83.6885 70.6172 83.6738 70.6172 cv83.6196 70.6172 83.5928 70.5967 83.5928 70.5552 cv83.5928 70.5239 83.6152 70.5034 83.6616 70.4932 cv83.7568 70.4702 83.8179 70.4287 83.8438 70.3677 cv83.8696 70.3066 83.8823 70.1753 83.8823 69.9727 cv83.8823 68.6665 li83.8794 68.4775 li83.8794 68.3018 83.8179 68.2051 83.6948 68.1865 cv83.6074 68.1743 li83.5532 68.1636 83.5264 68.1406 83.5264 68.103 cv83.5264 68.0625 83.5552 68.0415 83.6128 68.0415 cv83.6274 68.0415 83.6714 68.0449 83.7451 68.0508 cv83.7847 68.0532 83.8389 68.0542 83.9087 68.0542 cv83.9668 68.0542 84.062 68.0498 84.1963 68.0415 cv84.2969 68.0361 84.3848 68.0332 84.4585 68.0332 cv85.0488 68.0332 85.3442 68.25 85.3442 68.6846 cv85.3442 68.958 85.1987 69.1714 84.9077 69.3257 cvcp84.6299 67.3706 mo84.0889 67.3706 83.627 67.5625 83.2437 67.9458 cv82.8608 68.3296 82.6689 68.792 82.6689 69.3335 cv82.6689 69.875 82.8608 70.3379 83.2437 70.7212 cv83.627 71.105 84.0889 71.2964 84.6299 71.2964 cv85.1709 71.2964 85.6328 71.105 86.0161 70.7212 cv86.3989 70.3379 86.5908 69.875 86.5908 69.3335 cv86.5908 68.79 86.3994 68.3267 86.0176 67.9443 cv85.6357 67.5625 85.1729 67.3706 84.6299 67.3706 cvcp84.6299 67.1265 mo85.2407 67.1265 85.7607 67.3413 86.1904 67.7715 cv86.6201 68.2012 86.835 68.7217 86.835 69.333 cv86.835 69.9424 86.6196 70.4619 86.189 70.8916 cv85.7583 71.3218 85.2388 71.5366 84.6299 71.5366 cv83.9468 71.5366 83.3877 71.2778 82.9526 70.7598 cv82.6006 70.3408 82.4248 69.8657 82.4248 69.333 cv82.4248 68.79 82.5996 68.313 82.9497 67.9004 cv83.3906 67.3843 83.9507 67.1265 84.6299 67.1265 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (BW_A.EPS)%%CreationDate: 4/19/07 11:26 AM%AI9_DataStream%Gb!R&q-G#PdOtIRJFC<>#S=dB4ZAds8Xr&_&BI7uE<ou,Z-D!L]mlPf5?0#/-+1A>m9uR!hs[)m]68G#el\qD<RU7#>5R:Hip,rP%Xo7_=.egTUa.fRM`)SIJ/$lQD=!(Z&FIAT\L-?BS7;`B<"Apa]b^iRJ+0bp?D7#cC\#m:!I])"<Fh?u,Rs(^A>$\aS1p8F9YBTrO%XfIrB<kEG-kZ+Ar6]=*>CCaK*([iG`cWcsjWp_V`EVGDU5O(-Z>H:d#[t&\kRPt`nXaR.TFg69$5BlXQn;R?pd-C:scd4.s%^!K-%ICoL*mBpl3K%2?OZC2G-3W'DKWq6+kh]M:"hlLk=o;h2t$h27^Q!j]ZnDQU7Vi,gSg8%\"TTUr*?g-]/^))Mq+YNfpr0NJHbH#Na%e*()Fn%LB0OW:fImr',X(/;"@9tG>;r`>D9l(VO[)U:JC-X[G^2iQO\S0^>]XhV#Bs&uP=CG`6_HL:,R0nK4'9el=E42$9Is+.]h%\5T6s6M0<U9ri>WGL_<`,:F>"]k^u^DBqX-DV[-g<Z1jcY5^!Z*&]jEXWA$JqrRp7#X)ej-Wo#Ij6p#=/."5=GMftnC`cSoQT;60%Ib"2k)A6,:a$>HNo<@N,r)SGbkfVI9[E(eE=:&$%l4.7>pON><3`hYLGH8#^iRrD;l9Z-fXAgJE6_1DL`rF$Cs$SMK^qF(?:A,UI%FT%c5LU#RFF_GddmUEkXMt7HI34fBQHj@T>e%QO2-3'iLi:D_Nd<k`em!TgF_dYp&Q1soDFLH\j!'b=Eg(3qiG<aiIq:?GMo2^"K%dJF(dWHEF4?)U@hr)jbA!*[/6X!OuRj6D)eYeJ!bP0%9Xn,.C1fn5>3T`90(E7J_5Y3;O8e'tA"FWS-/We^!8:!u9'Vkfdp-5=Z'%GI4VN+5H8>M4*dM8JXk+"C'p$Xq`@UhZE`Nhd$&)j6#LhZI?>`Fk+]N+QN3l-1T_$NPQ\)[.O+bVu#9`AGPueH2Ha(H`O-n5kZ.f%hGs0EFmsUaf=Du-gICKV#Y&=X#i3/jX*)n*2`d?LNOt,6Vafj`W+oS7T3$4QYX<(glY11mhP5J%*rKd.\#?pP?X$M#TEH.i2!u9Q%.cEsaaF8YgJY1UH8RP,drY[CZPP$L\(\:$rr$$@)C3BN_F`Z%2=7r6<\Uptc;La>#oXl"t)%b.,'E8Pp)G&Aa#P^M0]NFjfDu0&7%r:;jtrrVHVY576!X'Q?dne(lAW9[LaM:GVlpc$@s4S?2^k8i+NOo>_7W@MoG0,K*;(DZ*f'USi@.k1r9#V.p^"W^*U9GSiq<QGVb%N%o48;cp&ucYIF0AVHt<#!N;eZQ'"F6JV%5:LWL]`2WS=8/21PZu9OjQ6&Y_RMl6*KgN7uC)!P&*`Y*%'r!f,1cQ*c&,edFIR1ZL%p\,,1\LVUegAeaZ5H:cLq(KN<)@nd?D[Y*\pPmp.FfDZeE!7_&9,1mc]aBtQIU,7V;sN,lMR<u#G6.(3<4YgW.P"t<5HRmdTNV%s%l6)$VGAlCVpDZ&a5ddO(qra5,jVYVZXn8U:qoujGY1,e(r;SF)B)8WUTDemB).3N]QiF5\)[>lN6G(&4<#H)=jT&N$r\1T"i62),%A6ROM%7;poQp?j3qGrR_N'a&)M4]I>_eT08#t%-10W/sE=(T0`1jTV`DCb!jTO7W_Wep'!kkm%35'^4Z&#Mq\O&)hJs1Z1WK:eK=%T6@B_+*oNcQC"i>lV=AJs/(Y[e8LRdrW:iae%-3(SEe6LbY7RXrhoKLD?]r\rpa:gm&rmVq\2!k;EX1;<meZ#2\2o>in^,FGJHp@%1"hbnp"05lfstnU[7X-:9tP],\gT?jWoVTXG$O33jJLl^`Wj?^7d,1;`8L0RV'iYJA'P31S;C/(^M9:r[)rsZ^fC?j[*_tT._XB;%k^StoEHk2ug\kbFffqu^X5*t0C+/[]Mj5U/IsbTg?iGtpo)FJNgAUiNs'f^?+5R4XS#b]OG$YSuYh!^Lj:Cgoh#g,IDuK#/f6!E\%mf2E6bE7uUT9YJ>7_r4,/i1#Ps3m`_*O"T.?iplUc+gD6HG@U]8/D-LN[d&_)_e:AQXVcNl-Y0(/bZkkcsV=1XtG3hO]b8trrVF\%D""%qctTrPN:fCfr]s*RVn6p&l8:1Z)]H1-nX09B\WH671,NPV[R@st?-]MJSQ<5Mq5[LYD#LtIh7U8_29rCCY'Q901"fDRS+o,0%Lp1'$gg**#/mHm)p,tIhQSN`V)lUGihmg0el4b8KD02s[IHo[uH`9o&Rk%)'U"YGApK'3Qq%@DMD`Z!j?gh$&5P3[[O,\%\e[bMu%2/?RU[4\U'DQEU6pmX!f=[SFOX0%DLVd<AmREV*h29",34#".u&&%8)3-CnAq+T&MleT)IY1<K9oSrd'7ZSh`B@[lG&&!=gZM5B6%6ZMe5E=\W.?JRg#1j"kqpK^!ddC@oooZl3Nc:,-tLZqeKSSkk3X#%e?"cYEdXm.p<i6k2uaX+4??Dhep]l*nQ2ueU>Y:cIes3n:J%?[q*V3??G&niQ&#ZYC!Z/8C,T@+gQ\O:7X&h1:,GP=j*!AC[:Y9`^[;>huff4kP($I[ID!bb?+]qW5IqboYA_hRI:T2:JR2lBCAT%eNNO.%CgmT?S6m:]&ie;m<..79%;p%J$0\Zqla&`*aPY"_@MmcCj.L8(]>nY](3Sk)s1cj+"LLtY2!C@?Is]-ebk/N7\P=hf@&+n%2O%3?[tZ-=CN[5sq9=%tYk86flWePC2.4,EZ\uP7S?D?_j.b(<'t8M,EVUM9UU$t0FuoSl+KN(cqlWH7`POC>\?Oeb/gmE!o<nkH%h7C2`jjsZI'SSA^s1U*cYhf3,lI_%><Upo9Rq1YO[=_ZU;sV*-h?JFN;>iP*n7ch@lU(7t#FPA8h,P-2.c0%6@/K-;9u0O$]^++Z%&*I4Uof;?eqQ"a;31]568CrPamTPsmU&QV+%+3VOLV'E'H1CC&FQ;daa\aYJqFV(W<PeA?/^#_Q\4(@,2EU='!CcEB?+@KCfcEtk%A"9M-C)!*'H)%,rQa,E\IaS/j'3=L5YB8`p0r.*H4'Hb[;-Fg_;O$5X^MS(q]6:AN'M`s[U9)c.&uEiZBC/RO3#=N"S*"RjMjsUh%cZUKg841PZD3ngY)jCH]#%FND8CG@q6GaJ("S#XIAGa)D5fZis>;-Fai8UG,2(dJCn@;TjX[De+f%7XHBp#dQH>M1%]=j]fKrC+Z%]Ags8=:]j-b8Yj[n]h"9;U!Bkkt^&APce7F\`AZB7WRBXo>8^,Z?<]\\<FI/TUatS$00f=VPt[#'tV7q@:Sm>.&]'gF,N[0gHP7N%q^BUURslD,%<TOHlM9>fN=O%3:@Ss)/U+)>eDF(Y2.u`=bUG'@$5cdP26b`:<3^n#"&"b6P@*Hrq]*\OHZaTm5ZhG\g)K5'QSPf'%!#6e/fBAf5okk]PbR08c121Ve@/o/?f&HAKd7pN>bjDZgijrOQ(Q9>,-H<ta7cP;Lm9J/pSL^p8#L#7Fr!BJ&=1e&g[`]e!lFu)f%ZKfT*)f#&O<_00pb[6)nQX-WGCtuBs>m&:K<BS9=oDYW_GCf<YAX[i!,(bS*]rRX@Wm;b/XO9i'IdfJ@EWpk=otiJQE_CO0'W;`%%$I+Yl]&#hd^&`iS?1j@tLGAgS.M2pg1mSTboe^Zf@1:k*<PF=pDP&L$=7=ksFKSs+Of=?d=P@!@<+#)0H)OE[S]\+17poVK"?tsn%"K:OUF9NX2$<7u4g#i9"fa`kUja&2pp315$lQFsQ+he7\%J]d2J[U-K]%:$X^k_=bp^e5,J/R#([]n^cECnZp)SK/e\\)XKA*@qk%Z.Ni4@(Ku;m=GtIKTgB:=Eo_S//O-,LD6So4,jX/U(jIV*0Wgo8F]OtH\!@4p_!=]di\*ZVtO"PU4,]O3&jd:o]S^5@>?5E)JXZ*%qu'9o1cai/<'-BWlOYe*fTc67Z@]TC+Gmis=Pqqor/DJ40s#NfKthWp^"iMTJmCK&GX[+rLj'p=ej$Z[OW+IrKA4_uQ@E_Y_bVns%0L"5OCTVeA0,f&h2oi\Zf7(C0nG;h+*WPj*,sRDJAhG,_/$g2\4(#bm-a1ELIqjDjK@b5fI9:lBI(mHu(>h./ZOa*4h3Wo1[>ggK%p@Z_Ta6/GATBu2=nuK+lr+#53C@;)jcd^CHh`Fbpc._O6db2U+W?l3C?tt.g$Y)K\[-#s"WPo\"mq62^^O#=+qh8\Wd,d3qZHJ5g%C[tgshRoYhe5j0[+8FI(I:!R'?T6]M4*9WFdmo[+QmYYHf[E"LI-k60cuSc_pgSU8Z.F-0mo6^B[eo=RbYS"TqZabth,"3WG<;@n%h9VX1:\XV9MK^aMIAKE,(")A+s6?0QW\7pAqX&<?-b%L=q7SPKfB@MCqo[nGBZ4ji2Yql>@HQeQVOl=OGNO7VQIk?GM\"e&EN2lP%KpqZM:)9H[pYKI=g3NIu3r`aag!l(a7bJQ(q(/Gk@-1>YoOgj^S2"(5oIJZW>l0UCdcmn2e_.X:G98U[h4A?4;iSru6I!fhWI++)%-MXP2[HY??7MkouGC01M46uY'i%qRm\#-3e@.e*;qf?hX<V6j>m2KdSG168ah<;>n\)[(@3K:25q*u6f/%X-NXO6D/jhpi'NJ8rJ%&*C/:I5\L[l)lX^ZQ%^2^I'N7If%.=SU5A!EuO_$/^1?)[^-qG(;;@aH[9Id'O!4m[GfI0#p.r729NAaITXd-1mj^(,QD=MUSh`i%a]n/M_p#A\Da/RI\DI()PhG9oLZg^9H?UD`:XsoN7Q8(gDZPic'0NtTSU7b4'E"Z0d@IUJs3HmU#*"B3ksk!Nn%Zt6:RC6C,H]1E%I]`<H2f"EGo,=[eIL*8!h49"NlDMlTZdHIUerFV^f#;P#D=,[J;GNuo(>2"PcU2lNDr'mTXf[pg=cL;0*:@/#k)T,m?#]Q`YL*f&%beD-NNRjG/%PQ,!4JbLtZg"_9It->"D=i(eF`sD/kWAKPq;kd\UQntqG'!3&X/N@r3Ph>S%_q0bqKr(C^6[73f789br)faaOiC:/%I=H?]]fQ%>.C7FjhbVO<)f<&jc<k0@>+*?Ahm"8moo8;EhE'ZF-bU&&=cIScn!@ZtUZ_&3C==`R:GuKnZnffDe%KUf/$3t9gi\@2%0(h*5pO)tdpW\n'd-1'rWmSf9p?@`VoK%Gq)[2glc-H=d1+bo)ZZaK8D$KNmD8-%UNK#RbbLH:0O7(f$qp=PQ00R"<S%iag.'Cbk%k#.'Oc<VtnY2hcM?%6Xr_Ud`<kku<6FJZb"@!;DBl-9bqqIW>Y$E]CNjfIkJ&n?@#qOs4Di8<qbS(FC^QUg_[4h\)(^ONX_VLf/_%^Ma&9oPURse[on%?1e0rn9E*h\@p5feQ[Puo>5G-rRq9]G^$!6[CN,X]$E:,m;7a<qfID8cWU43ld2j6%0#ik<r_sCbPIJPq=AB&%^N^^YID*q_9mqoiIbeO]c/"G+^Rh]_p$83>Z2WXq/?sifRAmi+C[CQ@]D9*HI<II?Vl"r<ad4I-H'es#n,8bkLE.I24Vtl1\!d!P%%6M:/I[TjZc.J@Dqt):cSbMf(p*nX!chhjWI@^b[jo,%FI679&7*SikmpAHUmJ"r']O,1BrTL5MpZj>Q(7`A?f+a48Fa3;q><h<:%`]T<33:Cm:4eL\KO2#VpcIhpnJ,<[N:!VA82Lg5D>ikm0Z+s.b^O;XNX8i.dnEI:9kI_[R]),EI$ZFnNYKkp]q&T@af2K)J="hLq%C!Po6DPj"NDgq"Z@E-lbT6rIIYka3p`O0m`]jQ3(54b((,$.qM\neEZR@_j:I*$#.Xn:c,[glc"V]28;:(K9IDa(4%&7o)3CUN=$%qV'*H7FQ__0meQOECG4Db;8Q+R=`B=d*DH]3T%ukk\cE_4?n,,SaclNj3M@ap#"#q>Wk;YJ6b"Ffo81smTU+/1[WCLhd7.."RR1]%bF=Lf^X18?V]*NsTk;!e'5BG3dHRckQ/"jNcH0c7<*QSJ)Q#]1Nn$5i;:+P#EbmRYnbDX5DNqO.Uf!Hs,qDP^0P^V`<MS;-ec\dp%RuM_!O*%.)&+WnAUSRi-qO!`j.r,)kZQ&R4^Z79[dsLDV)Qh5P'+ETEDPO0/?fX)ub&9+_s5CoEa6^'o:6F"=["CEY=^IjF;JTI(%?+HD,?'65$In<7>m9BPUE_f>m'3\bV</obO^*kA=Ki8LuYE6/3[iW?5T)5gbGXr_pf1:Z1bXKdYhXRfEdLfhYrq")cemZ",;X_ld%oOID$/,5M(i<*!Kro5n[DdE7\["jINnRlM!5IdAY9I3e!Ya=uo")Ye).['?c<G#UVgIM,@4J%i<Bq-"YZh0ZbN=1HTD",\fh/-Z3%8XD_ig74H.=aJ[8F/*P+`K'TsJ-OW-#rH:DD<4i7@i#(H"Sn5J(3bUm#l0Y4WMRicnK0c`4Nec?!N5jhGfhPCHKO;paf`o/hu;-`%n^2hMVUj)!ph0gs:O\Y<K')p#4ZlT4(H,"=ptEh&]?1X?GQi0.pN3YCI9*Gk.]@/t*+DuZ&`gZSH9W:i@R'\\WLe=hqkMJbdb]MF%;^jG(ClHKI[lmeWC@)`,JX2YjXTfEL)j9lec4@hF2QAI$r<DRjGYE4I4a3es^#Im>q*P+DF%;8>N4I^@H9@J5[^11S0PiLf-(t0Q%IE\B:c_Q;]XG\sdXL2D^/5?j6Af6?8IlhmSO2\'i=DW$X^<'R7lVHQDe\.7[@TU.oPeR+iECs<AQ>'j*"9m5\i-re?R'V/hc!%fU%'hLCl,n'SqS!(8,]44fPMgU!2\*M>15JhjeHf&\6'59CL-0^ZW@1ICmG=r6DRa9rEN@j>J_qNjU\2h`hs,gS'DWhUfgp]adF$Zk4%V6tU%-*ps:\c#u%f5"aSq+L`ApHE,%@7<iKrTROLl_m1GU=6Sf?<``g^o1#>H"'?YN0W'_SPcTZG+,J/`DY+KR^O%I^Y%\.7rpa*%d%7E#.8@M,$*Q'dcd1bZP2+$bZh?D.PMN(22u"K.?h-99P:J0VdM8sXeG3NBY9+K/(,Mf=012Fs1KIrg;j51(NO,Cc`*f1MAln]<%FZ^jZR9jZ3R4V6)X%ZLcF7.Ar`+I6Elc,I"T<%RU-T5JUdmgK6qR)P0VYB)22I))l/$mOTanK$u1lQU*\W^e9<bD5&M/34+K-r33%,n6?NVP&+og<'$[7!@Z%Sq4O+Up3*NGp.BTgdb/tek6n'0K7Dje(:5_Am_DV"`n`c)oRpLSK_u'K:%8@O_f@d]2IL#amDX9"gn4`%_ONSs4(>9aIohN:IG-G]rKAh+H7uk>.s'fXQ;(,pP'2qLqI5l(Uts_NS):in"WEka*g0J)3DL%H>PE#c;koLb+*egdp[003USph_%Pm!ZCbtNckm%tUbT"SKc!W:e+b5a!o4A!i-hW!<E*':K",[Z'7#3ZD.Wg1/CRVH3TDtNgg[GP2fnPRN\n3lrMoS/TW?X)XV'n!:b%p!;9S78jA")01WO9NLQcc]FFjP@\\&>5oAQI7%4$f1;t72j!'*EZ_DY:ClP[cuZ*rjmAN=4)Yt2i[#CYK#&Lk_(Jk-)P8NAZs:n+%qo4&0I/%T@4^@()E$*&K=N[ctE,alP:N)nkj*$7[<G&R<bFkDjDEYYik9YWLJFP<?7iu_[r'A'2Zk"G&A+QSE?^&G9$r96%2Q]Zf%>i"kFP\KmRd;0,%@_O=opWNM>>F?ODmTpt)frX$q/&M_2[qSPrRj(N\R(H_nhqE[$[%TWiTV3ZEi^7Z2h3#)6bG4[OC]UB9I[IDe%he3+\oh,&V$5pY65&&V5/X93IP7hu*'2t^M._1VH@uIpgfdWc@c9]W0F8@:c;"?Z?o-N2JK2(!^K<3OY/;p^YkInQY41qpn4Ra5R%NTP0(Wi@g9p?'7e_b9O\6<_?.>F6Lfiq;Ri4;iA+:b@T.[A`]q+mN2K^,P;_,cYL&38]4GgnUlaV6l/$-P[!srVGZuTfum]qH02#%PkN-`AV7rrV52q$4Y&MaaZe`X7c1s5(QY+b-W,Wp=iA_'E:F_I-,8'6!4l?#OXn8qN\j8L>F.)bmC6GfUCHq4@qF\@[)B,#asOpO%]%??Qp-'P9O2-VKBWOGp@2+`V[29n%3YraDSm'h(jIa+`4Y+'TrQ;>;ic@OWft)^u[DjLs/34J#NXf,G[1jMB-+=4b4AYg$j+s"(%Lqs>#lgVf0-5//An\L[Ia`6i:DD%-t3o>_8L=YY]qh;9c\S&*Wg!&]/$!XtrBKP7Sl*.#sR=\]BYuQ-J9:dkNH[>tK1R^UHGt>02%ZCse-gJCk7Cr2A*@ti@80tk8fQA(=_\ma&i?L)$riMX!/7n"18g/sR/Ae?=VAWtR2^])?<Kc*),@RB,("+2`_Uf_.'h#sMje<3##%)RZ.C6kE3YCa,Y6.=6PTBo!/*>j+s)?5ful0;YHf@ejbh)$aA4)F?s.oLag4kqEM_IJ-5Vp+5)D[AHi?aLot\0GQ:iINlL@X=SR6%gRQ%&mQTs$dW@'eae,hG1<(WAjRMdP;//+Mq4uA[/LVg"l7CJbOqc<Q\YS+<-((41PLJWX@-WZ?(d]dM@]iI$MZctHaL+13?b`K/%]qbDX/"9MhCRMWY.+,J*=Xha]EHYi)$HpR=7Dru>duV]IP;CMhqGqWEn?$s_T!R+r]1'QF-:R!=8c(*=;u)I4d]ofUT!=Q_ZR=Fl%Kj4_")9^m?m@3.U);W$4'gI$;II$CArao1@?#^'S>3d+bLX+*GlHc-P[l9846W]dD8#OlNaIt-0TZbFm*'/jmYqUe_aVGjPLG#K%%R6da]j`ie-`>NbY>B%4p])5#PK.])eE6'$1iX@kpogd?%/'ae\o(^5KTe"E]'-<>,F6JK;k_sTDq14:]Q]8(SQQhnnjoK&3_!aMe%;]P.%\k@m$+O:Z*D5U?ZT^?42$TU*:j?-6;QOR1!*B[-nT&0FVWQEAJm:+4q;^sk).7)i5B4`#dlK4E!1d!9nV_gPJ<JC"?QoIa"%Y97a9d:'*gk&tKI:-j&iqD05BLH,Ga4h"(:4]_gYAFl6f.<BoW9'$?PqrU_K+?A,_RpYo1%IToV5rQi!>f+ro_JT4!Ze2"SPjqhk%d([d62T,+al4aP]a_p3l5mAUHjnXhXH[7F"Xn70;b/IoP]l',A"rV[D!7R)C$DK,1;ML!1R@VT!B[[6Xhl85mcZ&<Z;bBI#=e%qD%-$f'lo2*((V,L&,dq@-pbXefJ8Z)4DgF>s+`,i1,CjYe@3l=&)X;S>bLT'MkfkusiS=%P6l9pIBX,H?Ha_'Xc%Enm3H5"N_qu0DC%ObV!<)l.gD0qD?GQ`M&!\`^*M,a]4E[$@(\'Ec,E0dB+C5<!=R%/_f)I/34%ZKnF[pl:]]Xt6QPQDuE%m[(+.s27$"<K]49:t^AH%S)It<:N"2#dJdY#Qoj/`foBEZ7AL[`FLa1u=1?[Kf_[Z9p<MTl?+&>jB$9:I5F&0V&At3TbtDS2?LEbhlm8)un)_@@X`W`r/?5%t%M^t_7Y2Vn%NZolRl+@m"M**29G2N_(:.DPM9;9qsVRR)jXog$r*R?seF::p(I8VL-H%6"fL@GJD[7JKDHo\sh8a2A_\*dgG#W"9'%P!O=&jgH!L4jM:51!J2GN2UdbSJ(eOn(l+PGatVNKCuKio9A@n8J,ZJ[a[DKkMF>R>ik(eja.mQ]%#o*0eC&eF=FdXN(9a)_epl`%9L5!LkIhYTPO4KXhFi3+0I:F0'Qc?rbjCl4*go;kC@7kIq+"qAA;"n!c,9\ZDVn,1Jd@+nbn'8f8=bUp^)>fQK57(La;?9L6`$Ic%3!<$&A2<cNhb:m3K@tNBL_`I%%o,"&fdW&R;]q3>AU1+Z=h]AiS;4+g[.Gd/.EcYM^GkN@lA+%YOXaoO%JSs]R%HECR2s;Ho6/'!%_^nE7_(A>)IB5)D+Y@'DjjafeDcm%M)!0:B+9ur<#WN\ZHLPdn'U"kH^L\n*0&HsrE;(^Y2X,i_*]]QN8Hio10pE>n-O1<qYA[f4%>\0:i\rlUC1<s4"Z:X5sN?"WQ<'FPQK^&^3iPs27/X$]H3a6R)HoQb>)&[FXcA+2bXq!rqe]?Btl$PJ>8fB`jUNA\),r6bu]e8@-%_^1P;j8`RWgsGk9"&=9hI'KrQ$Au=:0q7uJV.1^CZ2s3sW<oB4TX/RD^rl4DFG@m33[f,[<Lg+3<&tY4E':&#[4"5tV0ZtLH.5]&%/+LMgEZL-a(MTaXZ!Me_E/A[ge0ZHEont3^D7KCa]m'V%"^f&#cmCTD3_.Dq)N]h"rVWKYPNVq0g,XH1b+s*[L9h[Pf/+_V@<cW/%;[+Uh)_feuhDS?@aA"Y>h&THj.9jCYXrFC=]P=(>fF&11gip`]T\H?$U)RKf.3Fl"(Fs9!(E1ejKCglSI:5*!p1][-WLkN(OnrcI%)6%!C9I(jJ:G5Kh,8KL35Xm6S15UrhXCi.`WL1G$mMb<Ulns.+[!eKf.QTOu.D62:3dnhmLaANEmoK%#gTYKDS1V^#ZZX8]KsSIf%R(r>jUr!l'"$a%i\5F]2A#I23G%H.GaeVhnN)k\EVLH$S\4W/.91DR.1DE3^??9,ao59,-2T1UE66`&!0,,H\YO4H"'4Tk`>KNfn%XR&aQnW2Wm<ke)D#;T?2.q,TGdU>o"QOJq"\0+]%q@@O#DUU)HSJR^i8qG(,&Iu@\BgJXpGC:!g=!r]SRIe-^GC*l-B>,3Hs7&sB%08:QBJ\G*U>)nopVOkGKb,:O`5(8r(3rXSYO+n`O4ZRm1i4nujh"oOkgG9qRUm(+@MPKA%CU;4LXMmqXRkI<UgL"CO*36.sq%dUe%mSV_d!7ahfRm2DpnN&&dCuK0WF)g*(D7Q92G$>@JEZ,C!XL+pJZJ5,j%(kmU5AR@k/`c<EC!pZU(TZKU[V&Orll<'*$J:,8+,r`g%a_jmmNo&qUlMl2$lI1so]F6mjoX$%"m?6Qhb-o%OjCd,i?EY?@k@`F)$6%`4X1=45\sI>I;N7+_G#Ma\Jtosb?7HlXmc2fcic\V)%k365foqV6l(W@\3\\4D3R<$c'c_p,#aIJEaLU1bPM]BdmVhh@4$f<S]Vo3<>?##!ZDGqJ?ro;aTR(Vf^(#I=Mo4[Q5h+fE&8VqYm%?56ht>c(0RV7b)a;T3\FajDhEPBoeQbIa#9;Vlqjj@V&\h"5P?<sA&e%=E.@("YD,,BDp/=]Ll5AViq<8rq<4&38blpf(XM_>)I;%iON5,hU/&m%1K*bd3[e<KAMY>5>QFjCK?dbQR/uU>t;u5bNbd`OZK1P\ssY-E&M!f2OaX]kG['U=[VMe<FbB3\u]/Jh"/[NZg!4e%HlP/9c<-s^gH:MJ3]if`bP3b>Gs^2+"/DM:P"h8jOXHVm=2o#=IPtJ4/ffp_U=jVlYrrcEVX#V%Ms\ADnWC-AZK+MrYJS5`l*=E,%k,IQHflU8]A1jG3*M$"b>uiSKaQAk#2I4o1fq.%lACG,OdcJ1=2gRC<a="VfA^cpcYFIj9>uiT6pbOhdm@<-IXE6@+p5D^,RkF"D%7<&5tB%(<k:mmkr2I4njf&"eGA^b5PdM:P*O]TMPCq?\TC^r7XCq?]Q](DJQj(HhPjjI:YIj3Qf=m7k*\'X22a)D5jl@qZQ5bhu@%V7NH2^u7%HD$+abgR#Q/^QGL)fF`<R'C#(ZWQ`UAb1&%e#JF-*Rf<6:cK&b`RG,V^n'tu4:fd;GKYd--($2M7k@2&U?EGbA:VY?;%HbbV%q*Q,!%^"-TJp>HO:Xt`tP)/NSIY>/r4QUMDbZi@"k%Wc>Z^G+ak:k8^?j)d0h_*nPMQ^*g4f!,U;AN,Zr)"=j=RIth6UaA%%r6/G9r_*8YG=0=o>!nM"gl:@+.0%M^a;Pobd+oPa)"Gi+f^[([T"1ndatOh0R6,e]C#D@&,qlULJ*&@Xaeb^CLOSB'LjS)G0$K8F%%#0.T40^o+qmWQKU:aaY&dds++"!)mo<qUL`h9-J.Je2"=DM151(hcr_238DLZ%()m?a*5:!DOsZuQ[ci9Z+AmU"k)9k>$`pD_9M%2VmSKcI.q\NO-j,cA#'[o$Y82Oe\U@kFY^1'P7<*)lJ^aO(3)l%(n5g@SaB$'(l[&;k''N"SI`P[]?@'J,bN!:?(aR9btC*317]g%Bj%+4@D4D"p31;f=]5(&YMUp40#)G2L52$Wa^o(p02:LsmN()JRS)%f>dWC89ug'PpE/WD2KU-1DYDP[EUQoCKWN;/@!FNM(CZ?o%]HA?)pQ+'=5?(A'Y%8n7%/\$Ueh_[t6iS):<6li\3>^/RB9-4l_:)RgXD2>92M;N;@"45V_@*qVs#(!rgjC=A&o6nSG=*^#jf%c?%$q],h35Q&I\aNSB2t"["SaqKHnM;91]Pps;V7a))M:>1D@rK9%([d$*.<!-@mP8+:Z/2u0W\Pe%1s)>^([h.WH_!^#"U1mhAJgu!%JT<[l-!dQ3KC0c!b"Cd4(90C;cOZ:dA",))gTA]TMkMpKLJ=jEI!t7*`_W]7PVTB4hanem:\dY`o"!k[_L(6r94Gc--e#mhj5ma_%K\!5'gr3-q!%YShcT6dUPs_?%ac*H4PF-%'E\kSXoA+UXRI)h@^Ij.eQ3bLIIU/;oPpIL13Z1,<.G(^bl]eu9XuM8PFhU=c2G``O%QfAEY.SO;,mMdgIj*KR+i_!=H@TY(Oj19DSnW66e"5]frI.qKj3'2JK7]c9m3Nc1]iRLnn%PoNRot3BaF-$,Q2QD,0IjNEUWN:X_%Ea2BJ7:%J0\Q#J!;FIs4:`akpIp`!>mP<O\CJaJC3_o.+9[\8$T42]q+o^ZTe7,cX#1NG".CZMCf&K8TNVkcd4o$`]26G?hZQ4+:%g@)7?40*AH1O%<//$ld#Gb'U3[:PO[lt>aX3LBOpcDBCKK6=H)`',"!rr(uiNO#[YmgjFXXirukDpFes\UPDan$&o7(ld7KC#,1a%/L)>IGGR150E+)F9u`XELKhhq_Lq*$T)[diXSu8EnoFb^R7A?;SaUhqGi+DLiOYVW-`;"b[[2F_k;GBQRLao0-/mBp)m.=NZh:la%Z$*]K0;`b/SU0sGq9W<o<ihafJ&u9#bV#uH^:5alEoHo5mG5Qu_9AP?RjWQ^Eq2''.d?trF=5$Qk3[PESPhM67qVb/:NUJ;FAhJH%4FbbQ0%Wm8CTA>N6!lOU_Bqd"`GC$A/'#Vnkok>8X7Lho(bW0F^It6fg@m"URVfH4HlGlWQWZ4=KN@3GF&Nk3Q]9rjX)dCF<cZ7'%8pc_:>Rd0f2W29$IX9/:ML9hSfar.,L#^@(h^(L5YUIJ-W$j7];Jm95dt-KAA\5<Uq_FT<nh`S829E)gO,gX$eNuL4qS"tSO#d6b%Pg'M>7shh3If!jOCo#=Za2PLZCo+36]K)*QT$udu6Y`]5[qrh1;#W2n!Z^IGg5`b\/AQ6gbErC!^9FpsG-p&C%!cDo^)prC2bpEL%J*c%?qK@>Wrj//:kKb80DA`r5fUA=iI-s`GGH"L:e/NgfUL&,/E>LH*<l&AB-!YUBT?;:uNuZ/g<[R3A*')Mq>O--o\"!p%/DEG'%NF$-GQO5_1SqE_WXNlU3k90f$\EQtZL=F5F0%o[<U-q6qOUG%fD14]Q.OSq&(Y]%!]d]MpfuZk88Qcfr<&Q/:bH-RHE^=7=?dU=Q%03f<pCbX,#*Ft"3T(8-U3k65F`Wj/T1X(dm,c(+0$g28[q)NuVM:G-4;4/E>j;sJHZ2i)1!"RAq#@ml#M(-^N*6+U5qMTY+-'+8o%B_A&A#I+4CZb/:9k=*'0=*15h5XQ(sjoG*dg#PoK3%sP/k8u\l0OmA9Bg_\SEg\Jo%*di]CK.6nV%O=<JOfP.MerFSUO5L:\B-nV%Qg9?pkbENjdS+.9/n(H"dXRGT:HZd4^R+Rg4j$jc0!u!Jau:FIIR9+ddJK1J]eLSiZb+`0gqA:e^CpJ_PT!frY$\H!>N0P!;XaGk%cK(G4]7(rfCN=VdA\[OiA@1`[n+md6l8R/I:`8`u'b;_I#<VjqI[SA9Oh7=2GQ!E:9EmrrQ[IDg3*+2[Q=IVo=/`@<S](D7po`Ks%T2Jeo^\D*Licle#ep;3*GQ$m%V&s^s_/Gb;Y$Wo3B"cJDb.E+*=a(O8:eeXh=1iO2ngc*Ypd^L233i+NgfOFY^L(.3?,,B)=$A-O%SEBoND[h['Y$Y5E['UbsS"jt(l=$h.n*u[g"YP8SDaNp_%7pILr>sjHGQ!D7OZ=Xr^[#NV.@m#rbq4^#f.Yf;RBQI`miWPA?,,Ck%']C,Qs'7iVG%F@D>*j6dodbLA:LsroqlZPdQ-*"\8'":A0]joL,$VMrra!:u=8aJMpZYtu18i[_^["s+Mgg_*r4Ig_=8dl'O)L9'%\^T4OrU9TBT(emrB$S,cHhb7/i`H*Lm?cegoc$+GXj"D+`Thi60f8%)IWiKSf&?thGilVe_e\;-]^(n_bAhlFld^C7YIKl2n*uCC%%9'YGN=GB-Pt`UIJ(8J5)g*pmoiitpeZ]!`UbLIGpKbP-ZdL2nI'N4A?X@@CYj_E'lV%D!D(>@a?`Eep9'"rsGt0O6Rl0PZI%ts@%qqg?PqbF2N=8a,niZ%i%^Pl*f&pL5aqlX;2?V>\&a*lPm/*A?KMN.G7?YYZOZT[??X-)93.lQ-4'7/96pb^HeZ*E0YZW=C#<PK`i%15Bj\^?[^mo\a]Wq@tN8_FbaH?,%T&n@XZ6]p!]mmmZ39IUlSTi*F+W'-#B>-h+9GiIMkYf1tC4^DDU-qUoLQUVH,]kNU4&\Ri-l%rURRR@JRI;r=8kkCTHooOg%fTP20[m)$X>Tb'kD6Y,#@8J>G32*MZ0UjosV>dM=E\\ki.+?ubnl[683,bE'V(EtTlq+A%-!9])tq%q,EX$cd#_[S^*.S=0GYNcec=sdAI(Zm`"f&'u=]9biLk?Dfhjg^Fh^A6<DO`h"R@H;mkf'?S=TknL%Xjp@RD0io/F1Rr*'B?=B><%QWMkkgCG6>X*mu\gE5Ed<o8=T`p1#t0A52VlPDX-kJlk-pZe+dFas@#a/k'.o(`+R#PMm-Gb0=i3a,qKcDUEhp[9Iog"Am)a*tNG%F6prZq%'#kB60ourRu_SH/NneSVOOb^,m,p7YTc1%l6<1QEMoap3,<55@5F\qg:EsjRMTYrhJ]A%;:0rqZkko*rigCSXtjChTsO'%1hV$Gq!m5:mur`D:K/h%eAK_Jp\kCLM+Du?]leQZb9"&D!8DF)EY,c6Fl8S4Mf'=E9']F!CT!co"JgE8E-3aFZ;s,UNe]jca0Y4B%S^.,o`S?Sb/)J.bi\PfH(#)o=]>h:.2W(b+^%]"lRI@sPk,qJ$p0R[M>^RU+s2%gFcDE9CnH7N.%aX@,5IRlL>"\0/]mWl:X%@!r%\(]_S$r'BeA0u7Q*`"@MHgaZ\YKS"s`pLdqUQ&quC2)YW/&^:</Uj(9?^\mOg\:KlbGjUTm`!](]9Aeb-\#`9XGoH,UhT@HVR))+%o+?JXcC_7H2-)\slKm'MqG`4cB5>tA(W!irmeP;mjU:k8nK7#YB.MT_2>Z$T']8U$S$/s@T?%`0jhH8RT"m9H$_k>,F+4tqcUIZm%lMNF:\Ldc^Ha3_2!klk@oq*(*nTW[PgNL:-qX(1Vhgc+,@bK-FiI_'F*5RQrMoH9e8*eLO&*qF8#A<Gqd7a<:>C!KcU437#lghI[%Are<(I"qlp]jWGGc_"mpCjCAUanW\cH$d"iZ?#19LpF4B:s[@;o<%oe!Ijmdkth'8d1lMhs%:mk7OfTi>>&)Z$0^$D2<#t(#UA9(%oa'3t*\?[Wh?nRpQUk0VGm(np<Vo08cH?,&GNIYs[0p=`_Xu/:S&&GJTn1oL></hOM><iKq#LjFHsYZ3BfpaTH?hGn[.S7aqe]08%9#o^Nq-Y,D=U/P64]Zs:T\<AAQ.Zf#.Lo,%0"d$)`6n;0X1?g?`pSP.V@pmm_A+@=3f=qMZO^:341i,M_Tgb-AX5jr$8oJ,&fN*j%SaS/jA1bV#LNi7Nd0a^kpt#i4kOmX7pt$<7[,7/?n'6i9f7?p`Dn,GC`2b"li4:B0J=]F=OR1::(r.s*f,OY69A'-[#F>AEmq";*%o_Z0LO)\k)d[gFS/VgU_H9urjK^HSh)Eh^(hVe@oia#ER;&/NB:Rd?GZ\:&NESK)a43rh?2I#!Q$ut-L,'Pu<??%lh^F[6^I_MUY%"8>!X$\5A2:d$fN[P[np+jlMPXd*_c#]Ku:Hq5$12IOjWo;KUZfZ!ddWnPLo1lQ^oq0hq(_Hnf+NQn+knaR+i>;_%!I-[A2YMDn0%D=OJ"Fggi&=e#*U"#.F-dK*;)TFW0+I(r4QAtSRUQ@^$V?J64Amrc,f7MS)<HMLa:T3GIo/G2gh4feKoo/jXH/Au`+K67V(d8"m'%Yin@eJ)$">)WI'eWSW"]WF3KE!q46Sc.dMlMgT@7DPP[+hL8pk1/`Rm/IUC'ZlNdC5'=9M-\VNdg7o*W61])'"`#XWUt/%9n?%mk%Y,=grX66DP7&qh>09.q^:9@bQXhGo<V6JuE$9RXV>j^?!\rWFGqa$J3^-$lE<p,Aa8#K4BQ^a85J+iO.UQY-T-htSQ`ll=2D$r(k%LEE^]^T'5O^NA7Pi2)?9TNs\Xi&0dJrNn9Yo#m#a(i^gg]`4L,G4<Jb94C33CbYH/r4)5[p#*+#I\Hs)0qe!tJ5Y!&>Y"OVrLSEq%e^g9)f!))\UO/Y@@89%.]ppW9<Umu:$::bAin<\%+:,Vs0dD)INO%/XG=U)"BJs"Le,4n22maAQ6u!ShZ`/XDT!b5k!(4\NO1M$b%W%I28,\f;7;LK+@SDT7=.erYqn9m"(eu2\&NAlghg2bbD<bBMcK<2\DeM*Wh#23FAH[.DZ'-^deT3X!J,<\F(j^<"3X=Rsj/;!RZ%Z1YaJ)^P^1QQPU8g!o`@RViIFl&YY#(#N?pZ_0APS*Q6DhYW9SdSB9lLojUi]4epB:#+u@ShFE*GU(>pGGUhE]@2'M['Ft)Z:!mr%8Dfo*Ph76SJH8AkV)OHF3U96Sn(6^O^\Bo_'rg0e+j!?hUN-%"j>Hm-]&f7g$#B4mek../R9$EadbM%EMKla@rXefBaUa<l&,!mg%rBN14G1lfXHe:s)=YYE9?b]9`i5Q9]gLtfDIpukWoB3.CHd(J+I_,/(P+QL-d6X#3@_t%W=l)L!GgAsDiB&\Wih%=:]$E#GEFqEd%M'C27iMuJ?UO"0_#0l8m\F:S@83c+YQb,4o+(Ve(%nBU$CFJ@-B:W2!Ke4j&\6TW3:$)'0X/FUme&ncho!%k.mA>(&jRmunB78h-%maQeg(m9uEFkc;LFo8Z0/F719UM<_m<bBCQp-\e(;XKq1gOI`,rq8@`I!tMRk\B_\`BM30EKcQVD\(`48QG0M]:3L'ShUNj0>jYj%\kg2)F>c=aj0nupU,Ke7W;HK3b0NjG3I1?`Od=hCJ%=QG6BU"`o>amo8O:?sr_XDu']dF'5HH%B7e^3dP:H/'Gu4mCaKPEiaH&[_%T9YHJ2m(A3kN_X'Y.@SX>$6-abPBQA7=2)aC)sb^h:lU%+)Y;,^$9?Tjn6IdmV_*([$pB?<cuN14OS2!=q3W</TRWEF)_$Pg%(3+%G500j(]Ed7`ng@5naH(W+7DD+I_BjD^HI"eO/%]&Mhb$Z''hVd^Cf)AE6()/hD]o'gXeMC+.kJMI^7E=`Z[IDhK/FHJ'c0BK<C]s%WMQqZ02kNhf"ol6:)Cp%^o>\:KZRW64]1Us515\'5\fqL@!;KWj7?=;K_iC]D>W?bn:(=FRQQk=<k9*_7(2*Cli#((YMASB5M,@1%^o1&C^>90nc:OKH8fm(d,?gF*aeN*T7'0-T*p$!=+fH_5O)h'/[PBR_PUh_Y)4I'Xb*>G:=!e,fQJa/9MGf$S<F;T$`c=tUKFBUN%L_6I[Xpib(@r]G]:L>/IgHO;U6YuYMDgUmIbti-DhQ/<aFS:7d"?Vn%[7s[`m,.LC?]j)l:3qh*7s!at<5[@,b8khJ/KDoT?7J(U%=4@&-aU&8`@Ipn0oX;SJ-dtu)3.5^roEimU?f@WXMb6n6/1%@e'tuZI(##Y7;)+q"eOZ_1mI)o+);868IJt5]JKg5sL5#akFWN?#%s6q=XpESA)66r>NO_iITE]8Pt;%n;kB(#W@k:91(eJ[u)hnI=m!W`kijdoi`02C9?)&L5fHH*fP8"k?JMWH<-d7';]+<kId6sW2`%%O-3WGbQgb/-cbIfdH&/b&S'0l;-&$P\"Kr-N.I[6s1!DgXS%c(K$KN8/rI?dRBD^+;2_>PB7CJ3J`n%FE0".X?KTq$`Y&c7?lmV%,1kmD>sqgo.31G_F:i)H+Za]llQXJl&1QeljBP*2)%IiorJA+AZ;biZJH!lpjBu+afL;%$P#l6Cm39\Na_>$-l6=AKam#M\M7SMK%'PR*,e:14>:M]"jN(Qk21',ElY"DH,+n_qs\;m7l[h(a62[RN$Z!0bp*f]V*.Wu1k-i99kTr4/Yo_k:shHcLtT??LO+:#%*_`\e)%cdl9d=*O>WhlTY-=2k2PnGi$n@9hnh<-<R1rpUN%T3(0SCm?YQlZ\WIZ^'.5hSrR%GLaECFT/GG,'<CYI^H^a?*0!iB2J;9FWPkH%cCd#l["-H!1[*e#KiMKts.0(gnc8]r#QK!N@Bp7@rsaIjJUdS%k[.>nqQB\V)lm<'(EY.ii\fjd;:X]HNC?V8epna<k(cf1XTR_;%ig>M3=NnY/`e'Z"@].?nYNCQn$_A$^im8.74EPA!ms0G:2<G'^FhPY?Y8.?Q@W!cV@ZGSV?HmOY^C'Y`GSJ2S"`Z,M4Vt]qeq,"g%/.?;hi&H6q-'8RP]$R,N9DLHcN=f%dK";rsJ(S@bae@>`B;8f/$".$04=?HP\t%nR@F1&po"?N6*>he,T8)>I4N8glX3HO>*&5fN%`&AFO@5Zq`@roRb2maKLU*\q8`e%CT\j!O_`f+LVNbSTQ4_)DbY6AeXdYN;V#dCM]lS+Qu8mIooW1JA<9&VM*GsNjF3J(#BY[A"p%@kK@*cU1g93.RScKq?J&/9GQ-:pU\i\PSXu*Xr[0oGm(j$e+'(3'QUd+<IS;d(I8j)Y[>6J-uHl4s@Z/5bG`gk&?^\oa5+NG7!jB%kW^8r_dTWQ#^q>jF'qD[nR6)Pcr^E.@0^87ZG<Bl6O0Ou&YLuEVT08\4b-n4DDsmkMs3=g-.M%&n;e.8KC3^^3:r6keA;?/hke;5%4ID<Zb`c-">rU8S=3m70+s&/sELactL1(1Xgnlcu19-@("@)rsZP!%-2C^Da`gm[?87MZQEs,i>0M3^IR0[1C@Gh^aLCT+<&Kl@E%514lc;\o\c"eW]B!Q0<g"NH%Djurd$#6@R_:,K&Z(ID,Qm%<GB=bIcA76?YZ/?#fR<Y:HJ7*9]O=qpi:!3lZ+KY(%kIMUI#T8B!<%LBGL"@4gP\H!DIp6@aGm>!elHnK%8DMaL\GR$nD6^`5A!fYQe\rL+ZKPOJ[Z'"HV'c6Anh07Y-Si`36fj"(o9krQ3$5eX[Z+a2YA%p+P8`nH1Y@3-Xj0Z3)uK^rK^BKuO2jE@plY+95%*K@Gc6Qql7>;8?EQ-V!h3&C,YBU$pP_8`'W?:ZMMtn6j2Y"(n@l!9StsM@LIj%7KpC32m+8*L>0u%o1RgX=!@-#NZeIRLaA+PLiro/Y\aLJ#X'HO&=?c8MOamb?qi=8ET@]bnRIWI0Wp\%X:[-o?m2YD'-e%-;F'Du%YRn>X+N4$D44r(llk1*9Wo9[8mKZ-ES3_p-0Y"L#JLLRhM^6c\(6:@&1]ZipHNs6^&2>dd&82UTSbXD1\/,`7\cK)`+,8)I+^0Q1%4KK6?cFTZEQ\C*<&P+`Hr.l13XGho9&.mbES0f8t+d-r,97iGHl@i3YFWr)H7n>2tJ.pi@;-7;X:"d^?W!jF\a3='4>]n]*8Ah[K%YXF$b%&=GU1VekN80d87!9*1SfUefcQnk/r,2Be>3\:aDD*kr:_#4$e6D'[!%un,;PTkK_rGHGW10E6a$G"!qORQc;P8%O\SeBbk%%oSZ,"jf?,d.VnKg5,PqOX)5Y:EaT__=,r*#*pYE-u\,gZ617tLK"=S!+6rE>o5UJPJ&@[Q.qjEWih)jTj,XAOrQm6%Ac<#ZN%p_%A2aV=Z^;g>32I8(/J=49!rF,6"3GXng3FZ1`++D*Y7"b[Z\Z%!D;70d0L.JrOYqM'#jEAL!Gs)HN_mG6f0laZ%r4Jp$-`]/c8]5E%$>;h(N;sCh\d=iE75,*g-Y!`Xg]Xn/k<<=Wj.Xg)kn*[#Dggi\9C9&NC_%r9kpoX[*$H9<!'BG]$MZr>1"[FF*$".O-na$97tPlX%jG@,>!b*fci7OmjKUij&W!U;IE$eOg5BPt,=ppZJB-92JM-IN\a?gL0,aJ1C+9<2O(4omN.g?1kl2fqX0ehP*IcuW*9#;I4-6d_d%8oGhsHH;c"l_H7UiY)`5c_i&m@Ydk;_MlL=eti.q%Ou"^-q$qrctia[%S3!1;(Tcj8ogV5\<3:[:M:_65aiI-I-(b=KFOj*i1I0m%M(sRum*jrb<X#RsnVCk28/IV`\=fK;f_.K\1^ji*$+%lCe.Ii-Of41X;[=/^JSWCs-+Q8ZTc^hPW/`!6'G4ct`L8hYB;hhlo]]Sn%AkHujW'#@(\3M+.$Z]GI&=S;A-HmWrnHA.^`WdW>$*+7F$3NPoLa0l@Qlgi,6j0kiLCfPk!XX_U,QOH&f6rh;8Khn7(=bC[X]u\p%=C@7\n13^?+T!Q[iOXQP2X1>-^h&:aepu)%ku+b;"9KdkqAUpGngfQJ..Lg4;B4oJ-\'<2'HKSp',*`C-UE9MIG_(DJ!0nh!rrAB%2:ARN9J(t8l@d!NnMGuVcpp&6+=rMjTrLanWg@iAo7.<9+Ls5sH8/CO3e<.O[5K`]ZkY&*Jb?&ket_'>!d"2M,G!41KlZ&AoKmj4%"b,C!bO%%Fi3?dXJkbQU<_[%?XQGJLP_G2WAN+=G/]7s#7sua=3=419m^RS;$m\ttNH*`S&^@P3^lAeY@Z`Z=fMN-JejiT!+AdeL%7BFYIJ-!72d5[GHY`CC@!$X')2'R>V2FM5EJr,A(J"^T@'"Ktg4sc"-%T!18ZP4(!O&6SUMp/N^6RI[YX"Y`NLrIfs&c+EF]:L5R%876`V'Ic?tOI7F)Etibj7Dg+Q8iO+j(pG-IeF0(a!te?I7HJP38HcX*qoqE=UbH;>9#UKd"<hR[%CR37pGnV:YuM%32qinW!D;4-%6U_/G,Ik1B+&P0*k(8:QN!O5`CMJEXaVCHb!&8.A0MA7/(E$uGj6k;&Nbk&'=h?'s)9X:?6>dgUZ.306_d_CR"oM&U*!h)97f4r>%dQq92.)rH*d=\b:'CSd(-SH%b<W*!a#3=F#,8=IYlTXR0$sc]=#)$.`MB;[#.=pt]*213n@<6KM5D0#B!Lr^k\Wp\Skc]X0P<1J_%2Bn]3pmo9pG>8\nT/SG:.*/9";^4*gK?-@l&S#7f;$D;*Go''_1*[2;LE/nJLf"LnMAu-8Eu=U&YS\it@T9oQQg/?a'-Nmk^&`cs%G]js$hAi<F-6gE_J[m2;*U4<K`ABg0#YZNm>I'Rs'AbuRpC%J-f-aG@Uq2=$LS;Z&T0T1"#dOq:Pn^,/V*Gcn*K!MV7'maC"I4$W%6PP:3@5erG35M9^*2aD9K)f17%U)9*@j65]:!<jM%n_CQlT1=K"4$&6aI7=g@cj.q_pG4o=TT0l%Adke@M?cJKYCU3TFOOHaH^#B%4kcY@[nDEP,S<l<Ca:1`"@HP#YBZ/&9PFL:'RGJaqmWiciEBC']acBKE:b;li'E0g*BeOo.!_FX:,l(9M*'[pBJpLAOKBiV6lW)L%_U36F+_MSZ_`i%[PcZR<Cg9X<a9Q,jH"]b]g[Rk'5_l[9gE&M$S9P/R@nmRA8J3^cSb]W"!0C8"]sM1NEK/n*!4`c]Tiha%&PJ8)%I8Y5%"NKN6Jc&8P*5,;mF[9GnrM%+[PVX-cQlL[.BL-3<%MS"K5p/+UQkhs".!2T%F&3IV$AIPSd0bY]`u'g_V%DZR`D&r*+aKpn%,dp;d40pfK-)3H(9=`8$Um-S["N^$;9BZW7MkWJ$9";&iE&'eS>:18L2=P-c&fODFUFTn<1'sX9-3t)3%V-XobS0s9Z"Ge'ZpoIR%H]#!lN=P>R+WV50(68ftCDg#@#+Y5!/;;s#ct!`uSq1gd#Y2JFF=GiN!@-E,mUH>b[6G@P87<M:&SM^8nI'%b.,R!#/lX#:!5O%N%?V^Xp7jc'Q)^]EWF9ll%6Tg1DGua5,U.Qe$(C?\m"]@Grd\L.TZJRT5\R:t]YnG&RC`nbnni3KLK;E)!etJsC#W#mC@gBsJN!-Am%&2i@l.&4A5<[Jh(RL"g3q?-T6X7[Wje)>QpC-t9+&bB^#4BO,SG;P$qLY-eSUZO1(K?pL)"Fps`'`,,]8YIPq?$>a_%\74%8TU"*%r/N96As>n!0gU>7`,JSMLqQW6kE-]%76I[f+G#:h)6Pk>+AO?,LCj!HE1#rh9Z^FZYIXcA_pHqV_fq\5c9]u9OFHPP8.d2+LY+c9%f@#cmr/PJ?/kW[r"AA`o&WVl9:@kG>4?:@?;5bq(4X#WsSrTd5Y#KO1R^@H+Sn%"_kl$C,0TBO&_9d6G[1kVS4p`)u4g\Bi/C%YF%01@D/@ojmq*Lngj9DNJ@m@&Fjan?pp8ou0%F<i$iWr\r,5ahsR]'l&%(f7;1eI?(!-AG_CSVtN#W9cfs@Y-Fg`t:XC,T*TbGNhMJ%.1VH$IX6W'[6`cHai+Z)afW?`l(:QX1+3,FfshsI.^+\k2[g4)\/1SR'+ic(#%qjPF3;fO$\@!W4Hkd%Ic<ao>hfR\0oSf&had+O%,I=+@S1%UD7G>-r91:OUI[EYJo5CJfBhZ*Cn9d"`%%Z9@[!*e3Zr>2aUg)&0"O$I8qdkN"$gPUH8(%VN`u(BY&joC-7"jbPEK"%V%FGqN5i>C%2Z;1O$.29B@T9)P7ZC@3mqWKt`@T+rckf@m`:DJgYBQgtO029l*8V98gme+F!QAAsP$=k2H;!=?7iTI](1R;%,!^p1E%6<,rVjVcNL1(/Xm1Gi\n61ikYR.cIb:uWA1ZZLqjAE":q&4:e'1#X"f_aEj\g3\>g91jOAkiB`7'ZpN.7(L5<9ui)B'bi(tSQ83/%:Ro9?20lD]?=5\s'?"C];g<&R=<Dk//4=g(1o;WddA$2jBd2-"0o]nnR#)-q(a<s1Gdr]lP^(2e_bnL5G)R<N;LN4&j;bK;koMXb%`'L7TjW['H&eHoM(R[`$bJV9>7>?U7\V<Te&Vho6@jR5Y1#MVnqWW,lT'DD)gK8_C'kkWD9,[%ACBB0CNnkb4:"T"';VI'Qj249\%MbIX'7Af0D@\Y6*G*2Gj/ZfYs.$KLGJD?t'\m*&@cmXH17g#MT`66(9j5g%lF@,u_KQ!+SXioWo'?)7DeV)pe4@.o;!&Za!nu>[I%Mk`*ij)XWC8L'6$Geib^L:0,M7'L4_8C2s=fl^.CcsfNGH`?k+PehE>='4`2a($;8ch?F$K]$KfQJbuDd'WD(HFO<mdV\MrIjjI)%[;/?q81;L_jp<gOB4#mQn[f(8X+?qYa<gk*JpDU:m%SZ7@*,-nk!^0lL8(AeD'9T9Kln88nf8$W]p<BDBhE_FY;1Dkd*i.4'qiAY%`YubF+rXB)8,uV7*=A@cO>"Wpi7U7,K]kj56u+=`ohYkt2+j%+l\D(O&/"n'$G\It-Mu,Q?O7-_`"8\>l8AhRJM4au'XQg-gR\\C%R(Z.!hb]IR-bb:8Bh1AmjJdS`!I`GH[-TV.^dp#F115]B'[egi>]<PQ;j`KKNr(9DB7W<m9Ep(f."<#PV0V-16B(`]C!]Gkcqf]7%4VZlW,GD%J$^%"h"-YQW["qIM4T3ccMijoH0b"Ol8+`%0?V##F'YohER@=INYTFf'(6nr5DGNZ&`9[r6\O09;P<*/N&NWnhctWt)%Q\AHPm`HQ?e<1qh_eMk^=D/_.DQ&>OLl`;TOb?!`0)@M7_npW)@7*Q).jb'D`+W@FloYh6%O&^'=%JOh'1Y)qWL.cL+F,)B==+H#%,O5`4*h@g>H5K8X+pNms5HIU^m*SLX(e3sC(_/egO_54pLm$=&925[GeeLjL#=jc)XDYu;f`Q*o'S6O`kKh([g*7r^Taa6kasB]7%NQ#KIN2;E6("ZsEF:ht5ASeLt`eST@*a#DoC'he&9WGln53Cr,C/>gI6Os8+k7KmeN%6R^k]eYj-QjKGf8.S*do0dB`:-*8Jr0_A%'R=4G"Us0"7uS9U(o(lo7Eks>LINgQJK]mrpEZu7_/Y\I%7qqE#T=,CnmX^P_[=&<Jsmut+^l&g\e,I6Nr3!WWhaU'l8`%P(c]U!%2.1B1kQa!IT>gZ=-?Y\BmtI5V+R6r8i/l'"Ceg/5-m^p3Oh=QLCLfS<Lf-_e?4=au]JbM-"B`mYW?ii0+H`*)P?d!APTh_m=dO0)%M_(hVE^]i+W@12q4I%`r$2Z+QdB_QG":7@)K\J*]#uMVQZC_Fm<YX+1>i$kd)7+XLqhg='?dP`Ve6bID$h;H;:0?id!qUdX1IWsQ%J85Rm6GOc-K0ldl%$5W!66]%FX=%ssJV:Nfn1to7O)>aBRqG#X4UB$86$eDNr",0Ygu0q(k0fs1JbYA#<fI-t_[YZrJNOa6WeC1,%nQGc>_30KQUF;!N">u7i$AZE&\Ru\8jS%34Juu9(VPmV.'Tu?2m3R@T<DA"Z]%X0.b[cZm=UHK'&iDDnb"P3#P_f_F$6qlIT,SIZ%1UU^:e=:&.TlU9E)"QohLnE!f&sL_V\5"/Je8,JqNRIgl6lD\WQOdJYL^nfiSAkh\0WT&D]=od%8mlmg(ON/3M'ZU]e@]#L1E&!d%<gXL%C.4?$dIRurVC[Sn</qnd'[\;f..TbKWtnj#.q37Q1(MZ&BF7F'qSeG['F-A8n;t]D!0(31,r)7*6L-CD,ak2+nM,*>b<?8,%EW3P+JSE%b;3r,V?8_BTEtRFM$"k2td3/'l:oE=[PpD[#-q\VJmOOMc%sM\$fSJ7;-77q:;.VT9:@iYY_d-5>PJ_E_70:M2qH\]`%/rEfn$O&^^LeolB!klAdA8YjQ$YD2>Akes[d?+]`(WeI@>mgFcm$SF16Q6':(<GqiL.?\P2jh=pQuZ'!Z)ePqRp8AL,T++%!fSAS%&<j[+<\F!lR)jm,#l5[2#Z`]8-ZDLE"&J'h3LKc>LSk^]%aTO9fIRaS0l3R228oo:daBB^,?`0Q$a"22Ip:jamAZILZP5)H)45s%%=XHC4+?gI+3X@**+K<Xq.@CeO:\l:j_$X)(?8jSm5!gp"#+[`0c/hS0\U:+Z#pr6[Pm?38>gc$!U^[r:qMeq4JW>Nm"&A4+UM,?)%,'",IWgH*N</(X_7[igPJ/N*n=irul+DDd7,!&LS0Ll7R)@..Y2ARJS\:HAsCSDCW:Fne4>):4TYuqn]`Aj;g=GS]'Vte:,'[ie&%Tmtdm`(Wandtp4q19LiN1\@<LQ=>^gl)hs\9Y(Fnb%W"5Ag$@OR#>rK,(3@!k^2GEI0lCbn2NBE'HQa8,?S"qcY7O$:b^bEleu4O%I>DO:$Gl2*)G+hQO93Kk1]^JSb`C,$ni=)mqQXK!+Q<Z:?<Tp0WI->c/b0PlM^LoZYprB&+]3T8C_Yh`1/[kkE/)H'BZO4%_H]EA%72"aU_WMcUW"Xl:N/b7GE[Z+Q.)WaFX@34h?(d6Hd\!oHW+O'`#R`=^'H6-sEieL*/>+4n^]I2'5t&Z6Ti6[H5o>D'&b2F-5a*D7%W1-m;!Yc)3\c]3=Ic+s8:39e:.4!uIAeW+6<WF^>WehK\C+33%`)`"p(6QCT>Z:F_V+XEh^asOOUF'+2M#!>TN;HEk7dEqh46Lp%%9pk-YH_C&/d%q@CNlFD]n&3!Ci$jd2e4;P?d7@m[+X+B('d<og`,1p=I%dE.>JqqB;4hn#JuQY^fN>1V*=mKPjVVWfQ7,$m#,4a.%Lr7KPV<ce1.P]rl/<LSD#T';%+R9mXkD&%/`Zpr7l`K(_O_[i#+On'/Wpiq(EdR1>=C\@j<=/kl@jlYf\fJfQg*>`@IV>)=E)UP1%O.k%Ue\hriTn4P;R=R?9Y7nph5ihb#i>;W\:RQ/r6A-"3@BD-cgpt.).R@$&#sbV\T;b2@\qqjtOAa4'K,cF1flJJe^Ot44J.b!s%Yri@N-SIq\D0eH4*V(VM-`JP_'uO@sQkW4?1eKcq4D2*XG5qc[A$q(h1!F/:KMZ38Y/s)!3#OG*ETViB]ZL=#(0Mm1[t3Ec9M*F=%M(.o&M$UjS7\F^7T+POm=dS-25a=X4WC'8`S79_7-:?AuN4Mbd,`F(,+X4:#$4_priX)2.&Q+lf#IA"kTgN9#;hQ=n)So@%f9bA$%9F::$M(,26doZYaYKCt:Lc-q]9H<;a#YbDBKIb.uAcWOL?qD4n"hJt54?[T'@)3Q:d-)_F&s4l1BF0R,(lC^,oQRW8!_?&&5a6NF%(ebqDSZ69R8Z*4ems`N24A9H7B:6l*>eF8C,u&pAJg?p$$W6KG`$>jmb+6XKD4XD?/d2:i77m4q(qZ.<5r"f8ZOi9kLsYf'VG@s]%&Q>!chJ0tFX+hQKUo7s\LeUK%j&RV>D5EaZ&6ZL;:=_k>XA4T,+3GItb9W#KceP6/Hbkn:a!ucj#_D5B_jJ`2>I)9qUWbN^O;"R7%HrZA_K%4`K0A1;=AI+FZ=peD0=JM'+m6l"^)-3XTR<9IDFF+B=e\l,q,$5Ws:R;^!qoPQok](_Sd_P=u[mY7+@b:noi8g$r,pnRj%Tu+_b7;3lhRt;m)UG-ht<&ZPN@i\X-;WX%iLh87dQMsYI5mf7SXHOn<aS$Xl.Hd?))O`$F%[Y&YE6IbW'<]TA!03'bPETDXR<`fu%^(LH*8JsX,Zf2Kh7#alMMRdd"P*r5g#,;':$)ZLWFV@]6DltiOoiB+TqT)d`oaE0u8fU`fLr;/G7PKuiZmcso@B'JJ80,:m2Sr*@%K"qXAEF"rTiTjP;\<sGd=mEVWdG^%R^2AoU2&V4uH;"_r(HWa?<#%/"*@@F6Gm%!R0sI4N\tmXj]?\>85WXY=`VY)E!Jg5^j+3b/%!m-dr]+U!!5sR%O"!RIdlB7P$CYcpnRcCD=^Vju(,0A=OR%-FcbNJ"b'07[u1Y5_9BI:#X@=k/o)Ej$aMQDNP_a/@siGVeB=B$m9%&n8!YCZ=?AODd."EBtSd/]IRS#`W2=QXF8,clWoVo8H0aHJK7Y?rS&.(-L.hF4Uiud"pQ(-70QE+<p>BnHE0#]GJcL*I+nX`!o1i%7if<hQAp>=a7=1_&kEA?.Mbo^K=Aq?TbY0"7T*bEAO;gOPc1c4U;j#a21")k3q_'[AlG-njdE5>]CP=@fGRrL"_?sAM2;+%iT:GY%mEaid"!QQrJ`um("B0_+lUkVJ>eIBh0\9PS;IpR/7UomN*9e&2-J9!__3bU]GQ*uH.H-Fn35mcj#ULXg$[d%>-.ikS7q\?X*0e$h%;*msc=\44DW#gpI]iX`M/VFi]j,EIX,nDi91.6d$=2F5>MF:/sWei-)V6PJ$b!9b\77sa:1C.q9EJNti80HFQ*"hk`@i5t'&CefN%[DTmI<+4P?"]C@.0&*&sh)\t.MZcL.H6L--g:i]Zk/d4#R:E!'X@m+hRAH]aO$l72Ki#R?r%=42?f]fsC.]%5dMFZI=-*ba,mEGi%j`0LS`P0AJ(LEZT+X5US&k[[B?>L`.C/E3A.V6i/3:KR:\i>e-_&i8;mM-T6G]OiBYTh%S@P6IF&W=RKL[N2JK/Sr3c%H@4PqL'2%$W/r%h-Yj*'*a'Q2WC[[`5L=c<^bWd>i(3H+J=&X9\JS8#3NU;f'Wndgd#BaK[lYAU&]>V@3=Hg2b#/,@4m;)'&SXGEh:Vk+#r?V%$HOVoLi>A#jF'j,S_T(]hB2]-+PA3@MW0%Z"p24FEZ'"a&rS7kU*((k,o@;>8^K0u-,lfm68D=cj$k3/YRgX[1_(2hnf0\Z8%2+W%$-.XVq3QnV,=J-`g8,Db4\6DS3Pa3Y>[C,)L_G(YUQm#?>e9f!>mK9jWgbPOi\Zi#Yk@i=kD&1H%+OY`icL;FQ!>Z;&r)T8DAd`0%83U=jH;'rBU)t?:g,R8Ds(P.C;<iH]rn:/UjqrBQU(eY)W]5&sPC^f]>/JdK+QPd1IsW_B70CjBW'*s?jcp+FQh]=SOumpS&H,<@%FI:nG&4%Uu,Sg-?aKsoYdFV+:5pd9`?fDqOj'ostZ5?Zq6DEYIAg/TWNgU`V(Wp607TVL9Lcdc,0KP:c,iGqIe;ioVY4%ckVmLb$%ZqB9lTec@7eeF#^DBf.sTrW)u1B7Cq==c.$B$&(.`/YQ4ODGH6PdmJR*VWbDMgXV>P8M?I%cLB.6VldVq&!Ct#]PVk,D%Fsob,rS%"Qe[_?U67<PUqG4R!8m^b[PY$0K:\LM9M?H8"M)N@h'[A6mI_:CmItX`/uKF#3(HnO";%\#n,-i5uM+Sg,4HlF\`,*)7#%!>"8=q%<q$?H$0T#?quK@HR8ei1/<B@%lj*,n*0)Z4j.>7B7D=ljW0TWGfjt4-X&tGp*EaRQYscUCEtt.gna8NNo+>75_W(ZaL^^/VBc\,8%'+p+e0N]l8,g=M2NotDoV?EUd`-28Mg2g40,c'Q&`0WGDTKIET^,;YF=A2DA31pCs*-2_]8r1:>VMGBf1Udgj4K6[5f`O)```cf*%Tt3!QQAVJ(UMGb[FW<u")#"ng]9L$=7J,A#P49icgc!e+pEV'SLg6MXJfICM,mgHEB&16:A%*!lMElEPI$r8LL_qrDSZPdNP_MS1%66;M#k(\IfKJGmt'<"3;P2eT&GCE*l&J=Pe\&gUl7gLL`TghFU+ue4(7$g4bihOV2+l)fl(BgV2H/688oF@I'M0ua"_b^WYo.[%:%Z4`,/$5OfhHmF\$,CG;912U<`_Orc3YDENQ@d'b5"&m.eNd(EB/EPjHfN*?V]pS241:#(SPosPO#!i/:o.uW]8C,4\I!#IFlD?g?%2+qAB,u5=?)]847Y.A,GZn:P=,0r1[:$a2R)55Ku1m:S;?*_r'X+;rk%NUK:X5sXUJAYYEP]1Q[*pllg.M@MNki\a<1<Gt95[8<J%A!ool&8RaRV'qKS&X*D1M!utfZ?"Wn&6&8e2FcthJJao0c8nYuK!hWU4[^`=Dh9E<n<OP;0G*3W@-[#))0b;cF'Te1k,>mtN4;5K%']CD=FBr>%;,&gs9ScEFNDW*4-\C)tb_6-s6`@j@6#.GLRAal-,n],.+Lema8;,`sou;oU"$cUn8Npd4r?MGeH+`-`#*"9kV\T:\%$qpd,Rd2GQK"qelP$eT7`OeFWP/d8]Nq^=8Lp?=u/GUn*bl-kc<Pd6-GLTp6\kIo?&E[SI!YN[pYS:?Ca=799`",R+m[-SeW\mlA%l:*3Ff[-eC5SV740J5!oV3@WE-GtQM\d/t&ZB1LDr$W!:4CVcK%Eq?4Nem-Zf2t.BT%?PA]q6rS9F5;<7Ej9e7CRq)nn'D]($N@%%IL`)BfXMFI:G:&##luV6N('b4;(@`I2lK([6pc4Y5t,GFG8Q,"M'slHRKMrAmWDP2biiO@IDNuLTP,A[OTEZA-I-]f%u-R&DlfEg%FoX=-!F>Dp9-q8DC-iR_1l`OF4.%q;mQm310hT]LNl$Gt])0Ze&,cUm$*/^QXa@<gemoogbhC!',T5)W0#>UoA3dY<0>T&X!"j32%WX@['ke_J1?RKn$E(tUK\S[`"mo*1!#+SW5>8#a/`\Imh0)nFg'PW@`#1=3m-G8/(.7nrT`t]4PQT_<E*rHAIAiJ:rY'%Td\gkN(%`9mGXaK*gS83PBH*GZEIVPksG^?g(K;&OnY.0G`AGqOjJ)TO@aGbKER-9d?91LgTX(UrGjRde=H1Ud\*o.fCN,cN3-qtmm+'4+h+%$3Q58o\?iIM7>gG+pB6Edu^)M5i`F>=?]CrU:YEpr`me-)oPGPF]"q+M$#QM'\1"?qJbpbqcIDD;Kt`_:M0B^'oIU2bgm(U9K6Y%%(_Nfn'm4=4+6-ENpl/)e"N3YO\f(ZJYpfC8j)BG16?To!l[p['hKN4M<$Ob)0nDNI!mSq#i?BLCKplaELRKQW&Se=#7DKg=9+u:7%n:DNn)K;8),_A_m4L=R;Ci0VXN5WX;E<PK7p.QqD*8qPdW@V19>md,b<nM/;OX8eomJnt]/\Yh89_p\*$UfEjbc_Wf?/3V9QBI%J%:_Q^BVA`CLVBHb"Y37Q;5[\+!<AW8A?`OIla=N#MAA3'_Dj8YcVLYqmA0gq`8Lu5k7$6KR19hd3"K)F@QlP!7KpUT:@s3egeUQme%;iU$D;iRct;I+Kupb`Y[-ipS*N61*E_Wirn-al7(L9+-S^bU"#W0,jHd[flf?&B==S_RTs._.iT._.jsUllZj6mXd*9I2VC2'p?R%-DHYB9M?]ji(GDJ]I,t?/L9@4OrH6)1J<Rm;E5)/:JO<)<+e,mR'd]2c/])B2T^`rqPiN['2cj\$"bGABM9^2"R91N,]/)R(88'5%S_T<COebs4+WdcuEJK?'cHp]S"6sK?7B9Q@5t$$OM'uE$0pU[IH-Cj'JB2Y"e2N$'ir2l%Jg.rqYFf:q.ChgDA10se6X8(%\0W]:%ZBfNp&.rOTa@oEC`=t[Z7u]oihE\PWlU%1^/g\(ja`_[,,deVc4FoX5<lHk.ADs3`m/&O?N]^>P^-r\rgi*I57&DqP>m;Vqk97gG%)3uZp+>b[b.(8:C6"lQ^5leJCI&P/lEpuW8#L(9=F!<G5e>!%D;oIq:,dTL)eokP@(BP33fG,]goQD>m3g"[t&M^Q^ZOf66E)\bB%L=\@P6A5QeaOLbcXIF3MMb4XTXsb<:F&tJ2:ab66DFrs;5t#rQn2pomE(CcX#B1:f$<n5A^0O?o*o=$^#d'!+bP#=:#^m/W_0s4;%Y7h\PQbl;>V`Z84hYJQoHC-NfnIA-<r^,Ze85'U1k,H^#*skeY6kbiBOkUV5.(T%HX<32*8+sJ'?9N1'*kd*`)kLG*`!(qYYmuLo%7j\\c>_\@*Ra;r3g<JUHPKOrX<,r"DEZgViC3UXiN`gU$V4SC^+lI\;2'(DFlPYY6FBa^`UPs<6AT%n8Ymb.K6h9sp`dCC7&iWB!%L#aftLkpC"'[eh=2bGBPW!Gf!6]jWY?Q6Oq&0j]6\rO_FJ,rP9<:[/DpE-t%aG:E&bZED'lVcqL@mZ!urB^^?B2aE/'$QQcgef`8%$n7nV"U!0+?\8(j_ZNLmp/>4bK%C&!p`83*'^EH<215*&2l&&>M)9Cg,Rb3$YX@Di/.%+rH43m2/EDM,l_Z2XiXcF0f[krS%VWbq%*.0XoVOQ7DECIWr\=Op%E-dI:kco6R;\rQSL"=E:]Z)?Go.1Gm>VFZakQ@os=UJd]G;RkRG)Nm`(fDQ\gSB*<mum.\V\&el7Q'+(%>^1)tc7au;?R,=d=8/>e;E+qC9ZJ[-5eItjd@S??&UTSi"*]Aolbj]]O]tAG6R(MB(;3\3<fHA1aNGAGJ6c^Fl(Fg\L.D-<DUZ'N%l!gRrZ;k@V1Fd\4D@%Q@PFV-;:@+?nc_s"GJSuQ6O?FMMLDdu(;i%Bo&Ujd+1a,\^_<O@#4/h`q%#lB5o]>1i>[58tf%>'2;KNLN%2Bk;_)H1q4fH(3j@&YQmSX1HqL7SYc1`RgNX@K"HN'tJ.99^j74^ra;!CIem`=A8*G6`bF6PI0d85[%1MQb/k%W,D>^]g<fTtNl6%RsVD0"=_K_fHjRr[3qhfI*%$I[h*P#%u01"Z'E^Y,.BRigW1+W3Kc>j-dj%2Bu%6=[]g<(LD+e:9K@0R(@fZ[f)W$G/9dn@0g$Mq%4[W[bYFq5p%&6lFNHTV4<0s=L.LZs,]42h'@CmdAZuUf7/EFu5$$ABd6cj'P`@(EH;F4_i&N;$ZS_4oSJsAH*WfUs&YXb;2*.9Mk%PN'^i,9:.0V;iKC1G)V<YFgai]F0`uJ0t+(EM3@5R1X,.8Y6;R]IjpI*@-qC(HuF[mZGj/%"0%f$m]?B>tabU0_o64_k8bQaL.[4%K.[`F"!+HfQpMd5a4tO'd"k[QPf6:+F;/a8:VHiS$Xk6-)!dhE"6%+.-pA:]#'RM=k]qb/4U<]9%HJ8a+s98u>2;(kU%jJFgl.FL%)N,EdeqA=*Y:Khb+8V,QK)kV3\ntehIY#XPf;7tK5"kJT\TH#aer,mG&+Li$nLB/"e^4Y/;XB6?eel+Yj1=;FG9Z_0">Ol&h#f__%/ErD]nrYmR2&LRAW2P%_EKKa./;N)M\MYK<!PtRg\rAGiKWE1hCM4GQ7RUM>Mmn(hZ1?DkKdY!66^O#&QptaEKaJDj86>d0V,7"D%?PAcW"G.^$K2Z0Fb_,5<-R(=!5t-j.>DPiqO_ckZeA=%;lo%![.V^Cq;e3*/T"O4oZbc.Vd9@4j_Tbbeapp.H\k&$&?&>BC7$g6B%#m]OlpR)^>Zq6tV.ng4!@NNOUTs,(^qDBUCPfP?(,))47iE<Ia2q31g32'7Rh:d*P.f%:^`#`@9\2"LN$k`+V:P`oq'3>JZ8&Q`D%B>b'DVB(MLG`167,=_F<Lp]!1`H\A0Eb6/-rAoKl-)M'%R>1"d[SdiS8=s#bSJ,d,T+`T>EDE$3aa((^]Ek@ZM%dfe-ap8?]264h%,u/$"Pca5l=.\7EO`>rZ-l'l$1m51L+63::f\G>*4/jNXkn[OMD@`SEDkB^uftmj'OGhQ*W[L0_;/q168&Zn1e:mn]W&R)%UZ)D4%Nf$P)*#6p1ceO<[_9;9l,<2Jj=6_itU>tPTJUBLII)Ju$K!_"!KR52_4c*0pktX`r_jJQTWA#/&FWrl#&:ZX<-0[Ze9$"IL\O`eI%K_!K3n;%n&2t$2V(K;Sa1qKO=TP$JpI%=:uQj=9a!(g:n/;6D:'GV3Q0bDG2708dj0Mmh59Z2^Y`VXoN>hhT?m3q*a@U*049UPuV%.Z#R40]`;QPbShQ`tTrmPGOWVOc&Y:8ofGT%>'1i708cogaK9o,RMHNGu/B3X&OnST.YDY]hfrJ/m5qd.R?1Eef#-_)p[Q/,VfZW%OMR/,lYnP<H3')Z,HXY<KU.R__imQ49t)YgMkh-:^I$6LjD-r2GU0/,&?qW<E9U<09_(-Uf&e>iPC+0[=/;"9^bq)'nc\?9,\@@=%%Z:-AP;8NJkPJFB@V6Mg"-&Zg1e[)B3@T+Wc"tG7KF0Z6mt>:@POGMr/JY=>2^YTWM,ZkVhZ"R_!LeQa?F/2tTcG(lDDe<qLf'&$%V+q)\qS\XU](,&Gn`U[aXQ!6A[rc2S\9q=cFP!.0(FBh/#&aU.D]D<D.5%<i4/[2"#kg,I5PU'fR#WB,A/3Ie9.7d@_.KADTdT9`%8BCoASIt;q&LQCjTGUhC>u<c._(g?=MZfW1U`r3S-5htDMQ'[3-uao1'$7@^Wk1ih)p1+u0OC"3``+B_R,!CH$?W\ZmheTZ/s;J1%;lNZ>NoJH&d\ZiGJREkq,A:+fT"LL'DnY9'"U@%b9YB/N+AH$&naMAfKu"m*f[=m7OIcQe."I3iX%;>rEsr3_74GP4kW(r?T`>m`%"L(5R1/O4/=\@&*=];EY/EEM7[RBk@MsHGiKS`b9:ei4XUfho<aXakM7^&b<%`NKdf*t'!&(;Q/FE&e.%HEpK/FIe#<]&r`@_q<#%>dDoog@*c>c1LUT&)pLYs'+*_XQYdNi@"+VoVRrWV/&ZGKUG)u@C!ru]?kd@:Io:4D3L'j:OSS)WqqKYHK"=Z<(BI,dH00Q00T8t%dCJ?HM01Ls[6PGpU4@p:)!P60:710"XEZ`%EJ?o0E96W*W>%E'&G`?b<!nP]$drPiTm@(sWN1$JKVS!pcUEGN1fTOH/2Zl1XG.)N%LV&Q_PbFH3)>V?+kEKk\+DIq]TSe73amCCkSFmsA>C>2-J"e_$O1BsgP_3qR8T2]8hSO5-m/!636",h5=jPD?NP\^iAdtNHh'W^G%?>nlp3-m+Gs7M_9ZhS0BKr-5K0bQRs;o;NInP+OU`]^)&iuV(JD(:EN\r\q2ZehEP$m<:r]Um@2_8;5cUOK@:M9I5nq-K=jPNnPc%W"=]h:71UPE:0(l):=+VHI>fn.lHOe-/>aM>@r9O&d$Q^mF%h:.)-n*Ig]I*]A&+#SFVooSR-K6c#e-+%QM!/b%%M116:INOk":Y%hDLcO.C?,YVU-HIdLPmX9Zal8<-Z:Ppkt`l"J:Un:,.B=[G;.#!''j2TOFH%DE9Gr4g5mJ:/Fcg,!Mkl2W?e\%40QSb[/@P'&Bk`%C<`/U."TP"__VnT;o#AJW=lbUSGWB\3*ADARAgu!i/ofSR23M]D,A@,jCMt_L3M;d"@R@5Dt1g.bgK7tRMB^k]f>&gVY9a>j-u<B%6\'%6&P??<Te"+gBkkjBVGC&d_^q?U5X`SZ2:?2B>,WY`B8PFNOkR/U!G[OFWS^bl@_W5R?Br6lXu7g:R>Oea>=V^+]r*_knZb9k%d%a8S+SV0Ib^,.igE+8AoX]GI-^%(qTIQ[OGTm_s]ek*a,:;7s)r7o68hH,MZ#XZ!5uimI(0bf7dCjB0@o?F1^-HXRmFL1[PS2S'%N&2]dofGJdZE#R9:EF=#a1?k,5EJDcB6Q/[mARlqou4Ya62S/%W,KeuqUoHg2V"ZbY"KIse9-"1oFnt`ED8U$/pDhRD\:Rc*01pI%q%p=toSUQ1*!57prZRo(gnbg7+i^8W1%/D*n-G\3G<(egJ,hNE%ZQ*WRNR_kpMe+^9dKG*>TZQeE@?nmc>4ZX2oTb<Uf;Zrmh4^X%(8\TFY`J`NHmXu[\WeR;,=3XkIPM-DR8)j!@bD]U=,_8^>ZYst2'R%?6n)cJmSGPRLRRcS.=6uTCLQk6a3N4njPT<!<--rhY%J@p%>=[?0>^Rl\2/Zfj23Yk\![G7%FQlEeG!gKuGGbL([R9Ef['A/O[+(N+=*Gp9C_8BjB[2%'LuBW8,b(5u70G1;7m+XX+U)ug;KBGq%LOb=4@M.MjY4j(4RF;'HX$[9)<j0G!Zq`7/64HAb;t_tB[d/oMY5EYeM02V0`Sb[LI-C=j_N2apc^/E7`r3,sRh[[\IjW`j1<J0g%&d_VOKZCp8IbAO!J.2-S.R/YtibQPR6cARXO<!,8)\N4B#bK1!V_6=mr!PHJM"%pQcS:*hY!D*I#GN>Gd]QYq&`2VobX`I]pB!A?%A]-s<[o3*k2jX/X5Rqc^$E-3U^"oR2$#p:1o0Vu3XY.]A"eEa"hL[N]*M1d+Xp6<-(ZJq7f8Jgs+*W4YI_*VRHRs,uI2eI/NSRJg%?%8iAQNkrXd[_6XZ@ud0h4l`D++AQZ'GOrq\eP)XSiT.'\[GfC_]JDSI)5$PrcGS7efCLYr"=X7aO4VH""i>*QUNZ!Gf#@13hA`'%C:_i`BpC0>D6'@^-PCb"SmOk!lXD&,;i*&F61tVTI9Te^VqRR$%s7dJRN62>8tiHaOaZbG7L"K&*fm'3<sALG>8d^.lc#o(hh=F?%AKW:.F/VmJ;>fq,MLmSt^JkSR;p@X=_untF7iIL;L(K>9M(sl742rCp_!&?0KR$Udfen<95jQ8N8omY8:W*4'NFsp6"RR7Eiq%O?%)H^m2B;n"9VKX4ena'Ykg(')rpc,AfA=ft@Y6_nWB:e1*6q;j(C!gsgF%S9O:B5W]0VBlKjhWV67?A-Q:*naNetuE"AEXIioPs+2%YLl/)i&>B(VpXc4p=,q]/0Q!fe+Nj\%1S-Aa)JD/pL`kK<[@u\8e:XgH!O35(LA6s#GNW8$*ZS3!7miAeM95R<J3FhKFuUW0WRC%%b2"Z:(2Je@%V-sp$F$&\H^f>ffAc$L4^--;C;c:+Y#9h-`T:pZ235:\g0r;/@.UHlK<Od[;KM?%KHO)ZEkh>pV;TMLj0`s1;Hqi6%q[a9>,aZ71/I_&2C+40M,Q/"43Fh\Ne4[q(16h=!SQU"9%dHH:l)^:V&9;><S^]S18Q.F$@<cYqhn`TZ(h*^1[/g!U#OF5!(WK,9%8JgCtFKsZa*Lk>Mk!Q8Nf9'V<Kt@Za+=i`Y&Y4k=ATt^1Z<On,HgGWkAi7O(T:"u$$UiPu2".7RK>[kCUa7d:2j1K40t8&Tf\U;9%BqN>EX,p5+4qZ>G8i;&H<@NaVHHr,KAN\DO1Z9pj-AH9g&2==sJ.R7^Ei$D?=U5Ap,dt(Kmf5.6WL>O9pD:r.?FmQj`Zb6X-?UA"%L>QO7qLgNaB?LLH\cjF;/6A7T88YDR5Gs/#M.$@kA(;<(XAI>#`>`-tfJF>=R#ib3d0>R.VFqMs)BGA(djJ<[aT14S)5#^6.OB"7%+>cp,,%7"LKRK_KidBN0B_;4YdHd*&N4I;SI*jiL[1BYd6F2`MrN'F*MpO5_m!Ke/s*%anq;[7n5Q&(jrMM<`]Y+7<mJVe^5!2(0%jn7*W?f,5jnZTFr&"gSLrql*Ioui]*hd=.5rHA,0o]c>Ag\7o?Dbo8>rV@TY8!PM%r;>$iJ,8Y!-<8U'~>%AI9_PrivateDataEnd