%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: BW_C.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/19/07%%BoundingBox: 0 0 306 33%%HiResBoundingBox: 0 0 305.1202 32.5713%%CropBox: 0 0 305.1202 32.5713%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-10T13:52:27-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-19T10:23:46-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-19T10:23:46-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>28</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAHAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8w/Ob85LTyXZSaZp&#xA;bR3HmeaL1FV/iisoWIX6zc0rtUgInV2oB7qsm/Kx5pPy68vyTszzvZRtM7/bLsKsX6/HX7XvirKc&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQetXV&#xA;xZ6Pf3dsgkuLe3llhQ9GdELKD8yMVfHvkTyf5k/MTzDcOJ3jt/VF5rXmCbcxO45etU/C10yH9yn2&#xA;bdN/tksFXqnkf8yNLvPza0fy35TJj8qW2ntpNvyJIuo7KKWQXCg02R0CI5Hx/Gfkq96xVZPPDBDJ&#xA;PPIsUESl5ZXIVVVRVmZjsAB1OKpPpXnjyfq96LHTNZs7u8ZeaW8cyGR0FSXjWtXWg+0tRiqd4q7F&#xA;XYq7FXYq7FXYq7FXYq7FVG3vrO4muIYJ0lmtHEV1GjBmjkZFkCuB9klHVt+xxVWxV2KuxV2KuxV2&#xA;KuxVLrXzFol1rF1o1veRy6pYqr3dopq8avQgnt+0PlUeOKoJvP3khbs2ja/p4uFbgUNzEKSV4+nX&#xA;lTnX9j7XtiqfYq7FXYq7FXYq7FXn/wCYX52flz5Mu30nXbp5r94ucun20RmcRyDYOfhjXkOzNWm/&#xA;TFXlXkf83fJVz5c1vyL5a0i/9G8g1aa2u5kijp9YjmmVbgpNK5I/uw/gF2GKsG/Kvz15I8l+cX1L&#xA;zWLsX1mrpaxWsEbKkzqYZJbkiROLrESkcKKUiQ0+3yxV9Q6H+a/5fa1okOtWWswCxnn+qK05MLie&#xA;nIxskgVgQvxE9Kb1pviqL/MLQLrzB5P1DR7O5itLy6Ef1Wa4XlD6scqSoki91dk4sKHY9D0xV5l5&#xA;n86ec7aAQ+cdAGgeY7O2vp/LHmrTXiu7M3kdnK7RcJlkMYlijb4JK8qdiAQqqf4x81DQU8yWPmDV&#xA;7qLRodL1LzFpd/pltaiWznZ/rf1ZntLaVlCRu3Jaj4fhfwVTP8yvNPmeK31vWfLmuTWWl6HBp8TL&#xA;b29rcJPd3lwjy8fVhmclbSaMjidy422NVVO98z+c7VrfUvLmo6j5hjXVvqFxoWr2MGnTSxJpz3sw&#xA;i/0a0nEnFQYuaKCdjyUg4qmmn61qPnHzLb3Pl3zXd2Xl6awjvXtIrayZxJ6ksDxcri3kkiZXQcw3&#xA;LcEd9lWNNrnn1fystPODebr7639dS3uoFs9OdHjk1ZbH4ES058hESRStW7dsVZPqPnwJ+YWjRjUr&#xA;vTfLp07UbnVYNQsmsLctamERyete28Uu31hufCSgotaVPJV1r5tk80ee7G18veYLmPy/daRe3Ja3&#xA;ggAa4tbq3hDxvdWzsy8bhtxVT274qlGt/mNrmi6Z5h8uajqlunmC1vYNN0nXZUSJTHfW4uFuZ4gO&#xA;Ae3i58uK8WYKKDlirUn5ka8/lby3+YltcS3OgSJ9U8y6HbpblkuXJt1mhdk9T4Lr4SpkoVKnoDVV&#xA;mseo6r5V8hyan5mvH1bU7SBp7kqkSM87/wB3awiCOJWq7LEh4VY796Yq8w/Lu+1Hy/8AmJDDqVvq&#xA;Nj/ji0ZtSub2D0E/TsLSTsYC/JQhikZEX/JXbsFU8stY8+y/lNJ5xg8wzT6pYx31zPa3EFkIJobO&#xA;eZWUenbxuknpRfA3Ljy+0pGKquk+cfM955NudFbU5R53j1SPSob8w2wkKXTi6t7owiL0eA08l2HD&#xA;fg1N98VUPK/mDzBqmt3uj3XmnWkvYddvtNtmTTLM2ZtrVXkUPdGxWH1fTjb7MvLlQlCtcVQek/ml&#xA;5j1DyJNaardNo/m9bFNQ0zUIUgZL+15BTNGksckQdSeM0fHY/EtFOyqefUPPcfnmw8uT+eNQeO40&#xA;e61Ce4is9KjP1i3uLeFRGrWknGMi4J4ks232sVSe18y+foNKu5b691PW7Gz16/07VLvS7S0+vQ2t&#xA;shSExQRxCqNJvIQGcdjiqpd6v5gn8u6drmheftQvbXUdcstMWtlpsZigurtLaSORJbL1BPGHO7UF&#xA;f2aYq780dCbyp5K1fVlvZLnVtYurSx1LzGYoILuPT554o5FdrZbePZRx5Kik1FelcVepf4f0T9Cf&#xA;oL6jD+hvR+rfUOA9H0aceHHpSmKvO/KOqN5b8w+YfKMuoatdaNoUNhaaHDFYPem3ie0Dms1raSMW&#xA;U0CiUnbscVQ35feZ/N+oXnkSXUdcuLyLXNP1a61G3kgs40eSzmiSE/ureORKLcGoDCvEe9VUb+ZW&#xA;veZtGbXrmx127tYbSPQpoYYre0m9MahqUtnchFa2lkesSAqDyPLp4Yqh4fPHmFNMuhZ6wNQi1PzB&#xA;b6Domp3lvHDdWpkUfWjc2yx2w5wurrGjorMaE1UiqrKdU0PzXp8D3On+ZbqW3EVy1+t5HaySA/V3&#xA;MU1sUgRVdZglUZTHxr8IPVVhi/mBrd15C8kzQ6pqcOuapdaNHql+2lmOKVdRljS4VZZrP6oFAmPp&#xA;tH1oN27qvMH/AOhdP8Xaj/j39P8A+IfrEn6V/TFeHr1+Kn6O+Lh/JTbjTtirJrr/AKFa4wf4f4/p&#xA;Lhcej+jfX9f0vqsvrc/rHwU9Ll9vflTFVPVv+hOf0ePX9DlwPH6v+kfrPKn7XDfn/wAZO/XviqUf&#xA;l7/0L7/iRv0T+l/0PzT61+lPT/Rvr8W9DjT/AEj1ftUr8PHly2xV73+aH1D/AAbc/W/rvL17T6j+&#xA;jPT+vfXPrUf1X6v6vwcvW41rtxrXbFXn/nL9IfoGb/G36Y+s/U739E/8c30fV+pyfWeP1b4PrX1P&#xA;1/T9X4acuHxYqyHyJ+kfqCf4h/SP6C/Q/wDov136h+j/AKnwi5+r9V+P1fTp/e7ceXH9rFWLyf4Y&#xA;/wCherf9B/pH9C/WIPX5eh+kK/XF9P1PW+CnP0qf8V0ptiqcp/jH/Ffl79L/AKY+sfpEcfX/AEX9&#xA;Sp9VuacPQ3/uPrHOnx14V24Yqmugf4M/5WR5u/w16v6e+qRfpn0uP1X61yenDn8P1jp6v7PSvxcs&#xA;VYWeX/KiLL0v0n+j/wBLw8afUPrdf0j+75cv3PH9Icem9P8AJrirMPN3of8AK0vK36U9X6r+jr+n&#xA;qfVPqPCsX1r1/V/e15fV+NNvD9rFUN5y/TX/ACtPS/0H9c/SP6Hn9L6v9Q+r/VPrMPr+p9a+Ovqe&#xA;jThv4d8VQnkv6p/yte5/46v6Q+q3P179J/U6/Wf9F9Xl6O/P0fq/D0f3fp0p+1irH/MdP0L59+r/&#xA;AKS/QX+IIvr3ofUOP1v1ouf1f1Pi4ep6Xqct+VaftYqzf8z/AK/y8net9d9D9K2vr/VPqnD65yX6&#xA;t9Y9f9nny48NudO/HFVH89vT/QugV+vfWf03afo39G/V/X+u0f6vT6x8NK1r7ddsVYp5Or/gAfpn&#xA;9M/4B9Sf616n6Op6f1pvrH1j6v8A6R9X9Xnz4b8a1+DFWbv/AIP/AOV2JT1P8Sfof95Sn1b+9b0q&#xA;/wDLz6Xq8e/p8u2KsR8uf4m9XWf0d+nf0d+nbz699V/RfL69645cqfv/AKv6nHlw34VrtXFWrz/A&#xA;f/KmPLf+JfrXD1I/8PU9H9I+pzPDj6X7vj6dfV/Z4dd6Yqy+99b/AJXfplPrXL9CXPGn1b6p9W9e&#xA;P1q1/wBI9T1vQ9qdP2sVYf5Y/Sf6Uv8A9Ffpr9LfpnVPTp+jvQ5epF+kPXr8Po8/S4ft8vs7VxVF&#xA;eZfq/wDhLTfqn6T+u/4pt/0lX6j9Y/S31lfR9bl+49L1vSp6P7NK/tYq9L86/wCGP8J6p/in0/8A&#xA;D3oN+kfWrx9P/Y/FyrTjx+LlSm+KvMtI/wAZ/wCF4v0d/ir/AAv6X+iV/RH6W+p8fh9P1P33T7HL&#xA;97x6b0xVEflR9U/Tfmb/AA79f/R/1DT/AKv9Y+qcf941+p+n/u31PR+3637X2t64qk3lX6p/g7yZ&#xA;+j/0x/iH1dQ/wtw+ofWfqm31z6xy/wBF+r8uNeXx14U3xVF+b+H+FNa/SH6W/wAQ/pLSP01/vB9Y&#xA;4euv6O9Gn+jfV/rFKcPj5cuXfFV/mr/An6S1X67+kfrH+gfp79H+l/x3fg/R/wBV7/X/AB9D4ONP&#xA;UxVNL3/GHpxfp79Oep9VuvqPp/ov6v631SXl9b+r7ep6fLhy/dcv8rjiqU33r/8AKmPJHo/pLh9d&#xA;0j9EcP0f9a4+ov6M9Xn+4py9Gvf+f9rFX//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:0C3A3354E8FD11DBB9739E7606BFB90D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:039A9A99EFD811DBAC05C6DFC5F72130</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -32.5713 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 32.5713 li305.12 32.5713 li305.12 0 licpclp[1 0 0 1 0 0 ] concat14.8521 28.2944 mo14.8521 26.875 li16.8662 26.875 li16.8662 26.7417 li16.8662 25.3203 16.2114 24.2793 11.6963 25.0615 cv4.27197 26.3838 li0 32.3096 li10.2515 30.4912 li13.3232 29.9644 16.02 29.854 16.8662 32.2964 cv16.8662 28.2944 li14.8521 28.2944 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf18.2671 32.2959 mo18.2671 30.3633 19.4092 29.0352 21.7402 26.7041 cv23.3828 25.0615 li30.8906 26.3838 li35.1709 32.3027 li25.3257 30.605 li21.9878 29.9644 19.1582 29.7397 18.2671 32.2959 cvcpf18.6831 26.8721 mo19.4268 25.2764 21.0107 23.8335 21.9214 22.9229 cv22.5693 22.2646 li25.3262 19.5073 25.8564 18.3672 26.0234 16.4683 cv26.0313 16.3691 26.1729 16.8403 26.2153 17.1738 cv26.3579 18.2925 26.2754 19.1045 25.895 20.2251 cv25.3267 21.8994 23.9805 23.2334 22.2334 24.98 cv20.3335 26.8721 li18.6831 26.8721 licpf20.2842 3.75342 mo20.3301 3.75342 li20.3301 5.95215 li20.3301 7.94092 17.7744 10.2349 16.7563 11.2461 cv13.0122 15.0005 li11.7173 16.2954 9.12646 18.8516 10.2144 21.3174 cv10.2505 21.3999 10.2837 21.4702 10.1455 21.3721 cv9.86865 21.1753 9.44873 20.4854 9.33691 19.2236 cv9.1377 16.9756 10.6704 14.9624 12.561 13.0718 cv16.1323 9.49609 li19.7549 5.87402 20.1079 5.23535 20.2842 3.75342 cvcpf16.7563 15.0093 mo17.7744 13.998 20.3301 11.7041 20.3301 9.71533 cv20.3301 7.5166 li20.2842 7.5166 li20.1079 8.99854 19.7549 9.63672 16.1323 13.2593 cv12.8149 16.582 li11.6094 17.7876 10.5039 19.0513 10.5547 21.0913 cv10.5864 22.3413 11.2148 23.3774 12.1606 23.6216 cv12.5498 23.7056 12.5264 23.6548 12.4336 23.6157 cv11.0977 22.9849 11.1938 20.5728 13.353 18.4131 cv16.7563 15.0093 licpf12.5913 11.6836 mo9.83447 14.4404 9.3042 15.5811 9.13721 17.4795 cv9.12939 17.5791 8.9873 17.1074 8.94531 16.7744 cv8.80273 15.6553 8.88525 14.8433 9.26563 13.7227 cv9.83398 12.0488 11.1802 10.7148 12.9272 8.96777 cv16.1323 5.75732 li19.7549 2.13525 20.1079 1.49658 20.2842 0.0146484 cv20.3301 0.0146484 li20.3301 2.21338 li20.3301 4.20215 17.7744 6.49609 16.7563 7.50781 cv12.5913 11.6836 licpf18.3145 30.48 mo18.2671 30.48 li18.2671 28.2944 li19.1821 28.2944 li18.665 29.0356 18.4004 29.7524 18.3145 30.48 cvcpf18.3208 26.875 mo18.2739 26.875 li18.2739 24.6504 li18.2739 22.9795 19.9121 21.1724 21.5356 19.5596 cv22.5889 18.5068 li23.4385 17.6572 26.0342 15.0967 24.9463 12.6304 cv24.9102 12.5483 24.877 12.4775 25.0156 12.5757 cv25.2925 12.7725 25.7119 13.4629 25.8237 14.7246 cv26.0229 16.9727 24.4902 18.9854 22.5996 20.8765 cv21.626 21.8545 li19.2783 24.2021 18.4976 25.2544 18.3208 26.875 cvcpf18.3184 23.0171 mo18.2715 23.0171 li18.2715 20.7588 li18.2715 19.165 19.8521 17.4453 20.6187 16.6787 cv21.8076 15.4922 li23.9673 13.3325 24.063 10.9204 22.7275 10.2896 cv22.6343 10.25 22.6108 10.1997 23 10.2837 cv23.9458 10.5278 24.5747 11.564 24.606 12.814 cv24.6567 14.8545 23.5698 16.1099 22.3643 17.3149 cv21.4004 18.2788 li19.3848 20.2949 18.502 21.4731 18.3184 23.0171 cvcpf250.829 22.8232 mo250.813 21.7134 249.506 22.0176 249.506 21.6826 cv249.506 21.5459 249.627 21.5156 249.749 21.5156 cv250.312 21.5156 250.859 21.5762 251.422 21.5762 cv251.893 21.5762 252.364 21.5156 252.835 21.5156 cv253.094 21.5156 253.125 21.6069 253.125 21.6675 cv253.125 21.9717 252.03 21.6826 252.03 22.8232 cv252.03 26.1074 li252.03 26.3203 252.03 26.3813 252.258 26.3813 cv257.822 26.3813 li257.975 26.3813 257.944 26.001 257.944 25.9404 cv257.944 22.8232 li257.944 21.7739 256.805 22.0327 256.805 21.6826 cv256.805 21.5918 256.834 21.5156 257.063 21.5156 cv257.564 21.5156 258.355 21.5762 258.644 21.5762 cv259.206 21.5762 259.435 21.5156 259.738 21.5156 cv260.134 21.5156 260.164 21.6675 260.164 21.7588 cv260.164 22.0327 259.146 21.7739 259.146 22.8232 cv259.146 30.8818 li259.146 31.9917 260.529 31.7183 260.529 32.0981 cv260.529 32.144 260.468 32.2808 260.361 32.2808 cv259.951 32.2808 259.48 32.2202 258.933 32.2202 cv257.959 32.2202 257.534 32.2808 257.245 32.2808 cv257.107 32.2808 256.88 32.3262 256.88 32.083 cv256.88 31.7183 257.944 31.9312 257.944 30.9731 cv257.944 27.3237 li257.944 27.0806 258.005 26.9438 257.822 26.9438 cv252.212 26.9438 li252.03 26.9438 252.03 27.0352 252.03 27.2021 cv252.03 30.9883 li252.03 32.0225 253.475 31.688 253.475 32.1592 cv253.475 32.2354 253.368 32.2808 253.23 32.2808 cv253.033 32.2808 251.923 32.2202 251.117 32.2202 cv250.038 32.2202 249.871 32.2808 249.81 32.2808 cv249.688 32.2808 249.643 32.2046 249.643 32.0527 cv249.643 31.6118 250.829 32.1133 250.829 30.6084 cv250.829 22.8232 licpf263.508 28.2212 mo263.508 30.6538 265.089 31.7637 267.141 31.7637 cv270 31.7637 270.654 29.8784 270.654 28.084 cv270.654 23.1577 li270.654 21.6069 269.239 22.2456 269.239 21.6675 cv269.392 21.5156 li269.984 21.5156 270.578 21.5762 271.171 21.5762 cv271.459 21.5762 271.733 21.5156 272.007 21.5156 cv272.083 21.5156 272.205 21.5918 272.205 21.6826 cv272.205 22.1084 271.308 21.7739 271.308 23.1729 cv271.308 27.8867 li271.308 28.6313 271.489 32.3872 267.065 32.3872 cv263.066 32.3872 262.306 30.1523 262.306 27.8105 cv262.306 22.6865 li262.306 21.7891 261.074 22.1543 261.074 21.6675 cv261.074 21.5615 261.333 21.5156 261.409 21.5156 cv261.805 21.5156 262.185 21.5762 262.596 21.5762 cv263.081 21.5762 263.568 21.5156 264.039 21.5156 cv264.115 21.5156 264.526 21.4854 264.526 21.6675 cv264.526 22.0933 263.508 21.6675 263.508 22.7622 cv263.508 28.2212 licpf275.609 26.4419 mo275.609 26.731 276.552 26.6548 277.268 26.6548 cv277.921 26.6548 279.38 26.3813 279.38 24.4956 cv279.38 22.6406 277.967 22.0176 276.477 22.0176 cv275.93 22.0176 275.609 21.9868 275.609 22.5801 cv275.609 26.4419 licp281.145 30.6235 mo282.239 32.2959 282.984 31.7334 282.984 32.0981 cv282.984 32.2808 282.133 32.2808 281.996 32.2808 cv280.886 32.2808 280.293 31.5054 279.715 30.6387 cv278.027 27.9775 li277.48 27.1265 277.708 27.1719 276.005 27.1719 cv275.519 27.1719 275.609 27.4453 275.609 27.5977 cv275.609 30.8057 li275.609 32.1133 277.191 31.6421 277.191 32.1592 cv277.191 32.3115 277.055 32.2808 276.933 32.2808 cv276.796 32.2808 276.445 32.2202 275.185 32.2202 cv274.606 32.2202 274.028 32.2808 273.451 32.2808 cv273.359 32.2808 273.298 32.2046 273.298 32.1133 cv273.298 31.7334 274.409 31.9463 274.409 30.7905 cv274.409 23.0513 li274.409 21.5918 273.101 22.2148 273.101 21.6982 cv273.101 21.6069 273.223 21.5156 273.405 21.5156 cv273.679 21.5156 273.603 21.5762 274.378 21.5762 cv275.26 21.5762 276.126 21.5156 276.918 21.5156 cv277.16 21.5156 280.521 21.2114 280.521 24.146 cv280.521 25.332 279.669 26.3506 278.605 26.7764 cv281.145 30.6235 licpf288.33 21.3789 mo291.188 21.3789 291.979 22.5493 292.42 22.5493 cv292.541 22.5493 292.633 22.3975 292.785 22.3975 cv292.952 22.3975 292.952 22.6406 292.998 23.6289 cv293.028 24.4351 293.165 24.9365 292.906 24.9365 cv292.725 24.9365 292.618 24.5415 292.557 24.4351 cv291.614 22.8081 290.534 21.8198 288.573 21.8198 cv285.608 21.8198 284.18 23.7964 284.18 26.6245 cv284.18 29.27 285.699 31.916 288.619 31.916 cv291.006 31.916 292.496 30.3955 292.725 29.6958 cv292.755 29.5894 292.846 29.498 292.938 29.498 cv293.074 29.6655 li292.725 31.186 li292.709 31.2471 291.63 32.3872 288.209 32.3872 cv285.092 32.3872 282.856 30.2432 282.856 27.0957 cv282.856 23.9482 285.122 21.3789 288.33 21.3789 cvcpf295.419 22.8232 mo295.404 21.7134 294.097 22.0176 294.097 21.6826 cv294.097 21.5459 294.218 21.5156 294.34 21.5156 cv294.902 21.5156 295.449 21.5762 296.012 21.5762 cv296.484 21.5762 296.955 21.5156 297.426 21.5156 cv297.685 21.5156 297.715 21.6069 297.715 21.6675 cv297.715 21.9717 296.621 21.6826 296.621 22.8232 cv296.621 26.1074 li296.621 26.3203 296.621 26.3813 296.849 26.3813 cv302.413 26.3813 li302.566 26.3813 302.535 26.001 302.535 25.9404 cv302.535 22.8232 li302.535 21.7739 301.395 22.0327 301.395 21.6826 cv301.395 21.5918 301.426 21.5156 301.653 21.5156 cv302.155 21.5156 302.945 21.5762 303.234 21.5762 cv303.797 21.5762 304.025 21.5156 304.33 21.5156 cv304.726 21.5156 304.755 21.6675 304.755 21.7588 cv304.755 22.0327 303.736 21.7739 303.736 22.8232 cv303.736 30.8818 li303.736 31.9917 305.12 31.7183 305.12 32.0981 cv305.12 32.144 305.06 32.2808 304.953 32.2808 cv304.543 32.2808 304.071 32.2202 303.523 32.2202 cv302.551 32.2202 302.125 32.2808 301.836 32.2808 cv301.699 32.2808 301.471 32.3262 301.471 32.083 cv301.471 31.7183 302.535 31.9312 302.535 30.9731 cv302.535 27.3237 li302.535 27.0806 302.597 26.9438 302.413 26.9438 cv296.803 26.9438 li296.621 26.9438 296.621 27.0352 296.621 27.2021 cv296.621 30.9883 li296.621 32.0225 298.064 31.688 298.064 32.1592 cv298.064 32.2354 297.959 32.2808 297.822 32.2808 cv297.624 32.2808 296.514 32.2202 295.708 32.2202 cv294.629 32.2202 294.461 32.2808 294.4 32.2808 cv294.279 32.2808 294.233 32.2046 294.233 32.0527 cv294.233 31.6118 295.419 32.1133 295.419 30.6084 cv295.419 22.8232 licpf122.684 31.9243 mo124.872 31.9243 126.914 30.7578 126.914 27.2085 cv126.914 23.8047 124.678 21.9087 121.76 21.8604 cv120.302 21.8604 120.253 22.1035 120.253 22.8325 cv120.253 30.1255 li120.253 30.3687 120.205 31.0981 120.351 31.1953 cv120.837 31.73 122.003 31.9243 122.684 31.9243 cvcp118.017 21.5195 mo118.503 21.5195 118.94 21.5684 119.378 21.5684 cv120.399 21.5684 121.372 21.5195 122.684 21.5195 cv125.407 21.5195 128.081 23.562 128.081 26.3818 cv128.081 29.8823 126.428 32.3135 122.149 32.3135 cv121.372 32.3135 120.594 32.2646 119.815 32.2646 cv119.718 32.2646 118.211 32.3135 118.114 32.3135 cv118.017 32.3135 117.968 32.2646 117.968 32.1675 cv117.968 31.8271 119.038 32.2163 119.038 30.7578 cv119.038 23.1245 li119.038 21.5684 117.822 22.0547 117.822 21.666 cv117.822 21.5684 117.919 21.5195 118.017 21.5195 cvcpf134.061 27.4028 mo134.401 27.4028 134.401 27.3057 134.304 27.1113 cv132.797 23.416 li132.749 23.2217 132.651 23.2217 132.554 23.416 cv130.853 27.1597 li130.755 27.354 130.853 27.4028 131.047 27.4028 cv134.061 27.4028 licp130.95 28.0835 mo130.658 28.0835 130.366 28.0835 130.22 28.4238 cv129.248 30.563 li129.199 30.6602 129.102 30.9033 129.102 31.0981 cv129.102 32.1675 130.22 31.6816 130.22 32.0703 cv130.22 32.3623 129.977 32.3135 129.783 32.3135 cv129.345 32.3135 128.956 32.2646 128.519 32.2646 cv128.081 32.2646 127.692 32.3135 127.303 32.3135 cv127.206 32.3135 127.157 32.2646 127.157 32.1675 cv127.157 31.8271 127.887 32.0703 128.275 31.1953 cv131.922 23.416 li132.797 21.5195 132.846 21.2769 133.089 21.2769 cv133.235 21.2769 133.332 21.7144 133.38 21.8115 cv136.589 29.688 li136.833 30.2715 136.979 30.9033 137.319 31.438 cv137.805 32.1191 138.68 31.7788 138.68 32.1675 cv138.68 32.3135 138.583 32.3135 138.485 32.3135 cv137.854 32.3135 137.221 32.2646 136.589 32.2646 cv136.152 32.2646 135.763 32.3135 135.325 32.3135 cv135.277 32.3135 134.985 32.3135 134.985 32.1675 cv134.985 31.7788 135.909 31.9731 135.909 31.3896 cv135.909 31.0493 135.617 30.3198 135.471 29.9312 cv134.985 28.667 li134.839 28.3267 134.742 28.0835 134.304 28.0835 cv130.95 28.0835 licpf137.124 21.5195 mo137.513 21.5195 137.805 21.5684 138.826 21.5684 cv139.361 21.5684 139.75 21.5195 139.896 21.5195 cv140.042 21.5195 140.187 21.5195 140.187 21.666 cv140.187 21.9087 139.506 21.9087 139.506 22.3462 cv139.506 22.6382 139.701 22.8813 139.75 22.9785 cv141.597 25.9443 li141.743 26.1387 141.84 26.2358 141.938 26.2358 cv141.986 26.2358 142.083 26.1387 142.229 25.8955 cv143.785 23.3672 li143.882 23.1729 144.125 22.9297 144.125 22.541 cv144.125 21.7632 142.958 22.1035 142.958 21.7144 cv142.958 21.5195 143.104 21.5195 143.299 21.5195 cv143.639 21.5195 144.028 21.5684 144.417 21.5684 cv144.854 21.5684 145.292 21.5195 145.73 21.5195 cv145.827 21.5195 145.875 21.6172 145.875 21.666 cv145.875 21.8604 145.633 21.9087 145.536 21.9575 cv145.098 22.2007 144.903 22.6382 144.66 23.0273 cv142.521 26.3818 li142.278 26.7222 142.181 26.8193 142.181 27.0625 cv142.181 30.8062 li142.181 32.1191 143.396 31.6816 143.396 32.1675 cv143.396 32.3135 143.299 32.3135 143.056 32.3135 cv142.861 32.3135 141.938 32.2646 141.403 32.2646 cv140.722 32.2646 140.139 32.3135 139.993 32.3135 cv139.896 32.3135 139.798 32.3135 139.798 32.1191 cv139.798 31.73 140.965 32.1191 140.965 31.0005 cv140.965 27.3057 li140.965 27.0137 140.722 26.7222 140.625 26.5278 cv138.048 22.4438 li137.659 21.8115 136.93 22.0059 136.93 21.7144 cv136.93 21.6172 136.979 21.5195 137.124 21.5195 cvcpf210.373 21.5513 mo210.938 21.5513 211.468 21.6177 212.033 21.6177 cv212.53 21.6177 212.996 21.5513 213.46 21.5513 cv213.692 21.5513 213.759 21.5845 213.759 21.6841 cv213.759 22.0493 212.663 21.7173 212.663 22.8457 cv212.663 31.0112 li212.663 32.0732 213.991 31.7085 213.991 32.1733 cv213.991 32.2729 213.958 32.3057 213.692 32.3057 cv213.36 32.3057 212.697 32.2729 212.033 32.2729 cv211.104 32.2729 210.805 32.3057 210.572 32.3057 cv210.307 32.3057 210.273 32.2397 210.273 32.0732 cv210.273 31.6421 211.435 32.1401 211.435 30.6465 cv211.435 22.8457 li211.435 21.7505 210.207 22.0493 210.207 21.7173 cv210.207 21.5845 210.24 21.5513 210.373 21.5513 cvcpf77.7109 26.479 mo79.3154 26.479 78.8779 25.2637 79.2671 25.2637 cv79.4126 25.2637 79.4126 25.4092 79.4126 25.5552 cv79.4126 26.0898 79.4126 26.5762 79.4126 27.0625 cv79.4126 27.4517 79.4126 27.8892 79.4126 28.2778 cv79.4126 28.4238 79.3643 28.4727 79.2671 28.4727 cv78.7808 28.4727 79.3154 27.1597 78.0513 27.1597 cv75.7661 27.1597 li75.4258 27.1597 75.4746 27.4028 75.4746 27.646 cv75.4746 30.4175 li75.4746 31.3408 75.3774 31.73 76.6416 31.73 cv80.1909 31.73 80.7256 30.1255 80.9199 30.1255 cv81.0171 30.1255 81.0171 30.2715 81.0171 30.3198 cv81.0171 30.855 80.6284 31.3896 80.2393 31.7788 cv79.7529 32.3623 79.4126 32.3135 78.7808 32.3135 cv77.6138 32.3135 76.4468 32.2163 75.2803 32.2646 cv74.6479 32.2646 74.0161 32.3135 73.4326 32.3135 cv73.2866 32.3135 73.1895 32.2646 73.1895 32.1675 cv73.2383 31.9731 73.3838 32.0215 73.8701 31.7788 cv74.2588 31.584 74.3076 31.1465 74.3076 30.4175 cv74.3076 23.4648 li74.3076 22.7842 74.3076 22.0547 73.4814 21.9087 cv73.3354 21.9087 72.9951 21.8604 72.9951 21.666 cv72.9951 21.5684 73.0923 21.5195 73.5298 21.5195 cv76.4468 21.5195 77.2251 21.5684 77.8569 21.5684 cv78.1484 21.5684 79.5586 21.5195 80.0449 21.5195 cv80.1909 21.5195 80.1909 21.666 80.1909 21.8115 cv80.1909 23.5132 79.9961 23.6592 79.8989 23.6592 cv79.5103 23.6592 79.8018 22.9297 79.5103 22.5894 cv79.1211 22.0547 77.5166 22.1519 76.9331 22.1519 cv75.4746 22.1519 75.4746 22.1035 75.4746 23.1245 cv75.4746 25.9443 li75.4746 26.479 75.4746 26.479 76.0581 26.479 cv77.7109 26.479 licpf80.8228 21.5195 mo81.0659 21.5195 81.3091 21.5684 81.5522 21.5684 cv81.7466 21.5684 81.9897 21.5195 82.2329 21.5195 cv82.4272 21.5195 82.5244 21.7632 82.6216 21.8604 cv89.9146 29.9795 li90.0117 30.0771 90.0605 30.1255 90.1089 30.1255 cv90.1577 30.1255 90.1577 30.0771 90.1577 29.9795 cv90.1577 23.562 li90.1577 21.5684 88.4561 22.1519 88.4561 21.666 cv88.4561 21.5684 88.5532 21.5195 88.6504 21.5195 cv89.0879 21.5195 89.5254 21.5684 90.0117 21.5684 cv90.5469 21.5684 91.1787 21.5195 91.5679 21.5195 cv91.665 21.5195 91.7134 21.5684 91.7134 21.6172 cv91.7134 22.0547 90.79 21.7632 90.79 22.8813 cv90.79 31.73 li90.79 32.1675 90.79 32.3623 90.6924 32.3623 cv90.5469 32.3623 90.4009 32.3135 90.1089 31.9731 cv83.5454 24.5342 li83.4971 24.5342 83.3022 24.2427 83.2051 24.2427 cv83.1567 24.2427 83.1079 24.291 83.1079 24.6318 cv83.1079 30.855 li83.1079 32.2646 84.4204 31.73 84.4204 32.1191 cv84.4204 32.2163 84.4204 32.3135 84.2749 32.3135 cv83.8857 32.3135 83.4971 32.2646 82.7188 32.2646 cv82.1841 32.2646 81.4063 32.3135 81.3091 32.3135 cv81.1147 32.3135 81.1147 32.2163 81.1147 32.1675 cv81.1147 31.6328 82.4272 32.3135 82.4272 30.1255 cv82.4272 24.4858 li82.4272 21.3252 80.5796 22.2007 80.5796 21.666 cv80.5796 21.5684 80.7256 21.5195 80.8228 21.5195 cvcpf93.3667 22.3462 mo92.394 22.3462 92.394 22.5894 92.1025 23.416 cv92.0537 23.562 92.0537 23.7563 91.8594 23.7563 cv91.7622 23.7563 91.7134 23.6592 91.7134 23.562 cv91.8594 22.1035 li91.9077 21.9087 91.8594 21.5195 92.1514 21.5195 cv93.3179 21.5195 94.5332 21.5684 96.478 21.5684 cv99.2495 21.5684 100.659 21.5195 100.951 21.5195 cv101.292 21.5195 101.34 21.5684 101.389 21.9575 cv101.486 23.1729 li101.486 23.3188 101.486 23.5132 101.292 23.5132 cv100.757 23.5132 101.583 22.3462 100.027 22.3462 cv97.8394 22.3462 li97.1587 22.3462 97.2075 22.2979 97.2075 23.0757 cv97.2075 30.9033 li97.2075 32.1675 98.4717 31.6816 98.4717 32.1191 cv98.4717 32.1675 98.4717 32.3135 98.3257 32.3135 cv97.937 32.3135 97.499 32.2646 97.0615 32.2646 cv95.3599 32.2646 95.0684 32.3135 94.9712 32.3135 cv94.8252 32.3135 94.7769 32.2646 94.7769 32.1191 cv94.7769 31.73 95.9922 31.9243 95.9922 31.0005 cv95.9922 23.0273 li95.9922 22.9297 96.0894 22.3462 95.8462 22.3462 cv93.3667 22.3462 licpf101.438 21.5195 mo102.021 21.5195 102.556 21.5684 103.139 21.5684 cv103.625 21.5684 104.111 21.5195 104.549 21.5195 cv104.841 21.5195 104.841 21.5684 104.841 21.666 cv104.841 21.9575 103.771 21.666 103.771 22.8325 cv103.771 26.1387 li103.771 26.3335 103.771 26.3818 103.966 26.3818 cv109.557 26.3818 li109.751 26.3818 109.703 25.9927 109.703 25.9443 cv109.703 22.8325 li109.703 21.7632 108.536 22.0059 108.536 21.666 cv108.536 21.5684 108.584 21.5195 108.828 21.5195 cv109.314 21.5195 110.092 21.5684 110.383 21.5684 cv110.967 21.5684 111.21 21.5195 111.501 21.5195 cv111.891 21.5195 111.939 21.666 111.939 21.7632 cv111.939 22.0059 110.918 21.7632 110.918 22.8325 cv110.918 30.9033 li110.918 32.0215 112.279 31.73 112.279 32.1191 cv112.279 32.1675 112.231 32.3135 112.134 32.3135 cv111.696 32.3135 111.258 32.2646 110.675 32.2646 cv109.703 32.2646 109.265 32.3135 108.974 32.3135 cv108.876 32.3135 108.633 32.3623 108.633 32.1191 cv108.633 31.73 109.703 31.9731 109.703 31.0005 cv109.703 27.354 li109.703 27.1113 109.751 26.9653 109.557 26.9653 cv103.917 26.9653 li103.771 26.9653 103.771 27.0625 103.771 27.2085 cv103.771 31.0005 li103.771 32.0703 105.181 31.73 105.181 32.2163 cv105.181 32.2646 105.084 32.3135 104.938 32.3135 cv104.744 32.3135 103.625 32.2646 102.848 32.2646 cv101.729 32.2646 101.583 32.3135 101.535 32.3135 cv101.389 32.3135 101.34 32.2646 101.34 32.0703 cv101.34 31.6328 102.556 32.1675 102.556 30.6602 cv102.556 22.8325 li102.556 21.7144 101.194 22.0059 101.194 21.666 cv101.194 21.5195 101.34 21.5195 101.438 21.5195 cvcpf117.336 26.8682 mo117.336 27.5972 117.385 27.5972 116.801 27.792 cv113.689 28.8613 li113.398 28.9585 113.155 29.1045 113.009 29.1045 cv112.766 29.1045 112.814 28.813 112.814 28.667 cv112.814 27.8892 112.766 27.8892 113.349 27.6943 cv116.461 26.625 li116.704 26.5278 116.996 26.3818 117.142 26.3818 cv117.385 26.3818 117.336 26.7222 117.336 26.8682 cvcpf186.275 26.4971 mo187.868 26.4971 187.47 25.269 187.835 25.269 cv187.935 25.269 188.001 25.4351 188.001 25.5679 cv188.001 26.0986 187.968 26.5967 187.968 27.0947 cv187.968 27.4927 188.001 27.8911 188.001 28.2896 cv188.001 28.4224 187.935 28.4888 187.835 28.4888 cv187.371 28.4888 187.868 27.1611 186.607 27.1611 cv184.35 27.1611 li184.018 27.1611 184.084 27.4268 184.084 27.6592 cv184.084 30.4473 li184.084 31.3433 183.951 31.7085 185.213 31.7085 cv188.731 31.7085 189.262 30.1484 189.461 30.1484 cv189.561 30.1484 189.561 30.2813 189.561 30.3145 cv189.561 30.8784 189.163 31.4097 188.831 31.8081 cv188.333 32.3394 188.001 32.3057 187.337 32.3057 cv186.175 32.3057 185.014 32.2397 183.852 32.2729 cv183.254 32.2729 182.624 32.3057 181.993 32.3057 cv181.86 32.3057 181.761 32.2729 181.761 32.1733 cv181.794 31.9741 181.96 32.0073 182.425 31.7749 cv182.823 31.5757 182.856 31.1772 182.856 30.4473 cv182.856 23.5098 li182.856 22.813 182.856 22.0825 182.06 21.9829 cv181.927 21.9497 181.595 21.9165 181.595 21.7173 cv181.595 21.6177 181.694 21.5513 182.126 21.5513 cv184.98 21.5513 185.777 21.6177 186.441 21.6177 cv186.74 21.6177 188.134 21.5513 188.599 21.5513 cv188.731 21.5513 188.765 21.6841 188.765 21.8833 cv188.765 23.5762 188.532 23.6758 188.466 23.6758 cv188.101 23.6758 188.333 22.9458 188.101 22.6138 cv187.702 22.0825 186.109 22.1821 185.512 22.1821 cv184.051 22.1821 184.084 22.1157 184.084 23.1445 cv184.084 25.9663 li184.084 26.4971 184.051 26.4971 184.648 26.4971 cv186.275 26.4971 licpf189.627 21.5513 mo189.893 21.5513 190.125 21.6177 190.358 21.6177 cv190.59 21.6177 190.822 21.5513 191.055 21.5513 cv191.221 21.5513 191.354 21.7837 191.453 21.8833 cv198.723 29.9824 li198.789 30.082 198.855 30.1484 198.888 30.1484 cv198.921 30.1484 198.955 30.082 198.955 29.9824 cv198.955 23.6094 li198.955 21.6177 197.262 22.2153 197.262 21.6841 cv197.262 21.5845 197.328 21.5513 197.428 21.5513 cv197.859 21.5513 198.324 21.6177 198.789 21.6177 cv199.32 21.6177 199.984 21.5513 200.349 21.5513 cv200.415 21.5513 200.481 21.5845 200.481 21.6841 cv200.481 22.0825 199.585 21.8169 199.585 22.9126 cv199.585 31.7085 li199.585 32.1733 199.585 32.3721 199.453 32.3721 cv199.353 32.3721 199.187 32.3057 198.888 31.9409 cv192.349 24.5718 li192.316 24.5718 192.117 24.3066 192.017 24.3066 cv191.951 24.3066 191.918 24.3398 191.918 24.6382 cv191.918 30.8784 li191.918 32.2397 193.246 31.7085 193.246 32.1069 cv193.246 32.2065 193.246 32.3057 193.08 32.3057 cv192.714 32.3057 192.283 32.2729 191.553 32.2729 cv191.021 32.2729 190.225 32.3057 190.125 32.3057 cv189.926 32.3057 189.926 32.2397 189.926 32.1401 cv189.926 31.6089 191.254 32.2729 191.254 30.1484 cv191.254 24.5391 li191.254 21.3857 189.428 22.2485 189.428 21.6841 cv189.627 21.5513 licpf202.107 22.3813 mo201.146 22.3813 201.112 22.6138 200.847 23.4434 cv200.78 23.6094 200.78 23.8086 200.581 23.8086 cv200.481 23.8086 200.448 23.6758 200.448 23.6094 cv200.614 22.1489 li200.614 21.9497 200.614 21.5513 200.88 21.5513 cv202.074 21.5513 203.236 21.6177 205.195 21.6177 cv207.95 21.6177 209.344 21.5513 209.643 21.5513 cv210.008 21.5513 210.074 21.6509 210.107 21.9829 cv210.174 23.2109 li210.174 23.3438 210.207 23.543 210.008 23.543 cv209.443 23.543 210.273 22.3813 208.714 22.3813 cv206.522 22.3813 li205.959 22.3813 205.926 22.4146 205.926 23.1118 cv205.926 30.8784 li205.926 32.1733 207.153 31.6753 207.153 32.1401 cv207.153 32.1733 207.187 32.3057 207.021 32.3057 cv206.655 32.3057 206.225 32.2729 205.793 32.2729 cv204.1 32.2729 203.801 32.3057 203.701 32.3057 cv203.568 32.3057 203.535 32.2729 203.535 32.1069 cv203.535 31.7417 204.73 31.9077 204.73 30.978 cv204.73 23.0781 li204.73 22.9785 204.764 22.3813 204.531 22.3813 cv202.107 22.3813 licpf68.376 31.6816 mo68.2305 32.0703 68.0845 32.5566 67.8901 32.5566 cv67.647 32.5566 67.4526 31.9243 67.3066 31.584 cv63.5142 22.6865 li63.125 21.7632 62.3472 22.0547 62.3472 21.7144 cv62.3472 21.5684 62.4443 21.5195 62.5903 21.5195 cv63.0278 21.5195 63.5142 21.5684 64.0005 21.5684 cv64.3892 21.5684 64.9727 21.5195 65.167 21.5195 cv65.2646 21.5195 65.4102 21.5684 65.4102 21.666 cv65.4102 21.8604 64.7783 21.8604 64.7783 22.4438 cv64.7783 22.6382 64.8755 22.8813 64.9243 23.0273 cv67.5981 29.3477 li67.9385 30.1255 68.0356 30.4658 68.1816 30.4658 cv68.3276 30.4658 68.376 30.2227 68.4731 30.0771 cv71.1475 23.5132 li71.2446 23.27 71.3906 22.7842 71.3418 22.4438 cv71.3418 21.7632 70.3696 22.0547 70.3696 21.7144 cv70.3696 21.5684 70.4668 21.5195 70.6128 21.5195 cv70.9531 21.5195 71.2935 21.5684 71.585 21.5684 cv72.3628 21.5684 72.5576 21.5195 72.8003 21.5195 cv72.9463 21.5195 73.0435 21.5684 73.0435 21.7144 cv73.0435 22.0547 72.606 21.666 72.1685 22.6865 cv68.376 31.6816 licpf60.8403 32.3135 mo59.6733 32.3135 58.5063 32.2163 57.3394 32.2646 cv56.7559 32.2646 56.0752 32.3135 55.4917 32.3135 cv55.3462 32.3135 55.249 32.2646 55.249 32.1675 cv55.2974 31.9731 55.4434 32.0215 55.9297 31.7788 cv56.3184 31.584 56.3672 31.1465 56.3672 30.4175 cv56.3672 23.4648 li56.3672 22.7842 56.3672 22.0547 55.5405 21.9087 cv55.3945 21.9087 55.0542 21.8604 55.0542 21.666 cv55.0542 21.5684 55.1519 21.5195 55.5894 21.5195 cv58.5063 21.5195 59.2842 21.5684 59.9165 21.5684 cv60.2568 21.5684 61.6182 21.5195 62.104 21.5195 cv62.25 21.5195 62.25 21.666 62.25 21.8115 cv62.25 23.5132 62.0557 23.6592 61.9585 23.6592 cv61.5693 23.6592 61.8613 22.9297 61.5693 22.5894 cv61.229 22.0547 59.6245 22.1519 58.9927 22.1519 cv57.5337 22.1519 57.5825 22.1035 57.5825 23.1245 cv57.5825 25.9443 li57.5825 26.479 57.5337 26.479 58.1172 26.479 cv59.7705 26.479 li61.375 26.479 60.9863 25.2637 61.3262 25.2637 cv61.4722 25.2637 61.521 25.4092 61.521 25.5552 cv61.521 26.0898 61.4722 26.5762 61.4722 27.0625 cv61.4722 27.4517 61.521 27.8892 61.521 28.2778 cv61.521 28.4238 61.4238 28.4727 61.3262 28.4727 cv60.8403 28.4727 61.375 27.1597 60.1108 27.1597 cv57.8257 27.1597 li57.5337 27.1597 57.5825 27.4028 57.5825 27.646 cv57.5825 30.4175 li57.5825 31.3408 57.437 31.73 58.7007 31.73 cv62.25 31.73 62.7852 30.1255 62.9795 30.1255 cv63.0767 30.1255 63.0767 30.2715 63.0767 30.3198 cv63.0767 30.855 62.6875 31.3896 62.3472 31.7788 cv61.8125 32.3623 61.521 32.3135 60.8403 32.3135 cvcpf177.014 31.6753 mo176.848 32.0732 176.749 32.5713 176.516 32.5713 cv176.251 32.5713 176.085 31.9077 175.952 31.6089 cv172.201 22.7134 li171.836 21.8169 171.006 22.0825 171.006 21.7505 cv171.006 21.6177 171.106 21.5513 171.239 21.5513 cv171.703 21.5513 172.168 21.6177 172.633 21.6177 cv173.031 21.6177 173.628 21.5513 173.828 21.5513 cv173.927 21.5513 174.027 21.6177 174.027 21.6841 cv174.06 21.9165 173.429 21.9165 173.429 22.481 cv173.429 22.6802 173.496 22.9126 173.562 23.0781 cv176.218 29.3184 li176.583 30.1484 176.649 30.4805 176.815 30.4805 cv176.981 30.4805 177.014 30.248 177.114 30.0488 cv179.736 23.543 li179.835 23.3105 180.035 22.813 179.968 22.5142 cv179.968 21.8169 178.973 22.0825 178.973 21.7505 cv178.973 21.5845 179.072 21.5513 179.205 21.5513 cv179.537 21.5513 179.869 21.6177 180.234 21.6177 cv180.964 21.6177 181.163 21.5513 181.396 21.5513 cv181.562 21.5513 181.661 21.6177 181.661 21.7505 cv181.661 22.0825 181.23 21.6841 180.798 22.7134 cv177.014 31.6753 licpf45.6709 31.3408 mo45.1846 28.7158 li45.0874 28.3267 45.1846 28.0835 45.3789 28.0835 cv45.6709 28.0835 45.6709 28.3267 45.7681 28.7642 cv46.0112 29.688 47.2266 31.8271 50.0464 31.8271 cv51.9912 31.8271 53.8877 30.7578 53.8877 28.6182 cv53.8877 24.6802 45.6221 26.8682 45.6221 21.5684 cv45.6221 18.9917 47.8101 17.7275 50.144 17.7275 cv52.6235 17.7275 53.2554 18.457 53.5469 18.457 cv53.7417 18.457 53.7905 18.2139 53.9849 18.2139 cv54.1309 18.2139 54.228 18.311 54.228 18.5054 cv54.5195 21.2769 li54.5684 21.4712 54.5195 21.6172 54.3252 21.6172 cv54.082 21.6172 53.936 21.1797 53.8877 20.9854 cv53.3042 19.2349 51.7969 18.3599 49.998 18.3599 cv48.3936 18.3599 46.6919 19.1377 46.6919 20.9854 cv46.6919 24.8262 54.957 22.5894 54.957 28.1807 cv54.957 29.9312 53.7417 32.4595 49.123 32.4595 cv47.6157 32.4595 45.7197 31.73 45.6709 31.3408 cvcpf155.007 20.6221 mo152.717 25.5015 li152.584 25.8003 152.717 25.8667 152.982 25.8667 cv156.966 25.8667 li157.431 25.8667 157.397 25.7339 157.298 25.4683 cv155.339 20.6221 li155.24 20.3564 155.14 20.3564 155.007 20.6221 cvcp164.102 22.8794 mo164.102 30.1152 li164.102 30.3477 164.069 31.0776 164.202 31.2104 cv164.7 31.7085 165.861 31.9077 166.559 31.9077 cv168.716 31.9077 170.774 30.7461 170.774 27.2275 cv170.774 23.8418 168.517 21.9497 165.629 21.9165 cv164.168 21.9165 164.102 22.1821 164.102 22.8794 cvcp163.704 32.2729 mo163.604 32.2729 162.774 32.3057 162.31 32.3057 cv161.48 32.3057 160.982 32.2729 160.318 32.2729 cv159.754 32.2729 159.223 32.3394 158.659 32.3394 cv158.559 32.3394 158.227 32.3394 158.227 32.1401 cv158.227 31.6421 159.422 31.8413 159.422 31.0776 cv159.422 30.6465 159.023 29.7168 158.825 29.1855 cv158.161 27.5259 li157.961 27.0615 157.862 26.7627 157.298 26.7627 cv152.85 26.7627 li152.451 26.7627 152.086 26.7627 151.887 27.1943 cv150.626 30.0156 li150.56 30.1484 150.46 30.4473 150.46 30.7124 cv150.46 32.1069 151.887 31.5093 151.887 32.0405 cv151.887 32.4053 151.622 32.3394 151.356 32.3394 cv150.792 32.3394 150.228 32.2729 149.663 32.2729 cv149.132 32.2729 148.568 32.3394 148.037 32.3394 cv147.937 32.3394 147.871 32.2397 147.871 32.1069 cv147.871 31.7085 148.8 32.0405 149.331 30.8784 cv154.144 20.6221 li155.339 18.0664 155.406 17.7344 155.671 17.7344 cv155.903 17.7344 156.036 18.3315 156.103 18.4976 cv160.285 28.8872 li160.583 29.6172 160.816 30.4473 161.281 31.1772 cv161.613 31.6421 161.912 31.8081 162.31 31.8081 cv162.642 31.8081 162.907 31.4097 162.907 30.7461 cv162.907 23.1777 li162.907 21.6177 161.679 22.1157 161.679 21.6841 cv161.679 21.5845 161.779 21.5513 161.878 21.5513 cv162.343 21.5513 162.808 21.6177 163.239 21.6177 cv164.268 21.6177 165.23 21.5513 166.559 21.5513 cv169.247 21.5513 171.902 23.5762 171.902 26.3975 cv171.902 29.8828 170.243 32.3057 166.027 32.3057 cv165.23 32.3057 164.467 32.2729 163.704 32.2729 cvcpf231.551 21.9829 mo231.617 23.2109 li231.617 23.3438 231.65 23.543 231.451 23.543 cv230.887 23.543 231.717 22.3813 230.156 22.3813 cv227.965 22.3813 li227.368 22.3813 227.368 22.4146 227.368 23.1118 cv227.368 30.8784 li227.368 32.1733 228.597 31.6753 228.597 32.1401 cv228.597 32.1733 228.63 32.3057 228.464 32.3057 cv228.098 32.3057 227.666 32.2729 227.235 32.2729 cv225.542 32.2729 225.244 32.3057 225.144 32.3057 cv225.012 32.3057 224.979 32.2729 224.979 32.1069 cv224.979 31.7417 226.173 31.9077 226.173 30.978 cv226.173 23.0781 li226.173 22.9785 226.206 22.3813 225.974 22.3813 cv222.82 22.3813 li221.891 22.3813 221.924 22.7134 221.924 23.2441 cv221.924 23.4102 222.057 24.0742 221.759 24.0742 cv221.593 24.0742 221.493 23.7422 221.426 23.6094 cv220.961 22.3149 219.899 21.8501 218.572 21.8501 cv217.344 21.8501 216.082 22.4478 216.082 23.8418 cv216.082 26.6963 222.256 25.0366 222.256 29.2188 cv222.256 30.5137 221.359 32.4385 217.908 32.4385 cv216.779 32.4385 215.385 31.8745 215.318 31.5757 cv214.954 29.6172 li214.887 29.3184 214.954 29.1528 215.119 29.1528 cv215.318 29.1528 215.318 29.3516 215.418 29.6504 cv215.584 30.3477 216.514 31.9409 218.605 31.9409 cv220.065 31.9409 221.459 31.144 221.459 29.5176 cv221.459 26.5967 215.285 28.2231 215.285 24.2734 cv215.285 22.3481 216.912 21.4189 218.672 21.4189 cv220.497 21.4189 220.994 21.9497 221.227 21.9497 cv221.459 21.9497 221.493 21.5513 221.791 21.5513 cv222.986 21.5513 224.68 21.6177 226.638 21.6177 cv229.393 21.6177 230.787 21.5513 231.085 21.5513 cv231.451 21.5513 231.518 21.6509 231.551 21.9829 cvcpf242.938 17.8462 mo246.729 17.8462 247.776 19.3979 248.36 19.3979 cv248.521 19.3979 248.643 19.1963 248.844 19.1963 cv249.066 19.1963 249.066 19.519 249.127 20.8291 cv249.167 21.8975 249.348 22.5625 249.006 22.5625 cv248.764 22.5625 248.622 22.0386 248.542 21.8975 cv247.293 19.7407 245.861 18.4307 243.262 18.4307 cv239.331 18.4307 237.437 21.0508 237.437 24.7998 cv237.437 28.3071 239.452 31.814 243.322 31.814 cv246.486 31.814 248.461 29.7983 248.764 28.8711 cv248.805 28.73 248.926 28.6094 249.046 28.6094 cv249.146 28.6094 249.247 28.73 249.228 28.8311 cv248.764 30.8467 li248.744 30.9272 247.313 32.4385 242.777 32.4385 cv238.646 32.4385 235.684 29.5967 235.684 25.4248 cv235.684 21.2524 238.686 17.8462 242.938 17.8462 cvcpf232.839 20.826 mo232.299 20.826 231.858 20.619 231.516 20.214 cv231.237 19.881 231.102 19.512 231.102 19.089 cv231.102 18.666 231.237 18.288 231.516 17.964 cv231.858 17.559 232.299 17.361 232.839 17.361 cv233.316 17.361 233.73 17.532 234.063 17.865 cv234.405 18.207 234.567 18.612 234.567 19.089 cv234.567 19.575 234.405 19.98 234.063 20.313 cv233.721 20.655 233.316 20.826 232.839 20.826 cv232.839 17.55 mo232.407 17.55 232.047 17.703 231.75 18 cv231.444 18.306 231.291 18.666 231.291 19.098 cv231.291 19.521 231.444 19.881 231.75 20.187 cv232.047 20.484 232.407 20.637 232.839 20.637 cv233.262 20.637 233.631 20.484 233.928 20.187 cv234.225 19.881 234.378 19.521 234.378 19.098 cv234.378 18.666 234.225 18.306 233.928 18 cv233.631 17.703 233.262 17.55 232.839 17.55 cv233.676 20.115 mo233.505 20.115 233.352 20.007 233.217 19.8 cv232.848 19.26 li232.83 19.224 li232.74 19.179 li232.542 19.179 li232.524 19.179 li232.515 19.206 li232.515 19.71 li232.515 19.827 232.524 19.899 232.56 19.935 cv232.587 19.971 232.659 19.989 232.767 20.007 cv232.839 20.061 li232.767 20.106 li232.677 20.097 li232.497 20.088 li232.281 20.088 li232.155 20.097 li232.083 20.106 li232.02 20.061 li232.074 20.007 li232.218 19.908 li232.236 19.863 232.245 19.755 232.245 19.602 cv232.245 18.567 li232.245 18.423 li232.245 18.279 232.2 18.207 232.101 18.189 cv232.029 18.18 li231.966 18.126 li232.038 18.081 li232.146 18.081 li232.272 18.09 li232.317 18.09 232.389 18.081 232.497 18.081 cv232.704 18.072 li233.163 18.072 233.397 18.243 233.397 18.585 cv233.397 18.801 233.28 18.972 233.055 19.089 cv233.442 19.656 li233.487 19.728 li233.613 19.899 233.721 19.989 233.82 19.998 cv233.865 19.998 li233.91 20.043 li233.901 20.088 233.829 20.115 233.676 20.115 cv232.641 18.207 mo232.506 18.315 li232.515 18.369 li232.515 18.945 li232.524 19.017 li232.596 19.026 li232.758 19.026 li233.01 19.026 233.145 18.9 233.145 18.657 cv233.145 18.531 233.091 18.423 233.001 18.342 cv232.902 18.252 232.785 18.207 232.641 18.207 cv0 0 0 0.988235 cmykf36 30.492 mo35.469 30.492 35.028 30.285 34.686 29.88 cv34.407 29.547 34.272 29.178 34.272 28.755 cv34.272 28.332 34.407 27.954 34.686 27.63 cv35.028 27.225 35.469 27.027 36 27.027 cv36.486 27.027 36.891 27.198 37.233 27.531 cv37.566 27.873 37.737 28.278 37.737 28.755 cv37.737 29.241 37.566 29.646 37.233 29.988 cv36.891 30.321 36.486 30.492 36 30.492 cv36 27.216 mo35.577 27.216 35.217 27.369 34.911 27.666 cv34.614 27.972 34.461 28.332 34.461 28.764 cv34.461 29.187 34.614 29.547 34.911 29.853 cv35.217 30.15 35.577 30.303 36 30.303 cv36.432 30.303 36.792 30.15 37.098 29.853 cv37.395 29.547 37.548 29.187 37.548 28.764 cv37.548 28.332 37.395 27.972 37.098 27.666 cv36.792 27.369 36.432 27.216 36 27.216 cv36.846 29.781 mo36.675 29.781 36.522 29.673 36.387 29.466 cv36.018 28.926 li36 28.89 li35.901 28.845 li35.712 28.845 li35.685 28.845 li35.676 28.872 li35.676 29.376 li35.676 29.493 35.694 29.565 35.721 29.601 cv35.757 29.637 35.82 29.655 35.928 29.673 cv36 29.727 li35.937 29.772 li35.847 29.763 li35.667 29.754 li35.442 29.754 li35.325 29.763 li35.253 29.772 li35.19 29.727 li35.244 29.673 li35.388 29.574 li35.406 29.529 35.415 29.421 35.415 29.268 cv35.415 28.233 li35.415 28.089 li35.415 27.945 35.361 27.873 35.271 27.855 cv35.199 27.846 li35.136 27.792 li35.208 27.747 li35.307 27.756 li35.433 27.756 li35.487 27.756 35.559 27.747 35.667 27.747 cv35.874 27.738 li36.333 27.738 36.567 27.909 36.567 28.251 cv36.567 28.467 36.45 28.638 36.225 28.755 cv36.612 29.322 li36.657 29.394 li36.774 29.565 36.891 29.655 36.981 29.664 cv37.035 29.664 li37.071 29.709 li37.071 29.754 36.999 29.781 36.846 29.781 cv35.811 27.873 mo35.676 27.981 li35.676 28.035 li35.676 28.611 li35.694 28.683 li35.757 28.692 li35.919 28.692 li36.18 28.692 36.306 28.566 36.306 28.323 cv36.306 28.197 36.261 28.089 36.162 28.008 cv36.072 27.918 35.955 27.873 35.811 27.873 cvf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (BW_C.EPS)%%CreationDate: 4/19/07 10:23 AM%AI9_DataStream%Gb!R&q-"`LZ8_^;JFC<>#S=dB4ZAds8K8j]#\8H&E!Tl+Z-D!LSNktHJ#c1/9C;.jHW]ankBkL\f*OZCCFDbSV,ER84h]9i]YD+n%^KP@MHb%:%>kPb.l>aT(78@E?HL(E+Z]h8c_>cVCX@:nF9((4L-cSr,c&LKa^0>AY4Phsa]6iqr7C1HGD;DYSS`T.ZD<'WQ1AuCN%5MN]^D/Q`7GE$JtW\MH%F11XaI=&NrG^&"\03<RWq1uXqo_DpnERe<sd_>suI=H86GhLl)6CX=rGOTYYIgFBahttZ9(E*ajEbNhb%LQhJ5O.C1SNXAmkZ7;n8@?nb1j&'rBn*SE:m`p-D4.]eb4dq"!k)"fr8E%I9>V@8lR$1@s!hseqJ"`(Qpg+eP+tin6p?SX=eTIeE%DKN'dpYY.%:C`h;&%@O9P;qn1LQSWTnh3Q<//)OO<;dAW$(u8M@l;B*K^$arY+,GpY't%h>i0a0SR6u$He0'cpM\gBrTjIaAd2(0%(cqftoQ],,+5U@KJRnu'ij0/tbN>p[khD*O#-sNAs7,0bK&E<L^1qh"g9b`>Z&d)\7.CqLCq]@_ZRs0"/(f8`hB0+bW3oJ&/;)%Z%"OOJ)O',HDS;1+"fF(O>b.9R_a$l\(";[Y&%Y<Ma0`J]Ol`9@KA_F6UCpSP<REPsSW(?iARU1o2s2F8QU5dOUDRXmEgC1E1og;Ue%E<!g*e@9sW\_=V^m_^$7?@aiFLUhoh\e;dBJ($(?q;[*@4oKf;dfO8$.O_X/6bc$%Haf(*dq65bpoo2HZW3EAHeCGu<qdNg?a,QZ%pQqG]Wl2iJ<Ug6cp$9A]!in2]+6EpR4)!Y"\Z5(hs)).biF<0>s4Vt8mPaqY["!XCC0+KjO.BY.K3%;=\'P%F2cISH,5m!]*IIFp%rU.AWFDjm:+C,X3N;pImJ3(FLq!l,0o[UtKmIaJknaPl@,--<ShfVZQ[fIt22;W3thp\4_s-K+=J)?g+DQc-Ga_Weq]gfV\I<"#s%s1?`shXrO=Xn`Y&U;8`SfC/`ShR4Ja7V\`=Ip)a*BKm1GNPkD[qYh+.#d*9CNNKeteF1rd?]Bgf27NHuK.-Ie9]OmIIA:'o>Si7V%#Nd\\1Ku+29GcudJRC<'hr8+M9Q\6,Eb-e'B2=u*\#k-[pUfg.BR1ut2qSk:(P>.T6S0bd*<rpE14Aj%s&5qU<KI0W5Ms:AIfoJL%W`T-qrVE'b0*slB"TQdrlRquHMlYG!DjCKMl>QRGHReh)r>-l].IZ4K(OlB#On0F2jo;q+"U50aL$U1?Nh[L>aTtEL\RCIP`[s6*%V+?$=jO,n9/4CKPTJTA(!`DGAmk%=Dl)qt(nd%buH!W.:'UJ/ZP[Y(&.AG2VAW=P@l!\./bX0hB@L`l*N<fG*(;HNmf)>I]N819(%pT8r$di[-%b3W2k(lcSjme=9WdSAi*=^@sWm9bK7fi05u\m&T`[bk&'i[NpTIDo@pfrKYS!#f.`Q^&l%Yb,!s92I5<Iqg+u-u!#F%541:G_168u,PKD5H+#FcWDi&dR.i4Z<k:$oRJst)L0aYhqN1[X$gFu"J1pq.l.m/s%h#iMp8;Z/J7&$'.bGj.%0V'h\"_QU\2VL!%W<37IM:+1p6nljGj@oIs1`dG(s%+%78qB!VbI4G<b?C[qJE=58reC6,IpHF>pc$oVMnb<;e9>;1P54/0lKl:SDXZQI79HJTlgr/7%'<L:!,^nEb2u_\K0o#6.Wf(5g2/YAA"cZGdg'5jd?h$A:^Mt^\YHq$n4(j%#g7@CL&TGaBI;b8Ie[U$,["rpHkjCa*#Vt(rNqM$(%;XW>Lm[GL>F5+:9BjR+aN1sSPch?]&RbTa47,MBm^a=/Y3mk]l-M<a\Imd'$6;Ed1s)mB"[TR5%pDqfa9acCFYL6&a8cQ[a)S:2Z%?G$6=,l?ceiGtiIL)T>>=CPj>j$171TIp14:&4h,.dd03f71%`rXUZ7cL(;Ds)qNR4BQ=*DY#r8hWf\8X#GNOKkn9D.//2^T9[Lo%ctDTAZVf*$^WU`en,IKJ>isYJ"'b[e^%p:QAbT8o*_F6KCp3I;?(YI%]9J]Y:\VkOC4=6pI\$;b]Y=5B7V?GXrrVR`@W0$SfY2%I%)=)cWrI^:0:H.78fkjuG2)K&0iXsp"FXc,WA`f4CCoN#qgRM@>g<EC!rE$=Od/8*s\peq\D4Ftj??`7@A$VdrX*l%26s-QMm]RZN%=3^#:lN&$m$Q6"k%Fj*VBO"m/1.;<5)P*?sRlV(^DMkH6HS&lYW#"FT_f\[=^-jSW[r's[\(fHBO53k0;kqfY[]f^$EUE(Ik2l9r%>r=YArGM*XX,HOj[Fl=Cl;j*c-F;@'=BrPML[B9NZ!4mSV[h3<T.)D*h2\NXR[mfsD<*W4>,5]Dou6?/pAp.&rl/VJ>^^9J5bgEm%GE94mKI$&8f@M5c<u^PpH)o?,XBsg^HBgjmS'BgLbl1m8V2]B!HB'A_F:r@]8M%7'DVTFW)DKbrre:KX0;09`e$R_6Drl"!*RBT5%)sBPpC(9e]2>Yaf[]LMpI6!NKTJ*8se79l+rmYurVTJ5uIC%X]V5L\qZ/A=(2@]WE?d4K]P^VDuD;8Ko9tSn&(Ur!,ckbEPr>XI2%"gak#Y!&=n]60lJ9j[?#8oV0:C:552A_P6A!Of/bDr,@h]!0DOQd,6t>).ROdV>5VhR[CUikdKc9nEK&M.*OO-WiDGXnH>tZF<-M%V4CY2OIt'R/1!?%l/CpqV?V1C!=o&:U45DWdc2TRZrL#%L+L#VG*9,pXfbS)g!cRrIG+&<5k[Rg/plYM]"h[4b@\@h>jEu^q:"OG%Kk5D5h<l"H=iF[Rm^qQ9/>ThoRFT\r3>loTG;Yb+c0P7EIT\q2VWc"Th`%A;>MWZ2[OnIVP]rd*V)C?8mFSA1S*/>P('qk%lF5IF%cb"P]k,NnkTN)KjY:kE,.@6V5><f<0$TR\J^0BncSp(n7F2k-R=7`k^S`eTaY7!qiRoc7,r[MRic)[ItpD:-u`SDd(`r3SKjGAWY%Tb?4gK&n.jQ85@WM;X9(BX]&ZO?A',EddtoeVC5C*:!3t'W(bRURa4oA%cT%dJEYP7dXit1i_.2;ErlYZ?I]_/U$S\QfXCf2;0u0%]@A3`FfS0^)QbVXD72K@NT.gc]M4]+hVu,ZI;&XsBr+6F>*a!:.O3\u%V-OB_60KS$gE>%/Z&[L?!(\(iM'^$'1&OH$Uet0=D/Wi%/9CSKfk"9`r'd?`FaMjgD4;Bj=l&OgDek]66o$?Y<:1uWn2!XS[&q8*&!o7cDXU4WlJ]$jiBkWM0/<^Q6TZk-1MLCeEj6m=LGYR\%km?BT.auu\k7M!0['Ht3q[b(^T=Mq*`j--RgboLCF4&=N9EQO4Z?lLoFfc+!X'Igj=N\=fC[8+d,/pm9,*QRA7=h,s2#EI78s/f#%)b<EPWI1/lX`KjFSa3?R50=3=Bl0A5B22gN4sl/aCNRk*]6B59@>1M/-7qshX<7Ae)SBAth6q+<dN0j%e9u"Q$[RhtH8fo*f`22_%mE8\6I19E?5(#l;T-2:+[G(Xjq^g/p&$=-b<E@,PTj"X7KbIJ7r+0[nZ`-!iYA1)CqU5=BgrI^Z_sPG#"i`@G>hjO\-9TXsYA^gQ%+hrL\9"0e8rd9fL"`5XY_V-j.;KXZ/WRSQqQ6AilA.b+&"t"`l\uV0'/NM&=+U)G-]6-JY4kDk\%"`i,kc;hVR%$:6qc:"HY?p+M%Y5kJ.Bm5tDICieG+u<L07(\=/M,if'plss)+OXQ[M`B&f<>kPeqVH\S"ps:0/J>G(:$Ub"aPQ`Sg]X_`ErE#Rg-Dshc1M1[U&+mO%KOerP#.?TfXLMP0M=t#GgWZ*=monlk4.SN;lnR0PrBk#Q!u"YN9=]-i>ZE;?$cI.?$L5lZitA1:`JFuKBTXrIHrS-e?jo8K7#pU*%7m,>#h3=,'G:)tLS00?<4$c&DpV^,8ohRJ1e\UF^dkQ]6[=]@%$k_QV<N4k*98K&C:@YgjX4uBk^Xbe%L8E21o%.clf=O7RZ-0'B%Ds5MKn^`o]aUdf3j@6tPi9ndH`?-&$n?^:jNR,&YR]GiLX2b,#mEtCoPoh)3^4!V4cbD\oc&\U,WQW?Tb4OEQf!k,Gg"Z#QT3.Z]%k]PZ.+6QuQSM.7Eq%&M[ioBTNp[pgrAaO-CH*]C$l"+Al-TcUMIs'm\IL:NubWHmCR997WHY[*iU,G0>E-D&"@_paMT:"I"5[P'^%WO_\H@fFp$LM9o7YHIcf@ID):2#5suCi\RbMYu(eGH[u![AAo`#QD.2cpIm5lU2]d#L7.5nt\#MI,`Y8h5"WLDk3p7C5s@u?YrP#%of>k2K.8e5F?`!^q?_XhhSQ`LCT?Ff::pJ;o;2Eaq;*`.o(H^qX]-b!,-'J[hn7uVonCU^^L+*Zj]39Z^R$;<.Qq^B0$Sm#>3p!8%V)p2K;hkmmorLbI;l@H(?DUl05)/f%WCjE2Wn*Y$Spu3oq]W#gp>_4qfk8be-@TK*au7o<(HI`b;bs.N5@^/()1D0Q^9NZMQ&h=r%S_SHlT&.0[n0t]lc)F`,<N04V<:.oA]([A/_2%Dr(X>+DFKUD4S!0K#Btl_3T6[Q10jT50UG&\(S!cj-Wco"lhGU2SRa0OP9#%jM%+.[o(WH@s[5J4X48h-r:)qCN4*phrg)D;!DT?48.`Pc#nZTR-eY&l<ZKj*R8mHJD!k1'daWRUr*2m^rfbc]Hbq`b&>q45o3W5Tb,%L-P>YGl3Y'.GK+IE@%O2?u"DVr7<roSt*VjhImoLAG1.do?#1Rp#`HqbXsfY7Rqajh0QXl;>VXh?2o)S!HZIqnDmhek03r^pfUCh%>A&0ZT4\ZC.LdKJQ.EEg^<9,E(2$Q/X\=M!XnF'?f';Rf'ir*H(hQj\4o#rF:G/Bc8p>3C>=kYF/p=YkCO[B@E[q#Kch?[S*j[AF%n"/)h2I90i<=7c,Y^O3UgXlB7_822F9%V]-4,pQsXY3Ei>b4**:6ekWdsXA?IG)`EoOt[Yp5iA?#PNH5oh&8]Q"d1?IK&i-W4eYA%i%GHCVn&)lSiisTjAbt-@,Dnfk,D7KA#[31*+%MR:[]iF<dK(<I$RuNX8.)8.]_"?1fjL)rE-8,AM\SkOA?pA5Ak+6g2?@1:<?,S%h7;%0R?*uB]2WKURPuS*S$l:"DEk_5$nGWIWH@mrm%;c"j#9g!bBBo6q;p2LJunSkI[3q?1)[-`rqU\7W,cP4KQ#THiY,PRq7;EJ%0)"S[S])uNmdiT?FL@TMn+unL)HD[T1:t8^&qr-.o27'K:R5)>gS1o4s"`=(MNoge<Z4Y-^-(*&JkFop,aC\JA55-8]>$a@?S?o1%V&9-BolC"#<;QHq?FSSq"8hssMf^G9:j]8*Y>4h0_HFT;Qe"UomuL6lgrm<blsIFd=>[5ZB&9_.Qjb(>P@&0@l(.1GobY7+iqFKu%i6+boJ)`T^CTi9gns\)n^%Sa\V4%8C/ZW6m&+[G@AKN6_7sVkPZe^Q,:O0^HZ2N4BY2i^Rmp?m`rmB4`hQJe[nE.W)hQK+)SG6#U%ISK'n$.aQq#j(NgP%omq*DX6]^S[?cp[oOg\lsKPodb%KCRom&'#2]gHA?nYelVHlh.'fh_XDcbrat&K^H>F7lhUK`aM.]R\WHQ$%bYA\@]6V0*@;!DZSG\hE@qTXbHhQ=Bq78<(iucR%S6sU?pr_(7NEhL7n+68q-f=$5IF7%92pQQkYEs>.jS/PLft[B]pBT#OFMHmV%bj"IgbfmcTTjO@Y=0l-)YAYe'>Ami)?dk1al/#1JnD=+=IKbb6/jB/Cm_EEf&*?qsSK/mI`;[tbpk2OZ"m0*3-#;fq2j^`DoUD]F%bj*3algSHPbJqZ?g6_IK[0iXE@s+VkZ+@NPoR>ZP^\sP6`V-g95,76hGD<PX,is!;o/2YX9-9o*)7K2.p^pTI<tLBV?R2EH@;>''%jnTmtU<3('oPo0&'"I=#BBJ=4U/3)EcS;6.=fME/pGo?TV)U),X`neZeRhiC\T,0E>:Jr\E[h7A(A9`tdiL=BlCIi$W-!)82CcCf%qK+3dPcT@?WCrN)/kIf8XoIRad`l!S_3;3;V;D38Uf,hUnlfq-AGmJ@R%*@k>6!Kc/+lZOk#MiU]lR):<i/RqKCtj@.9cb<H'L;Z%.ue^9*aA?*h,gm2E[m'Wd&&eGX7Tn:9InRbf2Kj#Z2sSN3Ra=A7R*C1GmQN?p!l^#kfrK$3[$)FH=2)RXG+:V#WqFAYH-AEdeL19%2Ok=2MRU]bJ&<'4q1AUl=*(\Xgd\/)R&fJlr&khb8[mY'cK)[:/Ss9YiZCfU7-pI/4\bsm!W?gQ_6SYuh3p4VqeZm9b4el'IMHcB%mK)g!>5kF>Cfnp0B;QFs&:\!Gleadn7X'!=_0T:WQN(+_ck<ugHSHh,P9.LZ>dYD^EdhTa=*&3srrWr*2;9a$&s3IuP1-@`o`ak-%a\SMi%fD,6Ik52WANJe_llkbs1]+X?dD(2'T22HVZZ^^QJm]sUa;R?cr6?@UWQ'iZ9ih9tHAGkgLZq$T3W4:g?XeIb/7oV2[P5j7%=+(\0IIlN.4>VoojHCqthf8#ocZrf'T9W>(_(7JGZQ<r/eW3la-%)BJKa4X[4mrRh4_XFS2`?X>$tm<uHKLgI]ZfNoa[3JH2,_39%IjFL(ELO_Uol!>6H"&j^<Jlc1`i90+^TW^N[Df+EfCZRTXCf_jg/E![OMPMlmbV7L?9K%:9)<!mpX=99m+ct0FfZVs%3\cKRm#4Z%h`jiglIIYk/X;]S`"lT2q2@>Wf@$bR4^=.+8'b_N5KTM=S*-=S$F<_rJ*:$XkKY0SIi3OfD4hPV4*Mt7Pim#jCqU>e=t7eZ8AW<#%oDN[j^$]d`E8l@XdtJb;UXo<C%rEb/'t1>%/":(XCHf45m,r-NX#tmrmH3iW/1[f88A%/M6ZNjJWE43<Q7ZmqMB;!3E@4O6$&c&D%?"c#@j1C_FWbJk?1qMgU%*1(\H/m#jeekKdRs6-F^"*Ln_5s!dZ[Jb,jefBT-%;3:,i'C::U4<t)`<n]/!HYW*^=B1"%R:$'H.`c%V8k7,TT^?G0nLidZ"E%_Yj>mScX*pcqqX@QEb:_GCK[%,:kgJo'_QP0cgfXIB%qGQEpVu[m$Fts$t\/>Kh9%Fo##QVrCJoM1kdI/%cH>ZkXr&(q3kj=jh$R2[HaXR?$@3(U=LLh>CsnW$>*UVY2j7`SQ!8J;o"K('ok]lUEk13oH2bNaC823MOa`[hp6=J.A_L"sS$Q9_%R;CLiH%"p)'Wd%"n+X(9j``;e%FJ&rftRs3';oY6N,e*!9(B2_mgPQ_A1OVHWt);T>^_sH-`:HG430s@Yt.S]gtC&ChqK7W)XE(u%P#MTF:(?B5kJ!!UUQQ63Gmi^-G!E=.W(H,(#o_?b)N+UJ:'lH`rI,Ubn9_dK!3#P[,WXboo.u"im*$f=IY!p6a&YaW>%u0XBC5$<%[4Zs;np;V35DluiHrBnm]ccFj:Nkja&U_"^mE`kt,$%!:#$g-kbfX5L)7m,?=nWK3oe,dHGI5;02eeQ6$?EdPmZZbSaangG$1AL4%H2"ILT/Xigi\_NiK)QgSr[q@;)P8J5[9Uh'pWe28FRZ!]I^mJ4iBE+uYggCm^ql.G4hZJON`m_i<12#M/S"4ED!Sq95-Odo7uW3X%-2N^^nb`.YdQWa4O3P:'Inc4W0K]f0l*N2DH?l]`18`mZLXRQ>M>=#jZ<eU/gW&k>]R,(JVmBP/[1'&@hkr'blks63_;+_SnD73!%_fbA.*-FuJM%:_oP(oct?f!oK9GbqFjc:(`jr:Hjdp=J1?_IIEhkTRbfhs9<R$=>gA5&+;X7SSra&[=CgaQgXc9TWQ1W`LqR)uCZ%cB`EnpYWh/mq81dAF9.!IGUH?GCsZmm=ES3CcHo[<`,.HOV])l)I?#_(X?##[COsfApcB1F3d<]3E4.K<[m<]It2PT#&d64/;_MP%*6e/LU\C^c=t/d3ge#K?>d(hdI#sjP.!mKs1eRZ*TWnF\VG_HlKe4f7oZ9;We%P2jQcl:%WKSaJr%+"EY]93r`(]#ZC&rFeKHXD`%U)bQn/T4n:8@5-m=c(_e"-8.q.adn&&dfS17-iX<@p&VQ&3kgnlBu.qd1=,c1b?V-+P+*UT]O\G[O2%@Q-*7Ph:=7XC<aLmZRFQD%0YQ$sAFi6F6H7F3;Po^'"23bn_&^k.*oArOAHnn/!UM<6Yam4r$u<MjATiH#I#sgJA@'SUTs0*MqYYMFlpL3oCKWB5nk`dK?0Shg%ER^/UVBLYF*;u!oHVmDlB$U,DoIjje%CP:@_/d\Q*Yg=q;3YC?-0*#Q[:*QcF$?]6)j>DS:Le[P#M"R$b=3QgmJ(X]2'-ZOc"&5=%>k\-*5?YQO_ZsC.dJ.5oT1_0resQ@h"t^%UUee(H/S>J(6rXX89<WST^H](`_uX'noHt0P%@:]D;VD\eHo&QsK.Wc+TcmdTV*_)C%0F[/np.6I:/:U$%YqfIDH)GSb<PV0&Z1t?(YhZX'9E$]IqlF)Gd^A4150&9FCbB-ANtqtV;TfZra+^[30dCd>B;n@cS.RoB9DU5=%MTK!]5$:Q.VOkkc!Rt!sk3D`;826Bd>hc[?okPc/4.<psZDYi[/TYhe9XHAe<_Bc1SDDhc_QpCc:#_G%aer_JadHcD4X8W=psqP@%cWTVtSYG%HF%54K.IgV?U[fGCV.3L=IE%R2cCSV9/E@Y(b?/q;D;H<kcKOteNVLVbduAu]Hg=fpFN#,>Brc1)*',kdW&K>]\\2FY%*4k,<3]aAa6OmCA#$k!4i4q?po7\'(3a6RA*4hY4AHlEa/P"!X/'ae\Z3<bAU!'VR1[&kc"UE8F/'afo7t::R]&F,ZS]<Zu%UF&Y%Sa_`"SjQSL6"c]4ch?0cIU1,(Ft).OaZQ5T)#1eBIu8ka8iK='#P*&t@-s1N&%#V9Gp0)?SXelbs12gs^]!tmn*/YtR2?I,C_p#N%S5NKRV%e>rS=-eD;E)'qVr:e;3i2"<<`,f&MC3'$rY=M=BcG(W@;_k:jqM>bWAjE'I@/KMl+'ORn$sq+P:^QBV9JVN.@$C,Vs=G=%K&gIoY(,3Nh/El=$F3E%it@s?&oQaYp#7!/V2W.r](U!@s#)FcY>14AR-[j+(o0s5>FrU>]VcR0h+Ad!Ug-S_hWoKE@$&)-%`"Bh%:lo4#;/.=b(1q28'^f[gc#4>_b%E\X=t([?jXe]Gk9X^1\aroc#,P6l)j=ouQ-;e#&kStoinGkV@)R,k!VZ6NKldNCS66i<*J\=o%0%b')9k;Io$$2iZM:L^"JS)7Z_"qYo7GT]\nXViZCSX8eq"iZMcV17%eKcXLIcb2t2[Q@7.;boY'uduWI`b4/bg2:6(BZlm*acYY%]^5D>H$i,?,8[58WhkTqd/2o4b<I^W'rA5@$4?*_D_i6Nq"Qh7NqOQOA+""MZQ6g?MF]8Il"[8kX_sPdYkE,Hm&g7Y]5"VFc'HPr%IO\2_5Cl1;S!V3D]\49LZ_oCOmd%Tf>M7:^=]DSs()Kg3?c9"**CWdYdWlfuNSH1:[dOKu:.DP]M`,<j;r%4%f=oI"a7BhXNrH#_%cRNKM&$SFX+PqXU'l!%c?dGm_;g+u.]lV^E@%3QGP<jI(jL,mL4jM:50t+.Y),]MN4!j6uhqR0on]7Q)rU$k1I*-KuUaBee\eLb@%F7819Y4?Vnni[Ec:$V8i(d#I[o27DZ&<BM)L>>*9R=ZdYc[.8%PO4KXfhHg(0I<]*'Qc?rbh]lD*gqISC@7;IfdA"kA;"n!h:Mf)%mbWpHJdAsMbms/d8=bUp]c5cPK4CMDa;?9L"/V^a3<W-'A2<cNhi5MuK@tNBM&&R&pJ3Y:mZ^8f.F?/EZ+SS%/3gd#c9k<,[.Gd/%)9_J=^GkNPo#L!DOXap$)Xcq/0L']e1-LFlkP^M:L06;M3]B!XoWb"7KsZ:XQWH-0]j\V;@['qQL)e9K,N*+bke[!>;b3eVr0F>C%\pPl=hpne+D:/ZI13+^iOpY<`a\Ya[*Uf'N^:q>WE0W^ulA!T>b;aj&_T&,W2fs`<5l#@&&ZT?bLDrB$[7ibhl"n1uo&1!;An8i>%4!2b(\N1Q_<?kukVXrcj?.-Nf)Q!&a.[_/ol#@Ru+&:-mSHFB[E<GCAof;\&o>O2M.]D2ZqeYDQQ&^]S_YU(WVAMjJ6"f(gJVE3X%kR<RC[9r4;W]4)EY]M.$s)L_;CJfJr9BFg\k@&_&D8ZsNa`TT(?)3lMMq-fKJ4l[OU_Y,!X^=4a0>mI$X2PJu(OQ8$5`=!Fl5VRc%W_Y+!o^eCV9qM/ZC?=M^/!J8`)Jm0U3Mm[F%>.mFQngX]gOQ8nd?^IU74uGSmd?`g9'rI5n%,35b+&+8L:r[&7m0qtoXet?.(THU%Qh"S,I'Kt]lG<ufjrf)p9OAW1NdVs]7dB1,AYabr:IaWY5@_f+jcbU4a[h,+`fQ=?V2QWD(!@Ib7OmQ(Q+I5]4+#3nY[i6SFXl*0%@O\u!ce:OuI>I,VR!5TV\Rel$(!bB>\_0"gVS_$C;9WDE-W8n1msuQb.U8s:`0"!Wb^F&@+N_,kiJ^qE\u'q\<4GPg)bYoYKej-)%g:cX;L?G+ZrRh00_@)?NP.jb;[(Nu>oM(-)Vf*lVWj&]l`Q(2tqcN[6Eu`8'=LZ4lXcs99P.kIOaMS1D_Ua'aPB!'mdI"Rpba/Z9%?B0'I]hJkQQ+H:.Ye3#r*6arI'tW-EUH\:gnC^T56@:M8Ifeu5qSZjMGW,*YrGt0-YkI>Q`59pd5!Bm60_+MfD1MZ?6b:g)`V4"/%mZNTK6E,uO[Vj;9X0WR'fkn/?fkkYaR64MQBC[Y"cHMK<q#IFclo'4ijO6guhV$\nU?CN2(N$jX8p4DFG&o,BVQ@/'FL'Y8@><V#%KV-drq%iO5qa=MScG_8X\a@ASG<<hpPlg[LbpT:7<3k9MgV]SP9)W,ChL'eGOI'D=SX^B?]3V\s9%h5YXo&U>l'nNEoDB$/7R<l?%CcSuQG3A/H<2rhP_f"Jg<,e5Fi.[nsDEgjT.5'4@Wh03d7R,UP]I]qEFLtJr13A_l0.6*Wa;i@rj4TE[7?2fa0gsR/Kl7c>;sLab%0"([%[j_].n*++=9]#K@$Ld2?Gr-&BDPr`NUr5>qDi1`50%2*9;I4]4WFEF4j<QH]j*F9LbIa#9;I5u^j@Tp<biE.d<sA&eomLg*%("YD(,B>-'XJ3peAViq<9)$ZG&38blpf(XM63#BliOMYqhU/&eoaRcLd3Om@rSEScc_nAK/ZVJ>A]a:Xf-.HaZ<CpPUlHmn/r*qH%cDJdj7e>Ns*&a9=X(sl-C5eZWQ^(41HX8^S2VgWdO$dR/)8i8`c(fNcZa8o%2BTq4*`Ft&h^I]nACKXSjRHj2Q18%=SkYQ:91OCJ%CGoHaCsNs)l$B8Rj^qqmpe]Xc=o(MCX"^tu\h)6tGq(jQ2P&ADR7h1;8&pigQ^(2kZ8opm9p[_d[\n<hflUB-FEt(h%A-?RoEjtO%flSP2/'!`GQ^(3&3lh*0SMM,'8nZUaF)9XbFBQX46Lp0nRkCalb4N3Ml*Al`iZ0%@2I0?9?,95LGt%AIVTUI)Q8%@?VT[,Y9>C9^%H8]&0/tKEDa-'/`Q%"p<$V`68#29-TDE,!b1jh2eW_$q-3*8YM]`DC+oH`nLY%=%=G/R\.7(U$D.W]Zi19HK%IW&5`fUr2tR=)+h%e%-C\]t19Mb0%Gfd/UejU7=+$>\q%0X-KOWoII&XqqS-6hmNIPcl,V.Lpnr*<*e0(M<KuZ7qg*:.=X'bhJuZ4VnT@\Ai?Vi_EalJ%+[i2U]86>0^0+)%6Rqg^[3Osr5:Y[tbC/MjTP19tT=N.dJ*DCFDP25BX)%9o]2<qlje''s=Ta'n\f8I',G)Fb3Bk"'1O#*^)2=nM%F,-qSomQ&,jCPdqceP@0EiCJ*JY0Ili*JCi$WBDf#"-/<+'Y>U_u!DF;-pD=M1kTaO(68mH!`$:UL2I0"T:AbX>Q#`R>Buts$XG\%6gu2SpZfo[(t1]"XkZ8\aIR:keLQ$OWJmS)hMj;)9fK_ZZRhqbj"0f$ZU#8:]X2U%k\)BMq8X3Z7G7^9`i3J1j2d,h"7M/3fX3SC%U7=MjC9t4<TU_/%FqpkGY.nE%8K@Z%ab"^La-0UUG8BCXR-dJHrS?g]Q;g'8lZ\PXbHL8NiF-0@EeRZa9,"juHi*Q6=D;XtkO&"M%dkT?B]goYi%@kM$S,Mtke9_oa+_uHY(`n_/"iJ5$0*k+NrM.rb%oq)bCKZK&K>''njU@a%d/+"MPr"GJcM@,"fu'+Sn?eJrX'4c&%$t4]$m(\<8i<@u:G8UH?C-Ic-M)G$e])`SWEm/eRL8=/k*9)[agiog\)g<O,:AMc_ka@KC?FVNY;VoLj7-^V]OdBM8$[2]ePW.Y2%G8[U.=Dut(<1"7!Wj=):KtH49?H3[l5s[!B0FTVT^pr]oP+J%$rU(]F_Fiq,(7I8+cOY_T,B$k<gWdstMh*Z+#>M;M^:n\LUF4WA%:2R-)hb!0A:AIP_ntkI2_L(5G94Gc--e#mhUZJstK\!5&gr3^,!\:eice=*KPlmg:ac*GiPF./9\J\i=q<kkG[dD#<?R<Pm9*Aa5%]5C6CaqBbS*=na[Pe4+]CR;VfXuM8PH+$1g2G`cPQK&<H.SO;,mMdgIj*KR'i_!=H@9=tNj198Yq3X*6qRf=bq<m!NEHZLQNEGLD%F'PEC_Q0Xe)l?u&lZm.4k8s4T2QV82G9kLLWN:XoEa2BI<F.0@\Q#=rcA6;uTKM_cqL.IT\Bh6PN^:A-DEHZ%1.gq?I"JnW#PaoM%'D!$JGF6sj9"B@-[iRagp;g$.c'/15;Ua>?52A-KVu7+[UpD'(4EEIWZne2AL=^nP;-Pm?LAf?P$g0#>`OXLQH8$sPQIqOugqV`/%[o0[)F([_Hd`V2\rpK+s0DFq@kT.*sIA9\%26A\-X(gY4iMs7%r9DUl45JLf529Cl&g":OAc@U/0_u_CbKKhlVOi1HF&)=in@f_#%_f\)b:/9pMD(b`Gb,oc_3?.t?9>[ak<a(oGC?m[dI;O0<?VTT^3q;A0iditabudtAs,t8rR@[X]Ed:`<EpiSim_1>[0_OUNrHL7i%-VkC,9)k6JG>_.EhTiU>.AKgeA7k:V<9M824!fp2o9VkqjnagNCGk-/kj)DQf]7"TR-i.7jLCR44XA?oD>p_SK8!@f2[R]6q]<^b%Z`Q-CDrW;H1<WjXd&L>pDJI5dF`"A0Wa%a@7d`fMC!UfY=+b+]om-#!G<TRQ7D:r:Ck+LI_Z",\muebU=Hqf':m;_P.6!1VH/ET5%Z;"N)I3$X[H(H,1W\a!fULS.\2:j@]:=faA1$?<>Z9F$/BMTDlDa+]'NO8]PW-BsY>q*Ad?6@?>ccP1N+Z3<+>IImS+TE9j!=j6_%D+EDi(>u-_A]t0K?eF$F4'IY!"('ZJmtY&lNRKBA++(5n^9&KipMB$Jq:!ZL>=QId2TE3r5'JB4RoChblA\!D@5#78\-j4B<H&h)%$("r?VfEG6TS0SBPt=%SLCX"69^K43>L!G"QE@@H7PD'49*O['cbVk,<p,+jF--E"ggmEV"'X_cPAGGU;'M[_a9APn[_*\7Q'3bq%bK[c)hNUdsChKU/UimLU'\4qLb:JN-E^=,^?dU=Q/fYZYXT+eDgW:)=4QQt:GB,\Ta83NJ1C2#.'%2*SKlaB6r#@uf`+l4k;4/Ch%I1OFr=b(()!;fmYIBihd`Y@S9%cU8*r^At5PD@9^[+\?<"5*L.=WU@.Gu7B#M@PmTBIJJL*5J-sRp:,qntI0srh6Xu1HLbg2O(sH%/s?I+@@8*Ioa:)k<8t_Yn0hZ7,25?X-sr)QDL@N9ja,n*qC#^I[*\$#93>l!oU[?-'9D_;mj7p2O7JRG95P)uo(@ij+4I!4oR>n*%GD&K^lm=SG=0I_-Da\sKV$7aKlW:aB/TE^KWH\=;B6'!l>sFIn286\rZJY<o0\U]kGQ!D+oc*16W/Ps!ME@'iK,skq^W^+)bM?"W%]7._--@I+o9>9^n*%PSkbE:ZS.l>o9O5kXCI+PQo:T<[b^\D*Licle#ep:p&GQ$m2V&s^s_Jbk<Y$^_sb^,ggR!8M7ZL5^DTpg;Z%YB]"Aj]@K(nIM1S34AISgfOIN^L(.3?,,B!=$A-OPii'FD[d-RY$Y5A&oBQo2Flf/eAGN;hW$,W$XEV0hjE9\l]_6LqE;PVn+mcc%,'-4CIb2n`;E?lm>?VO9Y+K#\RBQI`miWPB?,,Ck']C,QrEVWTG@e!VNQ\9hqA$d1V_WurIFg,DQ-(l<LWE*Re)r8D,29OGr*@(s%=8g.Cp?>kt18iZt^["s+9(F%\k]m^7YPJ_-*oAZ4F/Q?)HJeB7549Z*R5t/)m_SK9MI6&"hnKTnY2AGGBk?/o.lQR5`mBP1qUt7.%mhU\_`\ZNF)r)>Rk$>`l;N=p*mp=7_rJF5snK-RAb:lp'c*9GRYd2@rq60W(Fe_^O]70@*YPRp`N"dUCjM'q=E)t]&ShE!.oukO[%+7rjR@[j@cX\C,!odf\V?\po#1@OGgH*[^'O)HugB$YgO,N!4#nZ&3kn+_Wef.Z/`WPmWWK>-YQm+5,VpefrAbK>+Qcse66l^-mI%C>5>"cdbk\qA!r'.q<nWYP9s'i7LThqH5&ro;Z0F^+r2tA\RIhD"QXnn+mb<L16K+qR_2FL>dC_@sZ2cY2?:s=8cfF0nsoNMGJ'0%)BZl/IYA#=QsDe>GPth_^?T@',n9mW?_4/On)fqphY#'1&r,N2^@jY`UT_q6F%4#EECtD<KkBOiM(/=I\@e&Lm/iS[b]\ph'q6"a%T1W=pk0l]?LBW=:\!lXgm;_qVIr@)ndKFY!<+GKJ<Us''-9jS-Y.!)g5$bp+lFqN;Q:ISASXEQCCIEd-<1(jMYh*Pa9RiO]3e=H,%M4)hp?PBi6^Yd=$J+Y1\J+<Hcao'!J9oH-Ws'B1#^DE6i`qtg4Cnl,YB:C"'798=&3Fh`oT3#k'[eYjKIrJn@Y^Lr<%QhFSZ6Rr>%<I&]_nr\?,4IThg((TN[p[cL4G'\K4PF[,B]Bk<"4MuVqR/PZT\(?u#SStXnm72VTe:'N<Aihg-;`"bDFYU4DB(>_<CNjPArqY^?%qj4@?B2>FdpRXe!Do(_.hV6q8p[m(^o]0PqZnjddHSN5$`D:^(Iikl-Gc"@>-QX'F]U^-$,U2XCmDcuY1jdZ`"Dk9,.7*%)e3R8)%.ln\E.'68rY+0aV'9Mc*_<$q%AhAAFNlOBNa,AEWG'dkA5.@FlM`5iBs2(=P__tQPYHX"Y([p#=m`o*Nl81K@gsl^6hlB!-o.Ql0%YA@q5C]\Yj5I0sWn;Nt7@nXGYL"'j0QB0182(.,E?/fc[\s@"Obm>ALV\=,)G.`[NV3rRP\6YSKZ5,#d/BkeQK@memq2^_$Q"`q)%h8,^i:Fs5&0..N!*,eP6q_JD(D>]7OS/0F`3qFaYTC?Kor;#W#@u4^!cJC[e:UFhT2V+E0&c?GEJM186]n1_SrK2PX[WF<.UT`K$%nQhKdg"I);M*c2_rp+e")18bJ-gLRho4K-ES<n^XcS"4LMt53*-OTo'cs=Drq%I6ir\f+Mf;a&O^An-,4%Op?/0"F8S4e;bHgp=^%]^\ALam)Ol_s1_%K<t.1n2:/p[Ck4"8q$irlftVKAs_g*:1:r8DqWS$b@_,nf"AQ)@/OE^]X_;m?+KG5<8"a+-td;?q;1rG#X<as%oV_T_E!$$oH]s\B7OB<e)[f4-$uG:m$:tmFKFu;RH3E5@(C#&$G6pFU$`#<Q49=B%ML?fUB5-h8]C]P3`eCT,JGiD"VXW2_W1\=S%Q;6]O@t(@[I_``(?P_7Z)D@[7?es$JDS0*GIN((GV.4BaIl'*e=U/P64]ZU0T\*5;Q0Aq#.LAbecFo-"`mNqgS!iETg@h@jV@r`L%bgfBNE9>afVB7a/\$ic:\_FHiatugM+DQ.i#n:sMSaS0TZPJ)-iB@*a\3rsircQH[H$t#Lrq2NalZ_Uke9MdI4"tF4%@@'j]a@XB%Y*qrnk*%4oo_KOm!5-*s]u0l_L:'ft@,]GLDRKO9^Rr.1'Y?7RpCe[DAN+e%cY+n^ZJC""]uOsG>J.^U]IW8'.`-W4H+gJ&2YZl-%0)HP>k?7?%B!ZQ2+jO<<jQblk9?u8Nf6LKG0,N,Oi7\EW!O1)mRO?-b0+IrLdrr%3Z'=Vq!Qgu]+&32$2djmVZY7;/f]DJdZ<G;l%e;[VFI_,GD@;copN_Q3An`^Pa)`9uJI.*T_XP?S-Dt&I9<OVVh7>pi]"5%pXT`_"(_&biZ\MI$VAtSRUQ%Bcf1:45k4s]*Y(fg2`%Z--3pr7l%RcVb:Md^.(lekbOYA>-Fn+0B;aB^TsX!K/!&q9t8c]qK<MS*8.@F9-_O"aJ?OCYmXs4-X7(pM90ibLSIJQ'(V.@Ste/%AF2@_nVN_PHp[X)Y<5rd"^F1W.:?`OK=(KR#ek;kaV,F]EV8m5QKIJ\orGuQdSifj$d5_E:FYYoO2=ZG9@pfMoBqeY07M8AF^H6X%]MJ+;:ngml`QQLudD'pTpIXWE\RYPG.c]W"LR*YXd,U0G-stLD`a@Kg3QTYE%BqH+J++@6P^]'jIJrgs@>m/YeF,Wfb7;8?G=g"-%c3@3C_G>57W<\KJlmGDU'-0+k4-[>-i[/umD"mR[M,r%aYo=G^XEF6#=.%I_>VGAnV]pR,=$]C+:HY-F%2=B&.6,`hcmW*mGB`7o%6a_4_:@\WVgsB@a&?0*:9W&'rA_*A$!]D7RHdiL)6u=Z&,gjJSQ>2&>an`(&.=t@@&)IN>CQ4)!_J%b-XY".iZ8,_")mm6#(_-(N%Dj^D0EArqgp-dsLX4-[:8u.6@JI^8NjjJPM`?MhL-aB7E@\Z==q;RTT0!!^]>"P_\0)[N^Z/V6'J*'_*Ie/55g=od-+nl:,#IS]k%\*)"[Z:R+Ecgpn$&8rgS3E=)pL\o"bKNcrfNjm)W"7:G>P8]p4.0r1QYB4E^05"Rij8I\jqA5bMXWf>:59sNkG;O2%OM7SVagV-$%-=s;CgfW")S0`n)?^UYcG7j<,bTGh^6iSiYr_T6%THAu"mha6@:;`t.B$'u0@J*7m^l9FdgUQ_)H"LN@Zfd3j#I?CLT<>h"rDS\$%3iMU.9^IbI(,p2Mlu4^jpt"b,pub/Rm.79'jQsnj6#uK@>ZQ<&1iJ')i*u4&%fF?nZB+e"lYU1e7p52ta$V?-22q./ZhCc1_WDUs%>cn<iVXaNZc#]uJH"G]XIF.r"Ea-/%p3,oaB791Gp;DDh0^+U^<SQo,Fo8Z,b\_40TOLiR<i/A;p1+&t/p>5&mQG9%IfC$d^"n0c%EkVJ6EfXZ/\2fbDmuOAbUoANXl=p^`1RPE?3kS9VpK;;XS[FNZ\ElF5W<Mc/b!,icqXZMp-h%%IZEd^003A'E(igR.rl?EA)9>q'%5ADC+JR"WBLJ;<rke;t)dR=(!Y:<rp3RoNc?HoZ+I<rPC[WgKX=4d2sL!'#0dbAWa&+;/U)sq8/T_\'E>3k2<Y'Jp,/m"Crm]UMH%8,c]`U35.j/m(n>)X^DE?0A@YDA7I)m_6>9r3=WV5J-9ff9t7#hn2,KID5:4_oK6)([h+nkHF\YZo3(&\./mUFmIe+P*m3U==9O(%CHpk(S#rYc0,n[kfuYc)#bDInR>6DZkht/]a3F7p_V+&&M$7O%Iq!T%"+<Jn7+ak9_dGPhdHF:eUoD$/):>X>l.*h^0,r/GCA7#f%btlBrcKaL:q'k2PFY5t5CrB72Hg@<]\>RZfeF-a1YE-H3h$PLSad*u=)s-?/)OGGXUKh(m[>[`tjm"%`VT,EkEchuF1,a!6X,Fb-%)P8q1eO=LYlKrAQg*i_P;JIU[?DXU=E]U.P"u=GY+a$Va#"i.@id`=8H[0?XHbCm6=SBqqG?_E>T3"4h>FE*?mstHE[OT`Vl`>9V%]Blq1Oir2CqMO0"1ZYf?h:QMb'mP*NgrXYA.f@39PC$*I"UTTcZaGhc[D?=MNMU`9qVE2p'4>mr_*=:LQ(HW3d%g+?^,WtAg8`Od%0d\L&8>l"&di'PAD(Xj5ILbp69p)?.I0(pA(A!Uen-+"86a'giOE&=7([6:WRUC>:'5P?pY5PDf91o*3)=u23^WqoB!DL5.>p0P]%S[:pCcA=(EN.G&J6Mo1Fb>C6pK.+o+7'>=M3f()s6hG']=<0e4mNHVUO4?O\jW9$$+1$SJCR8aQkf;^+b&S$GNg=ZELpGf'ij`Bd%%\bNKO>t/tVh6D@4f$l*j)YcC[@o?]:rH0?U+H$M3@;f3+Ne/iFQ\V16'O59d@E("#>pe68@bV;k9-5>E"C@[O4?O\AWj+`o7,=:%LRlDO*CO$WH"D<W%\bM<SAo-A%\bM<S=Wk)X+MhDJ2T&PrT?lFZo.j/R,g(V@rMh;RcNND;NEl!l4tjm$K6Vaj)>A@4,$)^dHGJA%@],<0Z&e)aH=!"/hp:!PrMAcQWD$(iZJY"44s5E+[aMh"^99KpDRM(..fPLFs5AIF\B:A@lM*R@i?MMjYKRVrQ-WIrpQb!LV75j[%g@[o/\olnDs'8o"kkIODE-n^u>SXVY5l82T$a!iM5Rfs&TsNtl>'O(Ve[P%_j*t&MiW&;^s/mhF2?DaNiK&3PO5Bs9X6N\L<53lp%eP#i";h[;N/Io9lomF6gU=cO'R@%(I=VOm%JGHT4oRgC"n/Q=U6&c&N?U_nU=9M/sj30lDeKX.27,p=g>@"@Mmag0L]7B]Z%#]ZP%>2smJNJ3sV(lrHM5R#!uYnKrV:<di#XH(mp%Nf)$gqbWEnXVY>-;D@_U<pgCP%MjSf/$N+YP\M[XLVctX06#BOM[Y#jtQ."<:bBg%jZ,3MK7@hV)X55(3FNn.0.Pb2f#E`6FSrSa4f8)BGr6sYY,mHn4'`BnkB#p0(^d^`:h^n1AtPie'81rFJVQM%dAtWZ_b+1)SZ<f]%L3\@b@I3bu4?3qO>L3[8i7'k!>c1?4BQ4qPhhSX;jXq!/<:^/,;n&FN0Z*@5;<'CODMa*8q#RZffG$a5^kXQF?nW%P75.]DK*_Cn%JJ\Rq0onV%!["@'601MU1naD&S5Coa-nchKB&*W=jTV>.b)X"_BHdu1G%sbh$\U6B%^q2jOVeXGAO$_!,%R3:6SH$kIHFC^>n7k\%9_"JhiF`X^HVU(bYF`R,0md<R``PSFecM1pj^hm\p/IV&qZ?<D.#$T'Z;uNBDd=D,RhO!\:#\oEM]sRd$_a%r'[uu@!aKUdN2@PK%2#eR5=H73PR2EIeo`/ST9I%CM."]0SQrgFDR-;G@XjS,0>bkf4]E;mb@X]:1(ZWSr"]ao0JT0g&,*)-2i]H32IM]g=N!KL\i)=d4%+)sVT&4?U_(fP/L&""S+K>H_-qAtP_UV[QI%6=T##j4Ft8;:UpeQhO`(%6B0,ecZD.)me>c?Ls]e7Z&E]>JV4K`Q5?X7hS3.ZLLg%.Io+pTn_U-3$5s$Mr;WdFFmW9!+W[7K`Q;l_B-TCJ;'O4f-lCH@'g#t#\8^Mi-24:U\t\2_6"W(jL#QpQ>cnm_]=f(*AB$fO:%?n%0cnI4&Fr@C=?d8uUB=UB1`W[ap]:aa0k:bhIk`$s(hX;:54]a;n6s-o[&OsV"WAL2,d@sdN[%a>pp!1'8/"K%U?bH%RbA_bJG]c:%aXX^G@3HBP`\cAB.crd$%WUheaP=T$W6K>'69,kKd1^:1(rWX4(bPN<K4Bd[e8rUYJq(ijM,P<o8]788@R:8"nL8(A:hR:Y,jur>%#q?\q;J:c8.#IatN!60HOEVj!(l)&STgO_>OOt3seb>G5->r%r1^aB1ePa98@FJL`E86:HqnSYUGnq&8R#A)"RGl!)\!D\S$_5#A%QNYMX0Cm@6&`^`JN/8@%C^ac*-XMBnSnh#B6r71D#_$D\IaB+FA?Era(.6"B;lFtNnJXa=7K"ECO?J%bIs[2+XG.SRpRT5ndkfN#%XjI^e65uWe<_^8G=:Ht4TY,(L->8487T]b_8g=@()VRU`e^LZ/eQS;"M4(2D9Bm5p?Hd!8:hXJdoUTg#^k,bR\q7=.K5&Qj0JNge%O"6T=U%CW&$-eI1G#`5N3-&[E8_FEY$r#NFApEMfF\^X)Ah(0SPKIOP0-j9U]:N!4N0?qgRHF?4kJe)?H'lPr*Irl+Op!<ZV5`E8%_I1e"U<#WY&_987J0dMtL5TdO)F1Sr=9d,O+kSo;!l7<>L._W&(hjj(-]ZPJ4pu*'!Y7V6*6Kt>,$d4W/p<fp=YVL:"gT6d#*T].%_oj)c4fV7*`DdD%H;o<$Bt-@eEX]2nfa*%N;+WHTD#d8@2'K2H:h!p5Kdhp(ad&ndPbqL&HnP:5F.r#sR$0Oik"chM!<Xg<\A^fL%T--[t1r6<8`D22%L[+[IHEL)In4=mMl6%;_M*0k2,>EJP(_]V_EIp/LHK5<1>nE,^!F`lC,6JR!?d'!%-6WgJ?pPn>RRRMi#6jEi%B:KNM&82'bL4FTo!jNqS-<D@pKek%D]U120B_95P:c[o2d!/tb[<MBu;V(JMjk4._7=+#PP5,,GRt*35&[i9S,[aA5n^qCp[kj[W%/L4jHVlbYA/hAeHTKAlN;%STQ,!YW2jFZ[g*#>#CciWPt+Y^E+(T4eo4%KX)LV7>\8Yk":$N_UI4P-SC-QJ>)StlG+ogGRl&>k;D%E9MlN:154/4"Qr7EKDlj5U8E[1F;/k-!Ic4g2YgPK?9%-)pjmB,$5UoFL7c"L1Q&m#s@fH!.:<h540e+!Ek6A\Y:L3aemW`/4T#e%N.=&=pB7g1:WI<?NP'taNZ]P%T(!Sm9upgk,XCFEDIcY]X:7:-i'AsjE\cp27fum$3_:'[Q"<]6'Z45og@_.bi&W2bN%<3kB+#"c%?[\doab*.P$kba<`#*`Yi=^<i_$]b[oUn2I-+Km%4g[h0haSS"0VSj[k(6HjL`bW:_F(MZBXihpU&r87%,6rl5iZOULd9l*`\B;j%'d+kn&:#T7N"[X3>n36p^?8^CJc=^rAC/++LgoTdn7dsm`+:Jt1IklZqe?TB!k(X-c<_(F.,:oWMis6CHhMd&Sjija")2hd1er>t%8OP++Q^"emX9GW=1_B5D=:".lCU&Ld+8`cP(A8^@+s^KBa^NnGR",9^\J-t0U.lX00VQb=`!oE\=ebunb&bdh6J%"QR"G\l':M,I%OJ<?);ah?79]J)fV[`bjMTs:?]#S5qd=f68Mo:,HJ;qIs7hQ.r.I'J*@Fmfg)[O!8I,)C.Wi94LB$UrYKu)Ugi$9[96,Jof<EOjH%9iQiF;N6klL`AqJ&=CBna%u\hQA((j:=;BH".E&jM1]Z+M7?qZP@?JT#WYOV0u9)D#pV0?aPZ'QlnK*K@k9/H6sus]apJ]PED*H#%D(N-V-m1g/"0*YX`2'0ROJ@@%60-]uO`2;>P$m%^JZDh"LrGBe;n:]TPBL/\e.O+ji4rfE[$T6N<!0p.:6)mgEl$rGM7X[HE%Zuf%r#",L_(:RSEoZZ[&/C$g/ne/Pd#UjMF@HV(VuoaM!3iq"="m]A@,8bp9;AO1OMNYfL0\n!7FLZ*bK74*4h(\3TdLQeca+GpM"Je-%_oi\[.]K)SZ"kaV7*%bSLDTh,1NRe\=bNYMFC?Ohd`&64'gg!9P$X,M34US.pWpXF(mf9K%$c-5&7DD'>Pd1[//NM>Xl;*s@06>/%d&(4O1DuL(biNkB/n<8-E[foj7UN*J.!996,e9QjfJP]*!62IDi?F@LZ#=;\!'KBLh%bXbPpd9W:MM,u.f'QqO;l7IN&sIu^k("Q%TK*u6"V`'k9NZjbN_@2aF;H*&Q3U(kA!>'!r[qPqROf_C!\V6O(eh+e&rT:h>4=it81g$A`W]rt8hZSL$Q[W<:B!)pQln+5,k""C%1Z(&\r0gE1,cu'Z4^q/*H7>S:P\I<$6LNd-+@dg_ZSM0E7?L%!Z-ZHD-:48iT.*H-*N2X_7PmQ\I?bqr8D(Dp7S53E%`Z):.=$`]%>Ts$mZXs%T7)#[-,!o^+jK:=N/G,0R[V,XlN$<.<Kq+X,!SZO%@7p*;_O4t3q<0`GA3,[D'A@d\^mlP@9e*MDjjp"]h$N(r:h1Eb%[3MpVpZN2@Pq\/%Z#.=;i^*s^-Pf.dkfBfKdA(C5eMVD?Ha)&YGf40%JWC`lkS:WI&OCUlc/(/(IuF!A>ilqMTQ8."eJkLk6'n2(%KZ53X,Dc$q-d>@@:@cJe'1Ao)k"<ol.c"jp'8.]_Xs=gs^V/Gt$m:;kLdU:3B6[m=m-kk'\&12A4N<)BUlo"_`Jb1;KLRRDLsc.0%W'V,XA/=0Z*fqfDqujk)5cP%D2lR4=R"Pa9dZHa6G=(:NZ)2sA=5togiV=:,[0'6eTe)&D,?dE%4!W?$6N7Kt4TV!+!XXH$.J\S*%!`D[/d6g`3@,9#n%I3Nb<CR7pdRaGg(s)_212'p7<m+E24J4PCTEX:>T4n`1#\IEY$]:=7.7"eJD<*S+LhJ'sdS)!HH9qrF?*@*N%LVOX;`^(:fL6*JsTJ/k7!<S`%:.U&Y42a[Ngj]s!"5p[IOYE,cJfJ@6E1D_Bs.Q]B-rq,qO!I1u&)$?u##?+BcsN,Q%+>Wpih2QM%:iUdOl>psTC*7c`9HI4:$cULFQ/n)E;,6uEV/`2qNeb_4:?5FbpD77C3C2joNkm-L^f[oY,0a=",PMuuXqM`%)%d]`bF6HIk]G4F%o'f=-8>NT40L1.mjrIpF[e^.BL+dec=V;PiY+M^IJ2&p0-&>*u74KAuiGs2_)#:qN"ej*J,Mtbn)oTP!s3&:#s(*E'FV,35En^KR%EKjLa5u]3_#Yd?H4ASe9s3!a)s3&3bs3&4=L;`-9\rk2\hiEJiTsl]q?3Dgn,6H$(njd,2:1.gY@&lCrdppPj1r^MHr6>me%L*Z:%7:'MjjN:VDf&u&WKhWfrL)ae5&ah:[Ot:Q;]_\>D-B0;2Sm]_>PsELjj`+(4R'cn66DV;4A#LUa+[\lTGR1Oh1$q5B3*63a5m(AL%Qsk)GK*$qm8;p<4"F+a$:iYaqeHLL4p'c"C9E?`s'oa:iT(p&O7/FYL9_Mi<608,%Au53N)4:,I=dV0Ek-uoMKM!FAQEc%Ks,.X2%XlmY&ALp@EV2:"&Q\e95Q[rlN=+Vn$(RWl`/#lkn/TMMe3t2Q2RoF"2-BZDD\atu8@.N50Ttu@jf,.6oY@=\H$p"Z+W61i$(B?7'%%g'sq[ul3%U<oVHJN%>A@3O&(Amsm+9@T'WNYmXF42H6.<FQ%k%e.V<P/P8_YsW.jNgjF:K?i=U8dTU4,EhC&&@m>[@QXfN0ZSlm%V`,Jq&0@(T>*=-O$WnOE2?Sje<;qXa:H]p9+^%O3BaB-'?n9)H"D"G&Cbm%3XNp@2-pd>afd9FHLP9iOj2lg(ls/n%;1`3=E/,J=%-<2H]rK<=Ohr;0$W_W*9,\#L-XpWU5,BTf:q**FgfDr)K]jRmU^rN4t5djN4GZ[5O\-\r9:A_:N\;@4E&2I7j,Qj7f6%^/"Z6gne%C?AdB*EFr:,`#p:N>t"Qk$EXj,n1#M.hLHR!$8`+`*d9fN9(UTMl3821l]/pk;:;T5TZfuNiT$$SUYD`&N>d]9(HU5#Y&9C=+2MO%RQ5tR"pX[XM_AX,"Xt@i:@.@VX6%NV@Z'7kT7@m.>i].m?-.XST.[4IRH&kOl-g]h7BoX(dma:UBOHX@._&D%0X;lb1T$#fiYd(k%6U5V9ecj'h7tUFlLepbJW=/@W>DQ7X$)V<M;BJLWk&;8Z\P!ns0oEe4"<-3dlSZO]=*jtYkfEH!Ru.B`B<35;"i@ra/6FJG&ukr,%]j.n>!"IAlXtPlLKI2rt"G'jA7b!;Q0sP0gJLq1(\:AE/ELOm@naN3*Ma4I*T\U/gM4I+obu=KooTil!"rPj1X/-@Y$Z/)RZ)KjH%b>ZM*p&l#I66u?iL;WJ-N-Grt'r4mrKTX$"p/.au5e/?lJ=7Q$L*4Xf&[6%AF9!YXcH$q];B6;AWKA1rJ3Gah`BFqKC^25Y_ZCJp%\%+M(=C'k'-5?r^bKSqnh(to5?r"KXP7"[DBML`Z^ui,(#@ME`3&VL?L1DO?Ig.6eJ0D[*&Wq'F+Ye^cLh6u&bp%8/?pUJ"Ln-PB%g'@[O:e$0965/S:n>$.^=)gK2FCb_r3S9VL@kc9O0%Zg"&/"B/OOXaoUg.V)9i5`f6\\(e&`e!KC<-CJ8YJO_*>faZW'qgV]X8"h%?i$:;J78\D0TZ<s)@6J3-f54r"052n\q,Hd?*(IYcjG_q2lK\C@EJ;o"9GUtp.q,O69)l'GBKR10Ur+N*)e.1Ma?Z+R)?2p)[Q.$%_@q17UnVOhfISJ;XuO=>_Puk-'G\\k0*bA.h8FsVodBkhbX%U8#-sd46a%IZ5&;TJgNM@>)_K*t4/'Vj_luDoU2b*S-S4iMNnhGa%%n'k[(9o2+KC'YKiPO\%&M+=MYl#1MO.FoSM8NMZOY'lRM)I>MhiS!2l\*6^H"uR$l)ZD10jq/')kdp?/5'Jpi!Xr%d9dd2L36oK%,^;`s1aY]48)M"L67C.6*+rNp?K@STl81lS(d*%beB#gYL!qqVV$eaf=I><U;U:=c]06WT%"+NoNb"2<e8dGkkEUl1Ws_(Z_Z-\!%'kP^IU-0l#eVUNm(gViIL2k8(B6Y[JNXsL"#s:3]-q%A.$0hZ(;()JYK7F1`'iaH"<bqV-OW1#37u#`N@3A4*$:X/3?p>[k-h`OV%-in6q64N.P1_Hl'<MVg0b$l*6,DjpOf:!$#`Z<+N?g'$$^8\jqL=oNn\@5.7;d,,*<#CB/L,fNZ5V.>C$%!F+`Bl47q4nSO<KX>J%^;QiBYM5E`1=:3k)*MlYC(W8beYM.1OqWM04A-7B#*c<"+<@%ab`Is]O%D[&%jn#OU5=a&S/=2>m'\3&Rcc<Dj;E+2Ne_e%("`[>%3@-CJ7$*Z^T*)rAJ;llJ.PA^<a+6hDaOB1F,Wqr_h#tR_*0I[;;$k8_q%8256@tR[Z7Lrn$#DmE3mqpa";ZUb;3>Uk`*ct?b!erW%12cUrfYK7?Bm0`jJ$T]JYB1gp@[t>:";-`QC>hR4$_i+X&T%agLF*bg#;!)Oi^OIm(NEoO)o/#sT]0s#TSemdLEkf0<?I7-#pCF=%_W4\eCk+Jf^=&B.$-/IlajXr/UP9G86B(+rb.o:SlR%@!TWjrbF=q.;(dA\-nWRfdR$\8;G]KC4q9h'WC%I@i"HGUlKWPp,j5Y-U%,7di^it5BI_Y"RuHo\!bR0"#3T^R8rr25ASJB<V7l=L%3ZG?=X(J"<.i!Fn@#tP)g5T%T#Qo/=1O&Zk=4hDol+]BaWr%ItBEUubg%,_@+lR%;04.a8qg23EUu/4^?M%Q>0;D]5F-8O'uhdM$&9dag8T%`Mk$!eI0^:dBgC;1\oJm6s=*aCu^k[87("&:il\_N6^4@d2g;%D@bA[URg`u#^dCtIUnP7dKo4P/VJt>\HHC*L(q$mQh3b&>,:.t`$k]W2H&sEne^LU;i3%BO@6qD*"FPB*2eUT5e5uDT:"]>]r';W%*$[p,TLNFIE6%^tOt[9^Z)bdLMSQ*?rC(7_@j'3%T[,a":20<TL_mZYj:V9K80"WC%`oC:JHaJr#Vh2J&J<F10P&&.!1G.l.fk>J%'!lI@O[p!S!9k5o^;_]r/2tskcgqPR&^#.F(8$:O]?nF9%OI]#I<=_1hL[Aem+u:6&un2&5,4o=o[C$kEF(VR(n">8-AIoliRZ+l%mHW3,0W?lqSZraj4Y\XXO!+sEXOK3Nd<bq'_Da(Z0uIE))OOKd&1i/)@F.F%5[Ad#W7+[*=95s/C%hY6SH)8Oe;,P:1m%f,bV]Cb%5;kaS41>@@$D@^o`Br%pC5-UL0*6mJ\W5YG^D$/>c%fgH@Q_A^bYaFhYS58YO%!*/6%iI]R%"7VHF#d"JGGEZBMo#:4?98**?q1m%Ga%YRPY/)tO&9dtSM5?A%eZK/6:_[.VT;.K&>]L[>0nEg;(4o"U_0WQqG*WGe4iWC+Tr2$2[A2-e/C2!rETso(1T&j-B;p972WpN%N>>2jIAADdMN&_]2-Qr)b]W5Ze59bI(',&$TtM8^Y`R6'CoYQr,.f+[OEE4je!O5o0nuLDSiP"5OkpMo:4Xj"=gp,KkS>A,'dD@d%7E"Q!8`b#*\>5>aTelk##I;bO6rlKWZVVGT$bQU0`8b*Y'<lC8+Ymq=,,-WDZH5ciOn&hbMh+;$&l?fcr(K@RM:W21X1Hpu[nn?)%Ko*maUkK,/Ca,#OY"5WOF`$IjEO:m$0d163VK#)\;XH1B4o6Q@DQ%t^D/0_nf#NGXAl381[bO-4E]5`$P$5dL"_jZ?8-+^dLgp-b%h7t]I#pXdn@Kt788Bqh]d/#YOV#$"/p^O4TCq5Jt^V_a&7%V>[cgM>t4C+5a@)<=?W['tP&NZA*@0,E21Fpai9dF[EYtel=Sj_X#%%HT.l<-%(m2/+45[eNU1rfK+>;]ENn0[C)#.OdM7P_Oll9?&rY!pQ(O0&HD5Sqgbd<>=0d2MTL+POT-@'E<_6M)1Q'A^gsPa"0G-%,$o*^pCNI]=8C)p"=3[MpLW1#?tI8V"-M/k;4U+Zku`#bfMk-foB52Ma!r2pE="E9H)\#/@87ARo1M2EP7A4[JZT,Ca,jPl,r'\Z%<&ZLZg;ksaP&nM[B-PK*ARRaZ#sT46j`NA6IgcEJ4R5ZR=qIpZO>2Q18te/uEQgfEKR'*+n.aXJX'rYI`9cM0L7;60FHb[C(P,SL%Ja!(NR./.)U`YdA$]iT"2.H@@&kk>alS^)[hMB,4W++Lk?WpNaXCd7r2!J\fBkNeq(u^k'`_<4'Yu8:r^E%:rK=RQR$^I>i;IP<:%\QU#2eV`_d$WuaOa/2H?<K]h9s4YD)O^SWlL`)MAJL"(p#prFjl8HZO1*ITf>-L%W.;_XQ$]eiNZ$'i&g]k++p^3'e`()Fr(+au0%FA\!IA/jh=UlI"9]T4F[Pa[D?M1J7<iN]J"MGUsm_bH*j3_!BG!#tCF@GDcP)"34eXV"'!WX=HHE@3GaH#/cL8ALX)KfZ(\K0N`Q%9-Gqmbs\N)oLXXkraY%bBM]S&&L*sS6qV/eD;MO>*T/6pVhq?PCgeTc&FiGH&.t%OCe,"`VcZ:)0^%1Mi^WWrOV_2!8kjnj-k]Uu%,R*-i/WjUgdJ-2^aT`l]kCe[8CE]^%-73tFe1ZiporLh4P_S6jD;Bg-^t;a'ShSo^Kd-W'R[H,IPF/a-onN`<*^pH6EC^DUe.#:^%k,Ih[N&HZ,]V=bsJWR^(AXSo&"\^[o/I"T*^!O*@!Di%+RA%T0;@l<SUkTkdMJK1EXk8hh(gWqL<@5s"P=AY"AiUc,5s?Vb#+(ME%H@fqK0;FO[.LBWVX$f+,W"i&d*JLAt1(Z%>$nT;X;M_HIaRjU/'uZG?b2Ck/cGV+S/tc$$EIUH0pu:!99)OX%.I+^YOM_Ti"<C!'%#Y3[YJsb`r\70G&-:9WRc8J'MNsnEI#a(.JM=Bp_<u)j_a@7T/6[U48klX]gdJu,BNs#Nr"VJ0)bKs837%mm-@M*g<1IhS["Z;mi%gXG$i"Z0mEQEVe]dG,K"HTh;(;2BY2lbg:X\iRif_86VW1PmeR-l.oi(,3=^BZ+a.&qNNjBZ[fi8VKb7;?<!/C*B6f@elS7S-[V#%Pp?k24:upR+dAiKlO.97?:9Z2.EN<nc9`pCa/[Gtf@Uola-[%fm%+20LaueB;^a!/aC8/`%*VcYIcR57Qp>eG`(@T?cBY[@cQW3#%+?c%q`^HUfh8U:<h1^[!7=l!PS_+T76#&g[5Or>%Xe\:[`9$+u;[X22\ZQPB/s8da-C%%[6Tnj%/.a<]_3d3d8&UPSRrRYKJVuZ?%fdYBC1fIpiUI=`:cPT>u6qDsi"kL41Ne8#0Qo1W/7+.;^7s&3#m`)4P@W%h_fF`2G"mK3ua^//YiVkaDC;^!,j(:je,#;e746B/=%'8o4-SN'*e*DaNlnjVaJ[R_qbNd_,9l(H5#*0F>L*(:@$he@`jMu6=X\D<rd8-6oL2@su7UM@e$/'eE:@7=&;Q+IURogG-TJ0fd`%AQjmP-FGNgHmcpImGU+#kt,cn3$uW'PF#lr.OgaDP'h8#W(+]nLqMB?0/RR3&LE"I`$2fS[6.,,j`mGNI1u)fdpL4-8NJe!+Rl12%75,M[WdRA>iZj4_'_77b0]lXA39"`u%&FAa%CL,7O0>).YrLW,h?;!o98JfRJ_Xj/.P3_kiArY(4RA.[=(=E8<i)UPedf95!suqd%O@3,*1_&hXA%Hj+?oI;B=D!=7!tZj=?ZIFR7'jm;%Za&D"P(sU4D&@5.QgN3G;'HtADF'Q!d1U\hBdo4+3<I_3TMe#Oh<0h#<6#Y%KMWWpn`QW&)NgC\4XDokM*jY_@Sr9!p/Y+S2p!U!!N7pP<?UEDH0FPuUuGV*SJ-%7cgKPDMGl5a&]"GQjj>#@$"U>sah#:WmKk@b%nYk2!6jkhIOuOG9]2a.M.&lE>'\=lB]df.M*M*I\SkZ!k9kD3O7!HtmB\d%u^rfYK_O/96+;gOiY!LI&dZekn,@PI5PTG^<3rbMT%d8H#-V9K^:L^DT407%5TncE4sN[pkZTIj;P5iQNC!?pA\nq;QF,",rEJ4)dsdLU(ha_M!SrF6t$L]`n!3U.^geT]ib<+laDp$!EM%LC#qK+M*_$S1YL2!6G47?&hYXMD[h_CITI%H/GONYIHQE^u;.SVhOQEf[RbnKZDHh9!"EV*'J*6TL)Oj7$nJh5QO?RcX8?Ee0m"!%>e?C*0c.RDn5.47M7FPB@#[\o@rA4t,a&A$7cYi(0Id".iM?]l>24u@4"`/ho;1N]",nQ#VMV>g&924d6Q"6<Mg[VOaES@+/W/$Y%HUngf5Y1hs&u]%k?Q=5,$e1j?.2>c27iM^s<LpcF5`TC2`lL3G&1ocX<G$u%6'#_j;,KN\Ds.k$A%&7I+SZs`AS-W1U+=N59msn?%9j2.O3%I>9,`7S.Lg7ULK#c!C8E5U^TlhQl`.PX;@a$W<e>+O'e0YbY#rhnTQ=N]9@d0%1a5\4T0WBs>\W9h9)H:jrR(Ak]IYjD(%pbI",rU^kWf"WV*6A]C'R$Ooq:H,(N/&[pi/OZa,)q3]`^9P<_iD+1s(oT(r]YL?6CH<tG`%PR"L#ZA-"o[GXGer&GF68kO3&4Ij%XA*!dA5_Y;@U5-dPjC4]H4.Qc$utMcU-jJ75sHgi<APqUV`m;d(DEQs!CES:,tAJAhcPs_Wu4fei^lJ`pW?K-LI69=l.bXI:PB&j%[l@5_-O0cQ[4'Tu+r;!46?-1I:anh*-S,P%+OO"jlGi?h.`\s"rBa1b!%K0%n00PN0LL(Y6q/V0QoN.j`:lt2(F%SW<&#76h2>a^%9dQpi-"/?8Cn.WcGNbs/ibUs:lrXG5qn0&r0T=bmM0pABb0c#+V)C%?4%>RMbH-FT,%J>U.lBds!?s;f5fRY;]3T]iT$/"DnRU(7%7Q\UNbmd/:3pXj+S/X4p*o2,:[hEi]pP"uEnkr%J+m'cU*Uq>s7/Y-rX#bP3cf@rU"nKkU%p8.NM;;_gmW_#_qE[PH*ip?R4'(e`%9[>"iENqNh&jXd="Hik=Sdd3W%W<D1S5]J0PBS6b.]f50_)@*7-)gl,]MDUo-)f1aCW60Z``Hp37ZP,I4/%7om+^&.M!COfaac?'%mnm-W%1stP7ldq/=#6WUacIX2Gt?*P%5J'ioSsmnj*2Y/=2&hb"i9pM4?L`J#BXstET2QUO3@]5:)Do2lPLNpchC@;Y&F1,/OY;a%cmo]Z)-;^aM"n:;,-Eb!(J/m5XqW!ukHbe3KS4n93u3CD-DD\W'.aGA9e\Ga'1<9?G1i(r7g55g6e,0b,.KK!jGaLM*12Np,:4b7%#ei;1E-#o,IBe2kS.&dl(!0\YPEPE[bI<19TW[iWee1oj7i=YHiGM7[EdTjbZ`,c*-E2j#kgBT4dA;)aG[L`Bin`Z>Y:Ku4`MX9c%1GtVYa\3p">aj"b_5/;R\T<)$cq9W,,N8su.1IVb>ZGmF\E]EM<.MpBaGD^7,eu7QOpKM>;\>itko'liD6sY\TN)naZ12+jqEp>"%,[UTs1C-uq!n,HHccBJ/q_TPcgJg5k9OoiELe;)00p0A8PbaHZ9LNGH,a_2684ld*$mm/c!u"49112irp-4h;OE<+sAC)OGU/Ge?%q$;4j[DRq3"Yj+7Gr<]S0S`,HWJ=9H173U7AOs$NRDHfiRt4lH$&me8*-SPqm;rQG68V]@0:C:(h%:I[RfR_H-:NJ[U]?P%?iVsM%5pIkG!UigDAUorbA^FI^,%#?S3BU'^bEHp="FOD?d"rTGOm0s>7G;V6!J^>QKgt>B+sL$Uno5\$"<r+W+rBmB)c3(0'oupj-!BVk%Ll;"lk5`9WU)Hq#\:^seVCjW%*\0XgP,H/9Ca,+ZFA]:si>+\r8?$@_(-o2s?Q16Gi-<!j=-eZ8,),HR-1N86<-_p"1f.B]8`e%S%PGBHOM-j-1\ao]dKEsAO"32t65a9k&Ys8Y8EV+d,'X!Ap9I#p'.5HcT%)tIRW^--Fr-nj&>ZcokGEO1#mYQ#'Po+Y\j<@Lb@[$m=%Y6:Ru*h#Ce!0TZ$BVr&%=]B/(iHi<:GnCW)ge`a5i"W%Wqo2sV:0?jSk9\%#OI\p%X-0e0b_HHkd:'W""cLfrSl:d.I`Nt'!.%*\%&@l$XTM),?Z&=eBU\+o1>kV&`E>Y,(M`F@Hb,N]TLCC@%'/:qj<su\H.V_\Kih3/[YtYsfl3]XRP"&F69M?M4TRKp=lZE&WZ+Ncu%LM1t9Ar$o%D!Ck$%P\X=(;@@B(M6K/pI$.Bj$:NmcohsFOh:\r&PB.VaG!d.6)>0!&o?BW\tZhQr!onYPkS8+jWb`e%!8>HKW\53%k\BbOID1B-#2r-#WM%*uYMrApehD0]!+=1Z^A(B3JQQ[:9NSn-M6R<jP1Y1$UR-(!60$dop`^kFYX3@.fM'>0%7E%:r+?<N((ehk%=O7a0L^4TL!=BG+'UNm.<)FWnOsmAa#;V6',P[g6F$/U;<%`%7OW<8t0b?i[5V9\XS1%/#Ni<C[?2GX`ii&UBASMAmifY"0LpCEH%in7;T_lX]fIn*Ok)M`j"Q\e,&j`=plI*OBQnmW.]!:t&@.PTBl6uZu3_(!K98`e.-IdlkB0An1?e>G#<8oj*8H9Wc2K%gaQ(!jXN%4bpu:Pq0siH'&Z?S.7.l00ug+9MY43.X]hs2XHj'77rn54]Xhhe08dTrU'pu\`k&Tkd`q0Ld5qCb'Eju_]`5_^Geba9Y;X=P_?5l%3'*^/*"\lnD&jfCii:X!$Ao,MCNUQ3cU.0uT1.kQlEI5m;5Y6X7`j.^STr?`QTXE>,mX_;0tJge_C35=&b5Rl0AI+@FR4<?0[MCD%U,keL>XPr!SIcRZ0LL_%ER4[qALJanCEk#Us&KDkKOK+F!n@Si[uDaWijC*'<a(>6EJ:O)(/`$GOS<$AQRMO5:08&qVM6IP)&j_7%(.)Vc.*G[8*TY=:C;fTNN!$I!dXKghNKK)4<2%L[iPQmT'q?\-*G#H8jrgE3F7mcn3.L/]7U<_WB,N<Ab!f%'6CA(EP_<AS^oktA%g_W@4=@p6@nY^J=)i+b^68&OA&WPFgCl@JE_*Z3Q<sa/bR?cVmFjTSD^)rT@GXWl%5,Se#d!6W>6nE/.?s14Vkp2t>CMi8a=k&jI%bp"@;CJ`#=Ef/m7W1MYkH*Om(#+t`(#od.+Bn9Iqa,I[IFmb,$Fr?hqUk*L_l",VK"F5MhiD5aN;#sP(naS1T7pN,_4!BKVdKiT7%<s4L.=<qcIY+(faKs4:6[$jEKLl!NqgVed4LG,\sb$e"f(2gg[coP[4me@8NWOR0n/noiG]Vcs5^X0sH;pV91jO$:lOImd:X4j?W%g=j-ZMjm^k:4d`U<ceG=$SJ,h]LGu[k<_l4AO_\/gqDdY6W2lsUk-(Ld^hhRh2!_/E4O*[nbqB-'>meKLut._OY7^e*_&mKLl#DB%9Jmju8V4*lVR.?q3G>P/r^Q6>'aGJ(TAd>Q]$ssriAn(,-8Wh14E6DuI]'H4')/XRQ-h'J`BmAWhPta3U63l&XEJDODcOSN&"dOA%NikoJ%gkqNE(>LEEWUO2"hnLtPX1rDR=%]PZ`&7F=bAq8,=`&lX$0&e7L6%.k'Q67n@,o!bniQE6UU\/iTU_K?HJMi''<)B=s1^3%&90hD!8Tp,*aU*nU:D>/pE0;'JG>//d#lLW*>"\WSrD[d,-=rfrH_.ObN+0j05QR.!PbLp9N)1M/kQM:V'HS-h,(b`DB9AL]oSlZ%fZGj)U(2uR6llme:i\h&0n%F7L@XbCI6_Tml@@O(oQRHapP]Slh,$3\A00D*k-32X$H,*Bab_V+@-Ms&l/oSPYQ_M7nG'dVj'>o;%;oX[]l9(KGD,Q4KP0B(GU/$M=9Ul[[Qd,10YssZciWMnLLeUR5&EA-#l5`)LIXY!s4fel0A)QGTP9+sdI`',,,'r9c+nY>o-q7ZR%*T/4uLi@Y'iNa:$VX@HI#_'e3Oci-J:qWqa@keRXQbXk4,VBbe5ADMLZagQO*?g'Q>e33LPkPnA"E+hYOt[D<jf;)mSfS(_+N,FP%V'/XIqh:S^l,3ofi?$!--&B(E9^kG:16rcH/YC=FKOYQ4$)01G&5c^YnsqV&-W:2qN*rnYeAakiLPqP0lsH/=Fh1+9aogo*18s]T%SJ0r.!uV^_--=b5',h>,K6N.H,/R$.>`6q(`0U60]:s2@U#7osYBYc@9>]e\=?S".W*K:A)O'VE-3tD:\7-(A9P,8P"/NcrM@5.I%7)kpYAkG`$JDmjH%j%K'NXoYu4!XFXCZ%XeSUh-t'N?\G!G&urLg+nfFNQ#MC8X?D-b0R0_M<?')>8dA3U-l>;di"P)'+\eRU0ql%/25\Po6lf.mp-4ClL5]fI2ji>9@SeaV;>/__+d)(95_@IS/1DOB4'`<];WkX'6EDd++!gPA$-e*&Dn4r8:6-L'8E3,o#RIJKoZ-B%>(.l1BGi<g]R2-!T1c+>64^PYKK/U30"uPq;[*Y=.TXGSUXH!&5N+&ef;,Ag/u,'`E>%B]3MU@&Ko%b47:.]j`90V3pfS^]2+-[6%%tn1pfllTEnHj2G@';n9E7>Xr;gE')pqd\5pRZ(!h)+3'0d-:J1R@(%P7)[t)/Jin*WP[bAK3a<V8u6.:usfZI!!K2-4I\6Z^ak_%7,Hth#WE35:'QV:1:@a>l2,@Ma<C'OfVXhD!M^pF/&qF5?!jCZ>[?lC+[W!.;-W&U&oh0H.Of((n*gIR-$/TcASQgo_Ae0ieQtSP%BYZ"1"b%^/oECs>Kh@1bCW`Ok`^Tao]gm(+3W:,(rnk_uAk0$CL-EGd_e`pfPlI4(5njW>Up=CU*?)>\JtO]a<hR/iT?fOC:%!m-%.t)&N'?<k<`,Y-.Dj<f26oX^?_Vl\C1hnga:<\e04k%UdA!qTRL=_Afel$$"15$C&4?1B1S%+3[Y0dH'iY>!/l75/_^<1(Gk/VAf%5\#pt'K3[LG9f`bIToT=2<LOU2I"t_^'T(?r\FK9=j"WX@/FcN^K_A=22DHAK,C`:BH#Ap1'#rG^=63Em+ML](6rI1a/m3.X"g%Y%MH4bmkR\gJ8cr$;WQ-HMX5*W_\GX=9plJX`=ItUN-Y*5;.[u9igJ6,hm8YJCUiMfZ7fF=YW!>s14@qkpC>Y07?O9R2X/2E/QOul+%AoJ\\OqCE>TiMr7".,QQU-L[L1.$YdV32IVT/G<Pi=YhX?uI,;<EWJ_:<Fq>Hab+1WR]I/k;I5Z[aq3u#mW?9e0i;k4mC7]9K'GL%5^A#UMU;JLjqOpTE3Xtdb9O9c0oGH.`/^Y8<P%:Z`4QCe"_&2`1-")7_l/dSEG,jCNX/;A(7]r+-$Gj6aX0A'OX?lCm/iSV(Tsi9%4'mpaJo$]AB@f/q;`GQ=,eB<$UDp94TO,bp6C81.n/4Dni1u8;n(>_9`:Y\4OW7"cj[S<UlQbnr,6^h(AiLF=g:>?5@R[l(0rVO;%-#FM0jp=2UkZ@Hs<bpk0D_N8!@[cRVi[JHa(&5rQ1S\_T)"uZaYsp?Ii0C[:=k&2tYA29]'ro<O="KDU48cFZW\=Fp]@&!oT%2P7%!rS!9'3cXDltF[7AFM$kV/nLf,%]V6F>agT56QSF7iL5bmVRt=Z'HFZb@cc;J]>&^gq)-kA7mL#;h=4"+qq9PY5R8\\%T8UL2n`.%`9k[TM<#rT[:2"V.OI^'XKm$a`?--dDU'P_;hVed2pUP&&iQ;3^_C;";>`46=D15G`Bhh`O,ZbY&@<UPF8!Nb+([NdD=_8,`)c_p%AS,^0o!S^@%!Di+OarBGR>4U6B#bGO@59AB/X9"jCC&da)j2khlP.6nnJfKq0jSVn@9]k*L^UDa9<"UhA#>k'a-/!ENR8"5XGNEZ%W@HuU"`a+(S3P>'93(rG8,,OuZHMf"K+n/J3`Q0JP+tC),LiGME1EaUlp5:Mi;/%-OD!_3?*UF.'g49k+j@.`F_TZ`0RK#>WnXcR%-uGVeQ%C!LL6PI>`)_=gHJErkC!?P^dS;Xh$CJ^bE-XH^UPi6GA@T*Dk>7uAMh^MjYqd18Pu&7=\&>sZM]-$nkhhK44e7I9CZK&(%Yd\]j.$((e'=j&LhHUU!"`[aWk?'-=WWc`TlH78M%-CFF[eKgiee/JoDnk6fnFlfdgJ8)>hYt2k:($^pr$3'$B._;U[[Ys2^m)]6%=L@kj6)"8EWlfk9LXXCdo'XdW3P8t$l85:]&2.9<D^&?rHS^5k[MstU3Rs@),VoC5Un&C7W?(WM!)[j)Z7?NMSTq<LmHij2dQ&KE%<T/qk;Q@7-R45.JFD']:Xbt,2hdtXF^li5?%R]g7H*kM$gP3r/:!Ba[D_,BmNDWEC4kQ@];i`CXA+#+)>\^u#h9'4XTj1%LdrtU]%[*eLX27BY1(;L@#G]&@s&E]BjM/AW7cn]tbn+UZtY(5F!;CS2hc[&P[?4jl(&\f;Q*nmG;mN.\V/GK7kjpP%K).OK",9siQh%T@>%A!T+[Q;SrP[P?@_\0c([2'nQU6o>LG3pBt4ft3)8WM6+15#o!k(!\/C>X4_ldQGIf+^.Ok`,ZTaT-*DQHG#i:Oc+9\)3C!1g&-^9%C'oH94!GtZHI`bk=)XlCQ(eYubpQ85Hf$QJ4gA[`iKWt*bi=01lj0C;TCH>kGXRd`\/fZ6#8S_;"J5f0j@O11%n&,`*W`S5kTt(W%>#NjW4?50mN5Qno,k84.3\<Xo+abN=0SBmgBJE0]-S1dL(rO:bL/='&,=j3!EN58G_B+7K6e3Un7U_m')L3ec(_1!oAuf(qAF)T&%mh$5I..K64967h_7L@9Yn;F-0OVb"XMC0j9FNi%\d$lhrqll"LiYc1kdgYACYr/OA$piB"r&^qZ8<NTKU@o.NFt4;ZA021:go/J[%iS#2G?e?F-6"dJdm;g%R6WsVKP^N-iPF>-73II,G@:(<I$;-V9BX(9c1aZ4jV.cbdqbh8#mX("Qq5TCe'_[h#moH5UOfb!F.b7R(%<\Y2cEp>d(n1GNgUWAMs"@msslNHm!.#`jtJ&%B6Qu+Lt-salP[f3]H>/R<RAm<SY-A/;dYcloWP+C\Cp79kf\TtEVRZ>M%TVQ7d%EDOCeccoQb-(T!="CbG24#3ZQ-3ik^RQB&-7)]st:VbSURP':tn5@mc'T\cUq+Ot$?n1]j2[Es*&nKc3QPdphBgTa7DI/W,XW:_p%l9<Y:Q-SeK`iENA)*Ct)68HT$roS#b^?r6tok`HPf>egCF7r0VbT=2`C$>!*P%Y:Kq\jTp8d\p-i@fWSl4n>#:5g)Oos'_`\P_n,%@]9`CgN6e)*T@")1AMLeA"d(%$uKl$ZJet@qMqsc/h[ds"3@JX2p7&6k;cj@+^uJf(QKN()qM"K1K/I(ecMeT/!dSAiZ3X(.^_*$%rO.&l&JapM6AUfK[.<`:JcC([Gl6OgiVT85Dm)C=Ish+dr:9.'h8@,`:EQ0XI<k\LYNM7a%ptq-H+ne)o]bu!Vm"Erhu7ZriT9mY%f?Z+rpKrCLr3%9Q:V?J?_s96Gh>IT=BEdr~>%AI9_PrivateDataEnd