%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: 4C_2.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/19/07%%BoundingBox: 0 0 224 133%%HiResBoundingBox: 0 0 223.4317 132.2334%%CropBox: 0 0 223.4317 132.2334%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: (PANTONE 402 CV)%%CMYKCustomColor: 0 0.0600 0.1500 0.3400 (PANTONE 402 CV)%%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-10T13:50:29-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-19T11:19:18-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-19T11:19:18-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FWNfmB5it9H8v3Clgbu9R4LWPuSwoz/JAa/OmantjWxw4SP4pih+k/Bz&#xA;NDgOTIO4bslzbOG7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FUr8yeY7DQNNe9uzU/ZggBAaR+yr/E9sw9brYaeHFL4Dvb9PglllQeOrdaj5j1K88x&#xA;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&#xA;/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:72069B21E8FC11DBB9739E7606BFB90D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:3A3EA06AEFF011DBAC05C6DFC5F72130</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -132.233 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 132.233 li223.432 132.233 li223.432 0 licpclp[1 0 0 1 0 0 ] concat105.154 69.4302 mo105.154 65.9473 li110.098 65.9473 li110.098 65.6196 li110.098 62.1323 108.49 59.5781 97.4111 61.4966 cv79.1924 64.7417 li68.71 79.2822 li93.8657 74.8208 li101.403 73.5273 108.02 73.2573 110.098 79.25 cv110.098 69.4302 li105.154 69.4302 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0.6 0 0.3 0.72 cmykf113.535 79.2495 mo113.535 74.5063 116.337 71.248 122.057 65.5278 cv126.088 61.4966 li144.511 64.7417 li155.012 79.2671 li130.855 75.0991 li122.664 73.5273 115.721 72.9766 113.535 79.2495 cvcpf114.555 65.9395 mo116.381 62.0244 120.267 58.4834 122.502 56.249 cv124.091 54.6333 li130.856 47.8682 132.157 45.0698 132.567 40.4106 cv132.586 40.1675 132.935 41.3232 133.039 42.1416 cv133.389 44.8872 133.186 46.8799 132.253 49.6289 cv130.857 53.7373 127.554 57.0107 123.268 61.2974 cv118.605 65.9395 li114.555 65.9395 licp0 0.27 1 0.18 cmykf118.484 9.20947 mo118.484 9.17334 118.597 9.15283 118.597 9.20947 cv118.597 14.6055 li118.597 19.4849 112.326 25.1147 109.828 27.5967 cv100.64 36.8091 li97.4634 39.9854 91.1045 46.2578 93.7744 52.3101 cv93.8628 52.5112 93.9443 52.6846 93.605 52.4434 cv92.9253 51.9614 91.8955 50.2671 91.6211 47.1719 cv91.1318 41.6553 94.8931 36.7158 99.5327 32.0762 cv108.296 23.3013 li117.185 14.4131 118.051 12.8467 118.484 9.20947 cvcpf109.828 36.8306 mo112.326 34.3491 118.597 28.7192 118.597 23.8398 cv118.597 18.4438 li118.597 18.3872 118.484 18.4072 118.484 18.4438 cv118.051 22.0811 117.185 23.647 108.296 32.5356 cv100.155 40.6899 li97.1978 43.6475 94.4854 46.748 94.6104 51.7544 cv94.687 54.8223 96.2295 57.3647 98.5508 57.9639 cv99.5049 58.1699 99.4473 58.0454 99.2197 57.9487 cv95.9419 56.4014 96.1772 50.4819 101.477 45.1831 cv109.828 36.8306 licpf99.6074 28.6694 mo92.8423 35.4346 91.5415 38.2329 91.1313 42.8921 cv91.1128 43.1357 90.7642 41.9795 90.6602 41.1611 cv90.3105 38.4155 90.5127 36.4229 91.4463 33.6738 cv92.8408 29.5654 96.1445 26.292 100.431 22.0059 cv108.296 14.1274 li117.185 5.23877 118.051 3.67285 118.484 0.0356445 cv118.484 -0.000976563 118.597 -0.0214844 118.597 0.0356445 cv118.597 5.43164 li118.597 10.311 112.326 15.9409 109.828 18.4224 cv99.6074 28.6694 licpf113.65 74.793 mo113.645 74.8345 113.535 74.8345 113.535 74.793 cv113.535 69.4302 li115.78 69.4302 li114.511 71.2485 113.862 73.0083 113.65 74.793 cvcpf113.667 65.9473 mo113.663 65.9888 113.552 65.9888 113.552 65.9473 cv113.552 60.4883 li113.552 56.3877 117.571 51.9536 121.555 47.9961 cv124.14 45.4131 li126.225 43.3276 132.595 37.0449 129.925 30.9927 cv129.836 30.7915 129.754 30.6182 130.094 30.8594 cv130.773 31.3418 131.803 33.0356 132.077 36.1313 cv132.566 41.6475 128.806 46.5874 124.166 51.2266 cv121.777 53.6274 li116.016 59.3882 114.1 61.9702 113.667 65.9473 cvcpf113.66 56.4795 mo113.655 56.521 113.545 56.5215 113.545 56.4795 cv113.545 50.9385 li113.545 47.0283 117.423 42.8086 119.305 40.9268 cv122.223 38.0151 li127.521 32.7163 127.757 26.7969 124.479 25.2495 cv124.252 25.1528 124.194 25.0283 125.148 25.2344 cv127.47 25.8335 129.012 28.376 129.089 31.4434 cv129.214 36.4497 126.547 39.5303 123.589 42.4878 cv121.224 44.853 li116.276 49.8003 114.111 52.6919 113.66 56.4795 cvcpf146.29 118.382 mo146.268 116.805 144.41 117.237 144.41 116.762 cv144.41 116.567 144.583 116.524 144.756 116.524 cv145.555 116.524 146.333 116.61 147.132 116.61 cv147.802 116.61 148.472 116.524 149.142 116.524 cv149.509 116.524 149.552 116.654 149.552 116.74 cv149.552 117.172 147.996 116.762 147.996 118.382 cv147.996 123.049 li147.996 123.351 147.996 123.438 148.32 123.438 cv156.228 123.438 li156.444 123.438 156.4 122.897 156.4 122.811 cv156.4 118.382 li156.4 116.892 154.78 117.259 154.78 116.762 cv154.78 116.632 154.823 116.524 155.147 116.524 cv155.86 116.524 156.984 116.61 157.395 116.61 cv158.193 116.61 158.518 116.524 158.95 116.524 cv159.512 116.524 159.555 116.74 159.555 116.87 cv159.555 117.259 158.107 116.892 158.107 118.382 cv158.107 129.832 li158.107 131.41 160.073 131.021 160.073 131.561 cv160.073 131.626 159.986 131.82 159.836 131.82 cv159.253 131.82 158.582 131.734 157.805 131.734 cv156.423 131.734 155.817 131.82 155.407 131.82 cv155.212 131.82 154.889 131.885 154.889 131.539 cv154.889 131.021 156.4 131.323 156.4 129.963 cv156.4 124.777 li156.4 124.432 156.486 124.237 156.228 124.237 cv148.256 124.237 li147.996 124.237 147.996 124.367 147.996 124.604 cv147.996 129.984 li147.996 131.452 150.049 130.978 150.049 131.647 cv150.049 131.756 149.897 131.82 149.703 131.82 cv149.423 131.82 147.845 131.734 146.7 131.734 cv145.166 131.734 144.929 131.82 144.842 131.82 cv144.669 131.82 144.604 131.712 144.604 131.496 cv144.604 130.869 146.29 131.582 146.29 129.443 cv146.29 118.382 licp0 0.06 0.15 0.34 cmykf164.305 126.052 mo164.305 129.508 166.552 131.086 169.469 131.086 cv173.529 131.086 174.459 128.406 174.459 125.857 cv174.459 118.857 li174.459 116.654 172.449 117.561 172.449 116.74 cv172.449 116.632 172.602 116.524 172.665 116.524 cv173.508 116.524 174.352 116.61 175.193 116.61 cv175.604 116.61 175.993 116.524 176.382 116.524 cv176.49 116.524 176.662 116.632 176.662 116.762 cv176.662 117.367 175.388 116.892 175.388 118.879 cv175.388 125.576 li175.388 126.635 175.646 131.971 169.36 131.971 cv163.678 131.971 162.599 128.795 162.599 125.469 cv162.599 118.188 li162.599 116.913 160.849 117.432 160.849 116.74 cv160.849 116.589 161.215 116.524 161.323 116.524 cv161.886 116.524 162.426 116.61 163.008 116.61 cv163.7 116.61 164.391 116.524 165.061 116.524 cv165.169 116.524 165.753 116.481 165.753 116.74 cv165.753 117.345 164.305 116.74 164.305 118.296 cv164.305 126.052 licpf181.5 123.524 mo181.5 123.935 182.84 123.826 183.855 123.826 cv184.785 123.826 186.858 123.438 186.858 120.759 cv186.858 118.123 184.85 117.237 182.732 117.237 cv181.955 117.237 181.5 117.194 181.5 118.037 cv181.5 123.524 licp189.365 129.465 mo190.92 131.842 191.979 131.043 191.979 131.561 cv191.979 131.82 190.77 131.82 190.574 131.82 cv188.998 131.82 188.154 130.719 187.334 129.486 cv184.936 125.706 li184.158 124.496 184.482 124.561 182.063 124.561 cv181.371 124.561 181.5 124.95 181.5 125.166 cv181.5 129.725 li181.5 131.582 183.748 130.912 183.748 131.647 cv183.748 131.863 183.553 131.82 183.381 131.82 cv183.186 131.82 182.689 131.734 180.896 131.734 cv180.074 131.734 179.254 131.82 178.433 131.82 cv178.303 131.82 178.217 131.712 178.217 131.582 cv178.217 131.043 179.794 131.345 179.794 129.703 cv179.794 118.706 li179.794 116.632 177.936 117.518 177.936 116.783 cv177.936 116.654 178.109 116.524 178.368 116.524 cv178.757 116.524 178.648 116.61 179.75 116.61 cv181.004 116.61 182.235 116.524 183.359 116.524 cv183.705 116.524 188.479 116.092 188.479 120.262 cv188.479 121.947 187.27 123.395 185.757 124 cv189.365 129.465 licpf199.574 116.33 mo203.636 116.33 204.76 117.993 205.386 117.993 cv205.559 117.993 205.688 117.777 205.904 117.777 cv206.143 117.777 206.143 118.123 206.207 119.527 cv206.25 120.672 206.444 121.385 206.077 121.385 cv205.818 121.385 205.667 120.824 205.58 120.672 cv204.241 118.36 202.707 116.957 199.92 116.957 cv195.707 116.957 193.676 119.765 193.676 123.783 cv193.676 127.543 195.837 131.302 199.984 131.302 cv203.377 131.302 205.494 129.141 205.818 128.147 cv205.861 127.996 205.991 127.867 206.12 127.867 cv206.229 127.867 206.337 127.996 206.315 128.104 cv205.818 130.265 li205.797 130.352 204.263 131.971 199.402 131.971 cv194.973 131.971 191.797 128.926 191.797 124.453 cv191.797 119.981 195.016 116.33 199.574 116.33 cvcpf209.647 118.382 mo209.626 116.805 207.768 117.237 207.768 116.762 cv207.768 116.567 207.94 116.524 208.113 116.524 cv208.913 116.524 209.69 116.61 210.49 116.61 cv211.16 116.61 211.83 116.524 212.499 116.524 cv212.867 116.524 212.91 116.654 212.91 116.74 cv212.91 117.172 211.354 116.762 211.354 118.382 cv211.354 123.049 li211.354 123.351 211.354 123.438 211.679 123.438 cv219.586 123.438 li219.802 123.438 219.758 122.897 219.758 122.811 cv219.758 118.382 li219.758 116.892 218.139 117.259 218.139 116.762 cv218.139 116.632 218.182 116.524 218.506 116.524 cv219.219 116.524 220.342 116.61 220.753 116.61 cv221.552 116.61 221.876 116.524 222.308 116.524 cv222.869 116.524 222.912 116.74 222.912 116.87 cv222.912 117.259 221.465 116.892 221.465 118.382 cv221.465 129.832 li221.465 131.41 223.432 131.021 223.432 131.561 cv223.432 131.626 223.345 131.82 223.194 131.82 cv222.61 131.82 221.94 131.734 221.162 131.734 cv219.78 131.734 219.175 131.82 218.765 131.82 cv218.57 131.82 218.246 131.885 218.246 131.539 cv218.246 131.021 219.758 131.323 219.758 129.963 cv219.758 124.777 li219.758 124.432 219.845 124.237 219.586 124.237 cv211.613 124.237 li211.354 124.237 211.354 124.367 211.354 124.604 cv211.354 129.984 li211.354 131.452 213.407 130.978 213.407 131.647 cv213.407 131.756 213.256 131.82 213.061 131.82 cv212.78 131.82 211.203 131.734 210.058 131.734 cv208.524 131.734 208.286 131.82 208.2 131.82 cv208.027 131.82 207.962 131.712 207.962 131.496 cv207.962 130.869 209.647 131.582 209.647 129.443 cv209.647 118.382 licpf150.799 107.14 mo153.907 107.14 156.809 105.481 156.809 100.438 cv156.809 95.603 153.631 92.9087 149.486 92.8398 cv147.413 92.8398 147.345 93.1851 147.345 94.2212 cv147.345 104.583 li147.345 104.929 147.274 105.965 147.482 106.104 cv148.174 106.863 149.831 107.14 150.799 107.14 cvcp144.166 92.356 mo144.857 92.356 145.479 92.4253 146.101 92.4253 cv147.551 92.4253 148.933 92.356 150.799 92.356 cv154.667 92.356 158.466 95.2573 158.466 99.2642 cv158.466 104.238 156.118 107.692 150.039 107.692 cv148.933 107.692 147.827 107.623 146.723 107.623 cv146.584 107.623 144.443 107.692 144.305 107.692 cv144.166 107.692 144.098 107.623 144.098 107.485 cv144.098 107.001 145.617 107.554 145.617 105.481 cv145.617 94.6357 li145.617 92.4253 143.89 93.1157 143.89 92.5635 cv143.89 92.4253 144.028 92.356 144.166 92.356 cvcpf166.963 100.715 mo167.447 100.715 167.447 100.577 167.309 100.3 cv165.168 95.0503 li165.099 94.7739 164.96 94.7739 164.822 95.0503 cv162.404 100.37 li162.266 100.646 162.404 100.715 162.681 100.715 cv166.963 100.715 licp162.543 101.682 mo162.128 101.682 161.713 101.682 161.506 102.166 cv160.124 105.205 li160.055 105.344 159.917 105.689 159.917 105.965 cv159.917 107.485 161.506 106.794 161.506 107.347 cv161.506 107.761 161.161 107.692 160.885 107.692 cv160.263 107.692 159.71 107.623 159.088 107.623 cv158.466 107.623 157.914 107.692 157.361 107.692 cv157.224 107.692 157.153 107.623 157.153 107.485 cv157.153 107.001 158.19 107.347 158.743 106.104 cv163.924 95.0503 li165.168 92.356 165.236 92.0107 165.582 92.0107 cv165.789 92.0107 165.928 92.6323 165.996 92.7705 cv170.556 103.962 li170.901 104.791 171.108 105.689 171.592 106.449 cv172.283 107.416 173.526 106.933 173.526 107.485 cv173.526 107.692 173.389 107.692 173.25 107.692 cv172.353 107.692 171.454 107.623 170.556 107.623 cv169.934 107.623 169.382 107.692 168.76 107.692 cv168.69 107.692 168.275 107.692 168.275 107.485 cv168.275 106.933 169.589 107.208 169.589 106.38 cv169.589 105.896 169.174 104.86 168.967 104.307 cv168.275 102.511 li168.069 102.028 167.931 101.682 167.309 101.682 cv162.543 101.682 licpf171.315 92.356 mo171.868 92.356 172.283 92.4253 173.734 92.4253 cv174.494 92.4253 175.047 92.356 175.253 92.356 cv175.461 92.356 175.668 92.356 175.668 92.5635 cv175.668 92.9087 174.701 92.9087 174.701 93.5303 cv174.701 93.9448 174.978 94.2905 175.047 94.4287 cv177.672 98.6426 li177.878 98.9189 178.017 99.0571 178.154 99.0571 cv178.224 99.0571 178.362 98.9189 178.569 98.5732 cv180.779 94.9814 li180.918 94.7046 181.264 94.3594 181.264 93.8071 cv181.264 92.7012 179.605 93.1851 179.605 92.6323 cv179.605 92.356 179.813 92.356 180.09 92.356 cv180.573 92.356 181.125 92.4253 181.678 92.4253 cv182.3 92.4253 182.922 92.356 183.543 92.356 cv183.682 92.356 183.75 92.4941 183.75 92.5635 cv183.75 92.8398 183.404 92.9087 183.268 92.978 cv182.646 93.3232 182.369 93.9448 182.023 94.4976 cv178.984 99.2642 li178.639 99.748 178.5 99.8862 178.5 100.231 cv178.5 105.551 li178.5 107.416 180.228 106.794 180.228 107.485 cv180.228 107.692 180.09 107.692 179.744 107.692 cv179.467 107.692 178.154 107.623 177.395 107.623 cv176.428 107.623 175.599 107.692 175.392 107.692 cv175.253 107.692 175.115 107.692 175.115 107.416 cv175.115 106.863 176.773 107.416 176.773 105.827 cv176.773 100.577 li176.773 100.163 176.428 99.748 176.29 99.4717 cv172.628 93.6689 li172.076 92.7705 171.04 93.0469 171.04 92.6323 cv171.04 92.4941 171.108 92.356 171.315 92.356 cvcpf88.8076 116.575 mo89.6099 116.575 90.3643 116.669 91.166 116.669 cv91.8735 116.669 92.5337 116.575 93.1938 116.575 cv93.5239 116.575 93.6182 116.622 93.6182 116.764 cv93.6182 117.283 92.062 116.811 92.062 118.415 cv92.062 130.017 li92.062 131.526 93.9487 131.007 93.9487 131.668 cv93.9487 131.809 93.9014 131.856 93.5239 131.856 cv93.0527 131.856 92.1094 131.809 91.166 131.809 cv89.8452 131.809 89.4209 131.856 89.0908 131.856 cv88.7134 131.856 88.6665 131.762 88.6665 131.526 cv88.6665 130.912 90.3169 131.62 90.3169 129.498 cv90.3169 118.415 li90.3169 116.858 88.5723 117.283 88.5723 116.811 cv88.5723 116.622 88.6191 116.575 88.8076 116.575 cvcpf86.8975 99.4023 mo89.1772 99.4023 88.5557 97.6753 89.1079 97.6753 cv89.3154 97.6753 89.3154 97.8828 89.3154 98.0898 cv89.3154 98.8496 89.3154 99.5405 89.3154 100.231 cv89.3154 100.784 89.3154 101.406 89.3154 101.958 cv89.3154 102.166 89.2461 102.235 89.1079 102.235 cv88.417 102.235 89.1772 100.37 87.3809 100.37 cv84.1343 100.37 li83.6504 100.37 83.7197 100.715 83.7197 101.061 cv83.7197 104.998 li83.7197 106.311 83.5815 106.863 85.3774 106.863 cv90.4204 106.863 91.1807 104.583 91.457 104.583 cv91.5947 104.583 91.5947 104.791 91.5947 104.86 cv91.5947 105.62 91.0425 106.38 90.4897 106.933 cv89.7988 107.761 89.3154 107.692 88.417 107.692 cv86.7593 107.692 85.1011 107.554 83.4434 107.623 cv82.5449 107.623 81.647 107.692 80.8184 107.692 cv80.6108 107.692 80.4727 107.623 80.4727 107.485 cv80.542 107.208 80.749 107.278 81.4399 106.933 cv81.9927 106.656 82.0615 106.034 82.0615 104.998 cv82.0615 95.1196 li82.0615 94.1523 82.0615 93.1157 80.8872 92.9087 cv80.6802 92.9087 80.1963 92.8398 80.1963 92.5635 cv80.1963 92.4253 80.3345 92.356 80.9561 92.356 cv85.1011 92.356 86.2065 92.4253 87.1045 92.4253 cv87.519 92.4253 89.5225 92.356 90.2134 92.356 cv90.4204 92.356 90.4204 92.5635 90.4204 92.7705 cv90.4204 95.1885 90.144 95.3955 90.0059 95.3955 cv89.4531 95.3955 89.8682 94.3594 89.4531 93.876 cv88.9009 93.1157 86.6211 93.2544 85.792 93.2544 cv83.7197 93.2544 83.7197 93.1851 83.7197 94.6357 cv83.7197 98.6426 li83.7197 99.4023 83.7197 99.4023 84.5488 99.4023 cv86.8975 99.4023 licpf91.3188 92.356 mo91.6641 92.356 92.0093 92.4253 92.355 92.4253 cv92.6313 92.4253 92.9766 92.356 93.3218 92.356 cv93.5981 92.356 93.7363 92.7012 93.8745 92.8398 cv104.237 104.376 li104.375 104.515 104.444 104.583 104.513 104.583 cv104.582 104.583 104.582 104.515 104.582 104.376 cv104.582 95.2573 li104.582 92.4253 102.165 93.2544 102.165 92.5635 cv102.165 92.4253 102.303 92.356 102.441 92.356 cv103.063 92.356 103.685 92.4253 104.375 92.4253 cv105.135 92.4253 106.033 92.356 106.586 92.356 cv106.724 92.356 106.793 92.4253 106.793 92.4941 cv106.793 93.1157 105.48 92.7012 105.48 94.2905 cv105.48 106.863 li105.48 107.485 105.48 107.761 105.342 107.761 cv105.135 107.761 104.928 107.692 104.513 107.208 cv95.1875 96.6392 li95.1182 96.6392 94.8418 96.2246 94.7036 96.2246 cv94.6348 96.2246 94.5654 96.2939 94.5654 96.7773 cv94.5654 105.62 li94.5654 107.623 96.4307 106.863 96.4307 107.416 cv96.4307 107.554 96.4307 107.692 96.2236 107.692 cv95.6709 107.692 95.1182 107.623 94.0127 107.623 cv93.2529 107.623 92.1475 107.692 92.0093 107.692 cv91.7334 107.692 91.7334 107.554 91.7334 107.485 cv91.7334 106.725 93.5981 107.692 93.5981 104.583 cv93.5981 96.5703 li93.5981 92.0796 90.9731 93.3232 90.9731 92.5635 cv90.9731 92.4253 91.1807 92.356 91.3188 92.356 cvcpf109.142 93.5303 mo107.76 93.5303 107.76 93.876 107.346 95.0503 cv107.276 95.2573 107.276 95.5337 107 95.5337 cv106.862 95.5337 106.793 95.3955 106.793 95.2573 cv107 93.1851 li107.069 92.9087 107 92.356 107.415 92.356 cv109.073 92.356 110.8 92.4253 113.563 92.4253 cv117.5 92.4253 119.504 92.356 119.919 92.356 cv120.402 92.356 120.471 92.4253 120.541 92.978 cv120.679 94.7046 li120.679 94.9121 120.679 95.1885 120.402 95.1885 cv119.643 95.1885 120.817 93.5303 118.606 93.5303 cv115.498 93.5303 li114.53 93.5303 114.599 93.4614 114.599 94.5669 cv114.599 105.689 li114.599 107.485 116.396 106.794 116.396 107.416 cv116.396 107.485 116.396 107.692 116.188 107.692 cv115.636 107.692 115.014 107.623 114.392 107.623 cv111.974 107.623 111.56 107.692 111.421 107.692 cv111.214 107.692 111.146 107.623 111.146 107.416 cv111.146 106.863 112.872 107.14 112.872 105.827 cv112.872 94.4976 li112.872 94.3594 113.01 93.5303 112.665 93.5303 cv109.142 93.5303 licpf120.609 92.356 mo121.438 92.356 122.198 92.4253 123.027 92.4253 cv123.719 92.4253 124.409 92.356 125.031 92.356 cv125.445 92.356 125.445 92.4253 125.445 92.5635 cv125.445 92.978 123.926 92.5635 123.926 94.2212 cv123.926 98.9189 li123.926 99.1953 123.926 99.2642 124.202 99.2642 cv132.146 99.2642 li132.423 99.2642 132.354 98.7114 132.354 98.6426 cv132.354 94.2212 li132.354 92.7012 130.695 93.0469 130.695 92.5635 cv130.695 92.4253 130.765 92.356 131.11 92.356 cv131.801 92.356 132.906 92.4253 133.32 92.4253 cv134.149 92.4253 134.495 92.356 134.91 92.356 cv135.462 92.356 135.531 92.5635 135.531 92.7012 cv135.531 93.0469 134.08 92.7012 134.08 94.2212 cv134.08 105.689 li134.08 107.278 136.015 106.863 136.015 107.416 cv136.015 107.485 135.945 107.692 135.808 107.692 cv135.186 107.692 134.564 107.623 133.735 107.623 cv132.354 107.623 131.731 107.692 131.317 107.692 cv131.179 107.692 130.833 107.761 130.833 107.416 cv130.833 106.863 132.354 107.208 132.354 105.827 cv132.354 100.646 li132.354 100.3 132.423 100.093 132.146 100.093 cv124.133 100.093 li123.926 100.093 123.926 100.231 123.926 100.438 cv123.926 105.827 li123.926 107.347 125.929 106.863 125.929 107.554 cv125.929 107.623 125.79 107.692 125.583 107.692 cv125.307 107.692 123.719 107.623 122.613 107.623 cv121.024 107.623 120.817 107.692 120.748 107.692 cv120.541 107.692 120.471 107.623 120.471 107.347 cv120.471 106.725 122.198 107.485 122.198 105.344 cv122.198 94.2212 li122.198 92.6323 120.264 93.0469 120.264 92.5635 cv120.264 92.356 120.471 92.356 120.609 92.356 cvcpf143.199 99.9551 mo143.199 100.991 143.269 100.991 142.439 101.268 cv138.018 102.788 li137.604 102.926 137.258 103.133 137.051 103.133 cv136.705 103.133 136.774 102.719 136.774 102.511 cv136.774 101.406 136.705 101.406 137.535 101.129 cv141.955 99.6099 li142.301 99.4717 142.716 99.2642 142.923 99.2642 cv143.269 99.2642 143.199 99.748 143.199 99.9551 cvcpf54.5674 123.603 mo56.8315 123.603 56.2656 121.857 56.7842 121.857 cv56.9258 121.857 57.02 122.093 57.02 122.282 cv57.02 123.037 56.9727 123.744 56.9727 124.451 cv56.9727 125.018 57.02 125.583 57.02 126.148 cv57.02 126.338 56.9258 126.432 56.7842 126.432 cv56.124 126.432 56.8315 124.545 55.0391 124.545 cv51.832 124.545 li51.3604 124.545 51.4551 124.923 51.4551 125.253 cv51.4551 129.215 li51.4551 130.488 51.2661 131.007 53.0586 131.007 cv58.0576 131.007 58.8125 128.79 59.0952 128.79 cv59.2368 128.79 59.2368 128.979 59.2368 129.026 cv59.2368 129.828 58.6709 130.582 58.1992 131.148 cv57.4917 131.902 57.02 131.856 56.0767 131.856 cv54.4263 131.856 52.7754 131.762 51.125 131.809 cv50.2759 131.809 49.3799 131.856 48.4834 131.856 cv48.2949 131.856 48.1533 131.809 48.1533 131.668 cv48.2007 131.385 48.4365 131.432 49.0967 131.102 cv49.6626 130.818 49.71 130.252 49.71 129.215 cv49.71 119.358 li49.71 118.367 49.71 117.33 48.5781 117.188 cv48.3892 117.141 47.918 117.094 47.918 116.811 cv47.918 116.669 48.0591 116.575 48.6724 116.575 cv52.728 116.575 53.8604 116.669 54.8032 116.669 cv55.228 116.669 57.209 116.575 57.8691 116.575 cv58.0576 116.575 58.105 116.764 58.105 117.047 cv58.105 119.452 57.7749 119.594 57.6802 119.594 cv57.1616 119.594 57.4917 118.556 57.1616 118.084 cv56.5957 117.33 54.332 117.471 53.4829 117.471 cv51.4077 117.471 51.4551 117.377 51.4551 118.839 cv51.4551 122.848 li51.4551 123.603 51.4077 123.603 52.2563 123.603 cv54.5674 123.603 licpf59.3311 116.575 mo59.7085 116.575 60.0386 116.669 60.3687 116.669 cv60.6987 116.669 61.0288 116.575 61.3589 116.575 cv61.5947 116.575 61.7837 116.905 61.9248 117.047 cv72.2534 128.555 li72.3481 128.695 72.4424 128.79 72.4893 128.79 cv72.5366 128.79 72.584 128.695 72.584 128.555 cv72.584 119.499 li72.584 116.669 70.1787 117.519 70.1787 116.764 cv70.1787 116.622 70.2729 116.575 70.4141 116.575 cv71.0273 116.575 71.688 116.669 72.3481 116.669 cv73.1025 116.669 74.0459 116.575 74.5645 116.575 cv74.6592 116.575 74.7534 116.622 74.7534 116.764 cv74.7534 117.33 73.48 116.952 73.48 118.509 cv73.48 131.007 li73.48 131.668 73.48 131.95 73.2915 131.95 cv73.1499 131.95 72.9141 131.856 72.4893 131.337 cv63.1982 120.867 li63.1514 120.867 62.8682 120.49 62.7266 120.49 cv62.6323 120.49 62.585 120.537 62.585 120.961 cv62.585 129.828 li62.585 131.762 64.4717 131.007 64.4717 131.573 cv64.4717 131.715 64.4717 131.856 64.2358 131.856 cv63.7173 131.856 63.104 131.809 62.0664 131.809 cv61.312 131.809 60.1802 131.856 60.0386 131.856 cv59.7554 131.856 59.7554 131.762 59.7554 131.62 cv59.7554 130.865 61.6421 131.809 61.6421 128.79 cv61.6421 120.82 li61.6421 116.339 59.0479 117.565 59.0479 116.764 cv59.0479 116.669 59.2368 116.575 59.3311 116.575 cvcpf77.0645 117.754 mo75.6968 117.754 75.6494 118.084 75.272 119.263 cv75.1777 119.499 75.1777 119.782 74.895 119.782 cv74.7534 119.782 74.7061 119.594 74.7061 119.499 cv74.9419 117.424 li74.9419 117.141 74.9419 116.575 75.3193 116.575 cv77.0171 116.575 78.668 116.669 81.4507 116.669 cv85.3652 116.669 87.3457 116.575 87.7705 116.575 cv88.2891 116.575 88.3833 116.716 88.4307 117.188 cv88.5249 118.933 li88.5249 119.122 88.5723 119.405 88.2891 119.405 cv87.4873 119.405 88.6665 117.754 86.4497 117.754 cv83.3369 117.754 li82.5352 117.754 82.4883 117.801 82.4883 118.792 cv82.4883 129.828 li82.4883 131.668 84.2329 130.96 84.2329 131.62 cv84.2329 131.668 84.2803 131.856 84.0444 131.856 cv83.5259 131.856 82.9126 131.809 82.2993 131.809 cv79.894 131.809 79.4697 131.856 79.3281 131.856 cv79.1396 131.856 79.0923 131.809 79.0923 131.573 cv79.0923 131.055 80.79 131.29 80.79 129.969 cv80.79 118.745 li80.79 118.603 80.8374 117.754 80.5073 117.754 cv77.0645 117.754 licpf73.6338 106.794 mo73.4263 107.347 73.2192 108.038 72.9429 108.038 cv72.5972 108.038 72.3213 107.14 72.1138 106.656 cv66.7256 94.0142 li66.1729 92.7012 65.0674 93.1157 65.0674 92.6323 cv65.0674 92.4253 65.2056 92.356 65.4126 92.356 cv66.0347 92.356 66.7256 92.4253 67.416 92.4253 cv67.9688 92.4253 68.7979 92.356 69.0742 92.356 cv69.2124 92.356 69.4194 92.4253 69.4194 92.5635 cv69.4194 92.8398 68.5215 92.8398 68.5215 93.6689 cv68.5215 93.9448 68.6597 94.2905 68.729 94.4976 cv72.5283 103.479 li73.0117 104.583 73.1499 105.067 73.3574 105.067 cv73.5645 105.067 73.6338 104.722 73.772 104.515 cv77.5713 95.1885 li77.7095 94.8428 77.9165 94.1523 77.8477 93.6689 cv77.8477 92.7012 76.4658 93.1157 76.4658 92.6323 cv76.4658 92.4253 76.604 92.356 76.8115 92.356 cv77.2949 92.356 77.7788 92.4253 78.1929 92.4253 cv79.2983 92.4253 79.5747 92.356 79.9199 92.356 cv80.1274 92.356 80.2656 92.4253 80.2656 92.6323 cv80.2656 93.1157 79.6436 92.5635 79.022 94.0142 cv73.6338 106.794 licpf62.9258 107.692 mo61.2681 107.692 59.6099 107.554 57.9521 107.623 cv57.123 107.623 56.1558 107.692 55.3267 107.692 cv55.1196 107.692 54.9814 107.623 54.9814 107.485 cv55.0508 107.208 55.2578 107.278 55.9487 106.933 cv56.501 106.656 56.5703 106.034 56.5703 104.998 cv56.5703 95.1196 li56.5703 94.1523 56.5703 93.1157 55.396 92.9087 cv55.1885 92.9087 54.7051 92.8398 54.7051 92.5635 cv54.7051 92.4253 54.8433 92.356 55.4648 92.356 cv59.6099 92.356 60.7153 92.4253 61.6133 92.4253 cv62.0967 92.4253 64.0313 92.356 64.7222 92.356 cv64.9292 92.356 64.9292 92.5635 64.9292 92.7705 cv64.9292 95.1885 64.6528 95.3955 64.5146 95.3955 cv63.9624 95.3955 64.3765 94.3594 63.9624 93.876 cv63.4785 93.1157 61.1987 93.2544 60.3008 93.2544 cv58.2285 93.2544 58.2974 93.1851 58.2974 94.6357 cv58.2974 98.6426 li58.2974 99.4023 58.2285 99.4023 59.0571 99.4023 cv61.4063 99.4023 li63.6855 99.4023 63.1333 97.6753 63.6167 97.6753 cv63.8242 97.6753 63.8931 97.8828 63.8931 98.0898 cv63.8931 98.8496 63.8242 99.5405 63.8242 100.231 cv63.8242 100.784 63.8931 101.406 63.8931 101.958 cv63.8931 102.166 63.7549 102.235 63.6167 102.235 cv62.9258 102.235 63.6855 100.37 61.8896 100.37 cv58.6431 100.37 li58.2285 100.37 58.2974 100.715 58.2974 101.061 cv58.2974 104.998 li58.2974 106.311 58.0903 106.863 59.8862 106.863 cv64.9292 106.863 65.689 104.583 65.9658 104.583 cv66.1035 104.583 66.1035 104.791 66.1035 104.86 cv66.1035 105.62 65.5508 106.38 65.0674 106.933 cv64.3076 107.761 63.8931 107.692 62.9258 107.692 cvcpf41.4092 130.96 mo41.1733 131.526 41.0322 132.233 40.7017 132.233 cv40.3242 132.233 40.0889 131.29 39.8999 130.865 cv34.5708 118.226 li34.0518 116.952 32.8726 117.33 32.8726 116.858 cv32.8726 116.669 33.0142 116.575 33.2031 116.575 cv33.8633 116.575 34.5234 116.669 35.1836 116.669 cv35.7495 116.669 36.5986 116.575 36.8813 116.575 cv37.0229 116.575 37.1646 116.669 37.1646 116.764 cv37.2119 117.094 36.3154 117.094 36.3154 117.896 cv36.3154 118.179 36.4102 118.509 36.5044 118.745 cv40.2773 127.611 li40.7959 128.79 40.8906 129.262 41.126 129.262 cv41.3623 129.262 41.4092 128.932 41.5508 128.648 cv45.2764 119.405 li45.418 119.075 45.7012 118.367 45.6069 117.943 cv45.6069 116.952 44.1919 117.33 44.1919 116.858 cv44.1919 116.622 44.3335 116.575 44.522 116.575 cv44.9937 116.575 45.4653 116.669 45.9839 116.669 cv47.0215 116.669 47.3047 116.575 47.6348 116.575 cv47.8706 116.575 48.0122 116.669 48.0122 116.858 cv48.0122 117.33 47.3989 116.764 46.7856 118.226 cv41.4092 130.96 licpf41.3721 106.311 mo40.6816 102.58 li40.5435 102.028 40.6816 101.682 40.958 101.682 cv41.3721 101.682 41.3721 102.028 41.5103 102.649 cv41.856 103.962 43.583 107.001 47.5898 107.001 cv50.353 107.001 53.0469 105.481 53.0469 102.442 cv53.0469 96.8467 41.3032 99.9551 41.3032 92.4253 cv41.3032 88.7637 44.4121 86.9678 47.7275 86.9678 cv51.251 86.9678 52.1494 88.0039 52.5635 88.0039 cv52.8398 88.0039 52.9092 87.6587 53.1851 87.6587 cv53.3926 87.6587 53.5308 87.7969 53.5308 88.0732 cv53.9453 92.0107 li54.0142 92.2871 53.9453 92.4941 53.6689 92.4941 cv53.3232 92.4941 53.1162 91.8726 53.0469 91.5962 cv52.2183 89.1089 50.0767 87.8657 47.5205 87.8657 cv45.2407 87.8657 42.8228 88.9712 42.8228 91.5962 cv42.8228 97.0537 54.5669 93.876 54.5669 101.82 cv54.5669 104.307 52.8398 107.9 46.2773 107.9 cv44.1357 107.9 41.4414 106.863 41.3721 106.311 cvcpf10.1401 114.758 mo6.88574 121.69 li6.69727 122.115 6.88574 122.209 7.26318 122.209 cv12.9229 122.209 li13.583 122.209 13.5361 122.021 13.3945 121.644 cv10.6118 114.758 li10.4702 114.38 10.3291 114.38 10.1401 114.758 cvcp23.063 118.461 mo23.063 128.743 li23.063 129.073 23.0156 130.11 23.2046 130.299 cv23.9116 131.007 25.5625 131.29 26.5527 131.29 cv29.6187 131.29 32.5425 129.64 32.5425 124.64 cv32.5425 119.83 29.3354 117.141 25.2324 117.094 cv23.1572 117.094 23.063 117.471 23.063 118.461 cvcp22.4966 131.809 mo22.3555 131.809 21.1763 131.856 20.5161 131.856 cv19.3369 131.856 18.6294 131.809 17.6865 131.809 cv16.8843 131.809 16.1299 131.902 15.3281 131.902 cv15.1865 131.902 14.7148 131.902 14.7148 131.62 cv14.7148 130.912 16.4131 131.195 16.4131 130.11 cv16.4131 129.498 15.8472 128.178 15.564 127.423 cv14.6206 125.064 li14.3379 124.404 14.1963 123.979 13.3945 123.979 cv7.07471 123.979 li6.50879 123.979 5.99023 123.979 5.70703 124.593 cv3.91455 128.602 li3.82031 128.79 3.67871 129.215 3.67871 129.593 cv3.67871 131.573 5.70703 130.724 5.70703 131.479 cv5.70703 131.997 5.32959 131.902 4.95215 131.902 cv4.15039 131.902 3.34863 131.809 2.54688 131.809 cv1.79248 131.809 0.990723 131.902 0.23584 131.902 cv0.0947266 131.902 0 131.762 0 131.573 cv0 131.007 1.3208 131.479 2.0752 129.828 cv8.91406 115.254 li10.6118 111.623 10.7061 111.151 11.0835 111.151 cv11.4136 111.151 11.6021 112 11.6968 112.236 cv17.6392 126.998 li18.0635 128.036 18.3936 129.215 19.0542 130.252 cv19.5259 130.912 19.9502 131.148 20.5161 131.148 cv20.9878 131.148 21.3647 130.582 21.3647 129.64 cv21.3647 118.886 li21.3647 116.669 19.6201 117.377 19.6201 116.764 cv19.6201 116.622 19.7617 116.575 19.9028 116.575 cv20.563 116.575 21.2236 116.669 21.8369 116.669 cv23.2988 116.669 24.6665 116.575 26.5527 116.575 cv30.373 116.575 34.146 119.452 34.146 123.461 cv34.146 128.413 31.7881 131.856 25.7983 131.856 cv24.6665 131.856 23.5815 131.809 22.4966 131.809 cvcpf118.897 117.188 mo118.992 118.933 li118.992 119.122 119.039 119.405 118.756 119.405 cv117.955 119.405 119.134 117.754 116.917 117.754 cv113.804 117.754 li112.955 117.754 112.955 117.801 112.955 118.792 cv112.955 129.828 li112.955 131.668 114.7 130.96 114.7 131.62 cv114.7 131.668 114.748 131.856 114.512 131.856 cv113.993 131.856 113.38 131.809 112.767 131.809 cv110.361 131.809 109.937 131.856 109.795 131.856 cv109.606 131.856 109.56 131.809 109.56 131.573 cv109.56 131.055 111.257 131.29 111.257 129.969 cv111.257 118.745 li111.257 118.603 111.305 117.754 110.975 117.754 cv106.494 117.754 li105.173 117.754 105.221 118.226 105.221 118.98 cv105.221 119.216 105.409 120.16 104.985 120.16 cv104.749 120.16 104.607 119.688 104.513 119.499 cv103.853 117.66 102.344 117 100.457 117 cv98.7119 117 96.9199 117.849 96.9199 119.83 cv96.9199 123.885 105.692 121.527 105.692 127.47 cv105.692 129.309 104.419 132.044 99.5137 132.044 cv97.9102 132.044 95.9292 131.243 95.835 130.818 cv95.3164 128.036 li95.2217 127.611 95.3164 127.376 95.5522 127.376 cv95.835 127.376 95.835 127.658 95.9766 128.082 cv96.2124 129.073 97.5327 131.337 100.504 131.337 cv102.579 131.337 104.56 130.205 104.56 127.894 cv104.56 123.744 95.7881 126.055 95.7881 120.442 cv95.7881 117.707 98.0991 116.387 100.599 116.387 cv103.192 116.387 103.9 117.141 104.23 117.141 cv104.56 117.141 104.607 116.575 105.032 116.575 cv106.73 116.575 109.135 116.669 111.917 116.669 cv115.832 116.669 117.813 116.575 118.237 116.575 cv118.756 116.575 118.851 116.716 118.897 117.188 cvcpf135.08 111.311 mo140.463 111.311 141.952 113.516 142.783 113.516 cv143.013 113.516 143.185 113.229 143.471 113.229 cv143.786 113.229 143.786 113.688 143.871 115.549 cv143.929 117.067 144.187 118.012 143.699 118.012 cv143.356 118.012 143.156 117.267 143.041 117.067 cv141.266 114.002 139.232 112.141 135.538 112.141 cv129.953 112.141 127.261 115.864 127.261 121.191 cv127.261 126.174 130.125 131.156 135.624 131.156 cv140.12 131.156 142.927 128.293 143.356 126.976 cv143.414 126.775 143.586 126.604 143.757 126.604 cv143.9 126.604 144.044 126.775 144.015 126.919 cv143.356 129.782 li143.327 129.896 141.294 132.044 134.851 132.044 cv128.979 132.044 124.77 128.007 124.77 122.079 cv124.77 116.15 129.037 111.311 135.08 111.311 cvcpf120.646 114.553 mo120.84 114.553 li121.147 114.553 121.299 114.405 121.299 114.109 cv121.299 113.958 121.243 113.833 121.127 113.732 cv121.014 113.631 120.874 113.581 120.706 113.581 cv120.6 113.581 120.546 113.623 120.546 113.708 cv120.549 113.765 li120.549 114.455 li120.549 114.501 120.554 114.529 120.563 114.539 cv120.573 114.548 120.601 114.553 120.646 114.553 cvcp121.196 114.628 mo121.661 115.306 li121.718 115.389 li121.864 115.6 121.995 115.708 122.109 115.714 cv122.164 115.717 li122.201 115.719 122.219 115.736 122.217 115.769 cv122.213 115.826 122.123 115.854 121.945 115.854 cv121.74 115.854 121.555 115.73 121.391 115.483 cv120.956 114.829 li120.932 114.792 li120.909 114.752 120.87 114.733 120.816 114.733 cv120.584 114.733 li120.558 114.736 li120.549 114.771 li120.549 115.377 li120.549 115.511 120.567 115.6 120.604 115.642 cv120.64 115.684 120.721 115.711 120.848 115.725 cv120.905 115.731 120.934 115.752 120.936 115.789 cv120.938 115.827 120.911 115.846 120.854 115.846 cv120.836 115.846 120.801 115.843 120.748 115.837 cv120.703 115.832 120.629 115.829 120.527 115.829 cv120.265 115.829 li120.231 115.829 120.183 115.833 120.121 115.84 cv120.075 115.844 120.046 115.846 120.032 115.846 cv119.981 115.846 119.956 115.827 119.956 115.788 cv119.956 115.758 119.977 115.739 120.021 115.729 cv120.11 115.708 120.168 115.668 120.192 115.611 cv120.217 115.553 120.229 115.429 120.229 115.238 cv120.229 114.006 li120.226 113.828 li120.226 113.662 120.168 113.571 120.052 113.553 cv119.97 113.542 li119.918 113.532 119.893 113.51 119.893 113.475 cv119.893 113.436 119.92 113.417 119.975 113.417 cv119.988 113.417 120.03 113.419 120.1 113.425 cv120.137 113.427 120.188 113.428 120.254 113.428 cv120.309 113.428 120.398 113.424 120.525 113.417 cv120.62 113.411 120.703 113.409 120.772 113.409 cv121.329 113.409 121.608 113.613 121.608 114.023 cv121.608 114.281 121.471 114.482 121.196 114.628 cvcp120.934 112.784 mo120.424 112.784 119.988 112.964 119.626 113.326 cv119.265 113.688 119.084 114.125 119.084 114.635 cv119.084 115.146 119.265 115.583 119.626 115.944 cv119.988 116.306 120.424 116.487 120.934 116.487 cv121.444 116.487 121.88 116.306 122.242 115.944 cv122.604 115.583 122.783 115.146 122.783 114.635 cv122.783 114.123 122.604 113.686 122.242 113.325 cv121.883 112.964 121.446 112.784 120.934 112.784 cvcp120.934 112.553 mo121.51 112.553 122 112.756 122.406 113.162 cv122.811 113.567 123.014 114.058 123.014 114.635 cv123.014 115.209 122.811 115.7 122.404 116.105 cv121.999 116.511 121.508 116.713 120.934 116.713 cv120.29 116.713 119.762 116.469 119.352 115.98 cv119.02 115.585 118.854 115.137 118.854 114.635 cv118.854 114.123 119.019 113.672 119.349 113.283 cv119.765 112.796 120.293 112.553 120.934 112.553 cvcp/0 <</Name (PANTONE 402 CV)/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0.06 0.15 0.34 ] >>/CSD add_res1 /0 /CSD get_res sepcs1 sepf153.951 69.5664 mo154.146 69.5664 li154.451 69.5664 154.604 69.4185 154.604 69.1221 cv154.604 68.9717 154.547 68.8462 154.434 68.7451 cv154.319 68.6445 154.179 68.5938 154.012 68.5938 cv153.904 68.5938 153.852 68.6362 153.852 68.7207 cv153.854 68.7783 li153.854 69.4683 li153.854 69.5146 153.859 69.5425 153.869 69.5518 cv153.879 69.5615 153.906 69.5664 153.951 69.5664 cvcp154.502 69.6411 mo154.965 70.3193 li155.023 70.4019 li155.168 70.6133 155.299 70.7217 155.415 70.7275 cv155.471 70.7305 li155.507 70.7324 155.524 70.7495 155.522 70.7817 cv155.519 70.8389 155.428 70.8672 155.25 70.8672 cv155.045 70.8672 154.859 70.7437 154.695 70.4966 cv154.261 69.8423 li154.237 69.8047 li154.215 69.7656 154.176 69.7461 154.121 69.7461 cv153.889 69.7461 li153.863 69.749 li153.854 69.7842 li153.854 70.3901 li153.854 70.5244 153.873 70.6128 153.908 70.6548 cv153.945 70.6968 154.026 70.7246 154.153 70.7383 cv154.21 70.7441 154.239 70.7651 154.241 70.8018 cv154.243 70.8403 154.216 70.8594 154.158 70.8594 cv154.141 70.8594 154.105 70.8564 154.053 70.8506 cv154.008 70.8447 153.934 70.8418 153.832 70.8418 cv153.57 70.8418 li153.537 70.8418 153.488 70.8457 153.426 70.8535 cv153.381 70.8574 153.352 70.8594 153.338 70.8594 cv153.286 70.8594 153.261 70.8398 153.261 70.8008 cv153.261 70.7715 153.282 70.752 153.326 70.7422 cv153.416 70.7207 153.473 70.6816 153.498 70.624 cv153.521 70.5664 153.534 70.4424 153.534 70.2515 cv153.534 69.019 li153.531 68.8408 li153.531 68.6753 153.473 68.584 153.357 68.5664 cv153.275 68.5547 li153.224 68.5449 153.198 68.5229 153.198 68.4878 cv153.198 68.4492 153.226 68.4297 153.279 68.4297 cv153.293 68.4297 153.335 68.4326 153.404 68.4385 cv153.441 68.4404 153.493 68.4414 153.559 68.4414 cv153.613 68.4414 153.703 68.4375 153.83 68.4297 cv153.926 68.4243 154.008 68.4219 154.078 68.4219 cv154.635 68.4219 154.913 68.6265 154.913 69.0361 cv154.913 69.2939 154.775 69.4956 154.502 69.6411 cvcp154.239 67.7969 mo153.729 67.7969 153.293 67.9775 152.932 68.3394 cv152.57 68.7012 152.39 69.1377 152.39 69.6484 cv152.39 70.1592 152.57 70.5957 152.932 70.9575 cv153.293 71.3193 153.729 71.5 154.239 71.5 cv154.75 71.5 155.186 71.3193 155.547 70.9575 cv155.908 70.5957 156.089 70.1592 156.089 69.6484 cv156.089 69.1357 155.908 68.6987 155.549 68.3379 cv155.188 67.9775 154.752 67.7969 154.239 67.7969 cvcp154.239 67.5664 mo154.815 67.5664 155.307 67.769 155.711 68.1748 cv156.117 68.5801 156.319 69.0713 156.319 69.6479 cv156.319 70.2227 156.116 70.7129 155.71 71.1182 cv155.304 71.5239 154.813 71.7266 154.239 71.7266 cv153.595 71.7266 153.067 71.4824 152.657 70.9937 cv152.325 70.5986 152.159 70.1504 152.159 69.6479 cv152.159 69.1357 152.324 68.6855 152.654 68.2964 cv153.07 67.8096 153.599 67.5664 154.239 67.5664 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (4C_2.EPS)%%CreationDate: 4/19/07 11:19 AM%AI9_DataStream%Gb!R&pKANZdP(OSJF5]?A&*V^*,m67bCE;@3+3t@N![@a=F77GO)s]dWk*PgH8IDrKm!*<^Lodc$iQrDW74i'1Gc*!LV&JF]?Aau%^K7FYjAk"aWd7]Foc:Y"1UDN&Z.2RHWHk*(@`"QI3$G(-CJbp8%]ea2!G5PS2]lpAGJ3rM]@lImf@i1N:3WPGp35Q"qS$qU?Q.JD%f$-qd?e*\r7e=2Ho4H$-gUt+3D72O8NF"KB=btbVg$6K*c,K+gm<Pb=JlVT%]4Y+(;&@B,@e"@;n(]d=*\LXn:h]0(k8$7*nO%Oj%Iil%D4m3-XKK!r=U"aA?W]&/i^Y(d*gYIBt3RtOtGt>I=rq%4(Zr4<3<Xh*-_gh#DkHGuQQWY(PN>5h.+9$8nXF_Tq/YJ=\r',:F%)W-/J<JbPf^UZ!>>F/FI?Dl2_C>XH/(L94@h;7$GH7bR+(TMT;5lFc]J8qEh;9amMiLdo+i865/CN;E-KXLfjCAhoOAuU&uf5#S[%M36Z0C5P#te*.lXr=9<_?oummFp.[3iMP-c]"@7D!"p!(D"$*pXW%RDhT_Mo%_kI4Zh;'W_-s*[g$6D2CYq6^(SSg6queOChY=_5%&T`^Bm+o/=%bo%R=r;PKNuuA!5BP\\=,VGVY1bV3A)"H0W^EOd%B?*Pla3Wt>83)d@6poJ&;GTTf#qC_lLO4X7CFj3gZi$LkVWM7%'o@F=$akfh5?@e#D1um%HEB9^G$*:1mr^XV<I;Ib2/_2TXL2td(1>D4XMRro_>^uZ?]&dDht.)X5MV1Je*jX!2Pc'VK/+shoHcQQ%^Nk?*>FkK*rQa6FG%L*d7Jj_th/Dq7_7j^@?$,81&edL1+pXe6X1qg>X#7'Jk6oHpm,2?`XR;YZDDcd&=T\H'K86L6CN)QE9cU$*%Fg^hfrDc!s[r7H'R@fXS8siFKs5-\o5%V7Y]+ZFF?^"0FXpI#-IpFXf3kkmopto?Q>3"c-lE\mKs)ll9WZ^>K;Npl66tNUC4"["q%I]EF6=I+HoT!rX@]!luC11\/Il!6/b=pKP$H`c&=V6.4U!Zu!k7d.kJ?`fgk4_nS[2!uurT,O9tU7uXrIU:i9^^d(:XG='/H]K@;%p#&p3^.$<6rS"'3#:5]+:#iD(W=kd:M<"om0@2M=,RH"Ne3=&Pa@Y:;;DCmf`>?'@JD3^GjIk,8Ju2UI^O]m@?5s&7$%NbI^Vc]K%I.ch,ri]Fk<B^/II_LM#IfoJLW`OUUrUS45?4_SV&cT\j]%'$M\8!%6><.53I[`RjW8s$30;PD@]RsQDI/b!/[pqr]s)T[t$lFYO%*9`'9UDbJC&WfWGL,I/[Ca5Lf;Fu;Kk,)op==S%C"4Q>q#Y68IrVl@%QL7A8.Z]*Z,1#Qs)24p!&uC>;J5i8im2m7#WME%L%C$8&%T8PQddP;k)6S,sEo[`p:#))!tGB`G(h9h;K$>d\n2JfY[h8X<4\l`*!\,r)(V7p-`]uiT[(09>-/&m=bh@?n10\si>AQeBhB9ha;%:b;B[W`<C+D*6VG^("fqrU7=LgHg[^mn,OYc=m[r)iV*E["0I:hm`]lY!n?&5Hj,Smb"=QV,*W=Dt_R#-*1:ls1U1dq-3MUSHB6;%TUsM(od_ULj5<Ms;e.TF!'S?GQtSF?F+6%b<],3@XQ2DN+C?OFZUP6jfeTu^4paE3`Vb2uL4W<2:>rL\9"A,DoGTstQITnU^\I,p%M=]Wgr%3Ai]W^dUg6DF'=`s/i[l8O#GmUE>kN_u=f)ch=&X0rnF;k0tMO6[)/629X./9@aSOhd?QZlhJP-=XVmr-tgpiZ#H?2*]h%7]6+l-j$PrcoR,]Il2*b<*I5P3U,s^RYYL[-!fQ_s3f9q,2Oe(0K8C]FmGdGaJb>]s4Mjl?]k</0$uU[*2"5=;C;\CO/JSroT)!F%G2YuVlMjlEr2*J+i=DI/s%OG\jfd*:*L$JX=#>*(8LDFV/1(2Vf&961JV"g24P4+SQfC<E0;'os78<UX__1?Ur7?EQ2uX>+KC6ua%o7&hRL+ueI[r:h!H/@ri+fi)$p4U8pbUiMOq9Mt"j>:ZJA#iJRf>#LNmdL0tD]Hg"H*/.rlHR)H/pb:ToLL>,ch8hKH5t;4J!V?8%s7+sU:<dcEaWAfu?`gBP?Y,U*P4HA<r=e!KBKpU-/NQ&oO7RkZ;ZGu.gpVNg$P8*5D+?^#4/O[,rLqH(@YkP#n7K_LX8AGg\(1;T%<BY0s]3!gu\EYrsYAULhP5\UiTp.GiHI0cF[GJF*HtZcnWr)11[/2LgCd0kP?h]P<Mkj%oJD3Qf3n:+qICkh<e[W/QX$0Lpn`'PJ%-6QY>c1XjZl0t15lC3Q8]DAe[mBnuVs.`'NbPTl0e\c6(T2'lGj-S:bH0F#JLiM][[@V(M_l/="H@6%pG5It7]bH5Fe2uPcU[VkC%Y.egsIjJqV_]`fXA7_'hA+-+8%n.8s@1A*ppPjN5FSG(oiMN<4"MX@$ac+6i7]1IeDKIM29g%[Dg<f%aX1pXN^FQ7id;)b.nR.ap%LcLmA6@59C?2)&6CVBO&'R4a$c1mos\c;LVQdb2D:6aX$#HCdN?slm`Q[rj4b!Ik&KQI;#-;=j/6YTPM->NsSaj&@AX4i3.-ca8:%)ic<5d*s`IeS=fNm.84kj0"f9m8@)U2cob#(=_:A%;iY/<R<>LSo1a\^/h<^YP<H538/ki3qm;Dm:MO^P?/d3DRLKIfOiLR<bH'Y%94,$8>*?2JDDlBOj70K=_',gf=KD9$>Gp0B>dQ-[)cU,"D>/e\X<qI\oAJa-bM2>$e>XcSoJ7-YqnAAf-aBG+P.ELjd^rO]cV8n3%h&=Y3_<EusSSemM5IBdOO,g"Dr7/;jF]ublhUo>e)Eh,'<]<+2ISuD1>dJk1,P,MURTj$"h4uSL,@0oL#4&C6Fk=ei$dtt"g:[C]%\l?OimoQQ";Q<^=>@=UsRiKrgC=Q+^oBKKu#i\;GleK=S^&>/+e\<*^.S"\a9h;=P94*D?T3!rT,OtB.=6i&?GLb('bYRQ.ekP+B%SmUHf/kg<;\c`f==$^>0?2]/\CW`4bGE5W\md:c6f,V4PPq\gFC_'CLUcF-5"F"C_e%Qocj<!BIX1P"k!QdCh<,YU08F=_B*Sn5a%rKbfgp<T?bCHm0B'DGUq#,U^#h4[5OTtX0+QCIf\dCJ\6XY,_qBm#9>XOSUpo2]Mk;;=,I2gUtUD6Aedqp*N2_R)j%bG&j?AS<$Y%"53s,YfBjk@6256Mc0]W0!)@,h^hmMPb;57$C'K.ThmX"f]J9$CDk,HIhCp\hqYSpgM0#8X8C`0:$k938>:g4aob0FAs;I^gIgP;%^VCS*F'#qMpD9Y6(ITmtO\&+34)%lcR7>a[2iI'6DAPja9KcgSRu5r=ik.Z\k]G'-s+#cKj'-D@9"++S5IZUr/`62AYgPd-]r7P&%?!Zn!hs(nO!L@cH[C6'lR]/$b:W/$iTI:p^h:BAP^J`2MjUFmPl;W5$hsGJe(>Z%7])g+_'@P_sQc>PH#mZ878\.Ccr2Otq-m2QX%<2<)adfK=N1E)J/5=RT&=u!G*'T224[sJ9Aa-;E=F,iNq"_g%7[<C^?_]XiW*>ADT;Z<`Qq&e'tO\U&VmTpcBAZQiNos.W.:h?*1%QqEd;WXF,Q99h@gh-\-Llo+<NRXZ+Zc]k;Pf.C1qOJ[5EPF**UqZjHLe$pJ^%Ph<UgI]%3Pc!58?$&Oc[;L\/8/,?JU,%"%_=t*Y%agS61I]c3EbQ,%n7^ns82Eg\aH_]"j[;'N!)pqqqlgE<(40fUZ&hIlPF/j/%MG.R9F?jQlcm5kC9bJQ>9G3S3:YI!&'7m0Bq/0^B%TPT6Kic6U`C&=AV^iY[?q%2?bXp0"HZ9[-ZADQRPH_<`M"`t$6F[-E&FB_jeV`6!F?]AABCUq)pT;,&'p0oc>jFH!?6>Zf<WJ$OW%q,j#a<Xf]J2h[(<>Fib;;GhIA(REGm>H#VBa&ZS]!G3OnFZP_WC=HS48CbHf#'N`e/)<:LI+[kD>XS0[2F#a.BDp"N]>L)oN*(i(%El>!-\&pJc*5Ns#k$W%=-h>kn8B%g_KpVf8[J+G)a%PaXah_chq(gfUr*+Yi=!KX24pSQhT.g/qCknWfl[i^&5&79C3\MFr>;sU;%cW>V/s7#0qigp&8fdlqZ>+`NRfVm#qYAJdfAj:\WhYC)co,kWJqtS(GX5ie_CO+mPj$!FHo#uN)fNVY])/if!:Odc>=T<*+^.c7%%$SO[J^SYW3&-#<Trqa;k[Eu#"9J)iAI$n/[2@l\I[_'m&"AW`M4e>i%q;Qimf(,m)^:^(fILf/%HRkT@pp_gRqXO7ooqf+Pp&Dg7%#PWX<TRYd2oBstnMbbErAmh-FlGfE5=m'Sp14ksiLP;(!;bt'/ds\EWNOIV<c_c3/c`J/-Hb-@@?LN%ucao`1hk'6(=j,[<*4;%]%Kj$mP>P;.ejB$aaZdNcYX4t1M#0u]!WOtjL45ZA@5!^c4[Be6:ebSI)qjVn4V;:D)_.m;QgFkdEGK6[TYnj@jRm1&#f%bVE<GCXT%a3*2dRHIL5Z7<7?X]Nhi.Li6s8'cY([$!6AlCEC32@ikRAG5ZCk5EHHhUVLaR?_Ya\*L"cjaNn<BA_:RpNZjgeG7g?hI<>QID`\i%k`\*gpLYS<fC#-WQ,bTUZJ,91g!m*LLZ-en<=6A&I)E&X>Nac2q8]!t=3g`=Mp#[;Bk<$!qgI^J2n.4Sq<,S1G,<N_ju_CaKl2(1%qr)at7BYO^^34-rT%Z2iqS20*='Jn^Q$W&Z(7mb&ANb`NpoHCOks*#%qlEDlc$(71F".WrBDfi#PuHr3)6DoDp>KFl?QX,JIds5j%qK8$*l.1XR3,a&NT.E^eIYgZU^0Y`p)WLqtBYHS*HBAF,Bj[^kB=Il4VtUs+)W%ABXmbV*PEh^lc)#_iR0igqmB`tHkj.D3X+'ph%bcZ'Nd6gktD+9qYmbP7YFepcFB!q)BJ*n+o.fHY\*Rt*OA68WQrEeC:Ho70h.EouocIG[-?OtuuLHk>Z?+5irmr<NIoqgojMmK>-%W7&g^]!'03?Z^?>4e?G[h<.f7hYOVOC,N'?ap_7]Z1."#e60s7i6R=:hfC=HrTLK"RT&J&_"uXWYs=T6)GBaGpZUmgAS--@ZdS="%:X3u2D7<ir?"R)?RDEXq><b%2le)BQH"9-#l$_4+WjL7.?(.(ET"FTn9sYBqh/K@Ab)G/$eCuaXdRr]=?*gc``P+t=?HiBD^2`]^%.Xf]9<P#E_5$aD<?H5iaV*L6Lg6nR?*XPm8XIe---@tr*D<u`)_Fg0kH0XhGj#d"g5#f,E9+UL2`pXgGMXrU4Z'Z_hZPO"4._1UA%f%ugjYdNsEgAQVg0)&EcbWL2k]"JQ<^7E];67jHX3NIMA6sj<'I&NkGpilVS`jMc;ePX"t%PLNBmpBqkW?=OpYOSekmrliV\N?/+%7K<+;-WBHPm="\0D]Ug]9>?bd[0)?GrK[@s;G6J#hqE=h[irK[aTA)A=S::K6XT]sr9%-^rSoC]lRT*ucYoo]`Od6GpR:c(l;NrA%Fi2pKmX37UH=e2!?2*E9omd"IBH8'g:Z[#,=bj3<cfKTJXeVj[2>oDO?`'pM_c/&!pJ\)/lhG/YL%q+nB&8l`f(%kMX/rK]@UJEO%VoS=s]\L-MVdO!dn*@^\Grkkhp[u#gmH!k;2.D!k^P:=Kh`hqK^;eauUM"K$f@SSVE#.cCWASkMZ"m.mq)Pu)F*@K!H(X^$I+hnT%npN<<`6Jn[G97m>c,ndXgUl(_<R03SH2I7.]-l9=rU4rcc^skpkDbkXh4L.,J%J?\S_9?NgZI*H;ml#E0?)O"j`>`,;pW.d^\(YF%Z*gF++1VS6GB(-sg@"A9Z7#9#Dt,&MV,^WAXjnuQ;_"-;m$ZJK^"Kg<_cPg]qWH,P_tD=pcYF7`Xj+9(>'"OtFnshpfAD&$ggGJ6%;'2iag79NiOJj/a3F=W)>CI[Mc!&:D:*+@eHi`7%o=:IkpX@;e0@&`h(HpL97NY\)%>*>[jNP?j?P7/Xoc-H_H):Kne8s?C8o\19%>4;*:Wm.X;dH8DgDPa/ljAZJ\/a,2(/s#P:HD`t7.c"9c=eup1SkSHB8bu44FfA9eP2lV<o`%Tb\ohKkn=r!MWH[i6<snes?-B@7%Ujj_P\Z*<;o`$e\;Xa6NDP]&"[n`sOap]A"OT';O7HsgrYL6I#V:"^d'13fsqarV4:8Q>raqSK6Q$u9KBk:oPC3jGg2Ltdi.t+74%p9W42/!3RtIJ$JaHLq"XSY-`n4YX!)`l?h^!)7h6b?A?uBma/3),:_Z27@hO^U=r>m)A%X03hY8dDeJckI^!!_AsE]0knN1>flk=%g=X%qD'.4B,3u?q1IM3#KRVoIYcM4cC!A^(I[cQIAUCH$]Ss=[p&TCn,QDJJ0SrrdbgaXd`*_*_NGmW)f%m.D+?aScaF=u_\&HuJ%>tgAjh#gc3CW6AFO^DDneQST]IpbRVZ?D+p6qIN2a_B8a`hN5uNi/FZ%fCiEr_P`<Po2aUZA55WBD-7nC2j4:T9#uI1Gh:a6'.;f%B?_Qk^U&]nWprERam*4pR:97N@0Y%c:B-n;PZXOmA$?:I>9%:\X1jDO^3+`dR?_@^Zlbk(EQ>aWqT(&W%G3\+&qabT0j+1Ijm#@<%SK^6ooA[G\6*fp5,X!RI6T;GU&^8nR8C.2I>*moPGIlEWDN3^1oT'tR17Vs8h8\(,WB@JW]dneGPHcV=[GTNTm+Tm0Wb]_h(di/J%p1mIBBgTff6[/9C#P[M?k`tRo\_Or<=KV#aVfCnb??6CW/)BQW^@gnc8ldmJBmmP1$D_+HrK9B!BDGfdCA!UQjiU.qZHuCQ=7Xpf%GDsC4Q>b[TmCIB%O3h7RhKPH&7,#bR8NPsYQj$X]rF/*Yk&RD.A(18IYkg!:DU*@`5I0Oj%/h@.qaM)j.VKO)\2l",`7q\]gFhgT%>4%51J*HFahM3X2XCt5=5CHIN*He;^FS_:tCWhk^kg`6`O"CZpYqf6+1[=el8lO7s>:Q(IY)>U:M_2R2G]nE8daN>$V,sj?_TN/L%`VJ<)-$QWUXF?2eAiD/Q%K<-s97EY5F*XUR]&NOL1-^`]p#ABT@_240AI*Bu`(J6]C9Xd?j6W`2@c1n&fnKBB*KR_9\CFauAhoUu%$55l,SGdLaYn8eR\hQ_AkK;TCM2`A#[#k`[FtI9\l+R"i'j"SUPo46-jEiKs)Fcd%gs/n'.l2UR6oK\S`Y4[*P);t;;GauGp#Pts%7!@ZMSq4O)>[r2>npKlh\<!8qX-Z_K@;M_[VQW/Ee\4^;$HD502M`\9R3JgfK8>-,ODK=eRo3R.a_aR8"gn7a_O*;o)oCa6^F@.V%5-5^*r5iPI]pE$[Q+?fF9.-WI8^kdPj]J6(Blc2>k4]?^J]:0QKd9YaN`!^if"E#1e>T1a8)=IG]e`4G-u'CHP+Y[cl%ot%SJ2+G%e+_#sJDWG"#s`'P-->u6>F6Fc@V7TUp^=0V!O>%<eOit.]kUp!XnV1[X1pSlr?Ir8i>:%JdMl*PIBAd4BCP$6f0<aU((D#NA]QH0%0Nbk)4G-`/&!jcFC].K8p+:.O>U?N#?U9]paaLhmkg<58"?gps=5LYCd.;uh.ULfF9JG*c1>!i[?*e1eFtK'OhnF5?*?W!;U^n90%2r)ID+"O0h()T%%Uo1[ubAk-^LFP)_Zc1Kj9"#etmdnSMqgeZ"S>)'(0`E2!?eP^IA$L;`BWoN%"jGCkR7Re8Y?(@D.:LqYFYm%6%R$]O!lhtl(c4m-G)7rs?p.SM&TU'"(iOcHBS@p++)pI+kp[:dF3*Op?bZ!,V1[uWeP&<gZq;naMb"TWD?hlBeEk]p^1ujk,obA*i%GCA8LIon1s"t%=Q1'a[IQ;r;S8&o._3MTMFQCW_uVe>["XB<S[JBjE6G7R__:Ca[*-aGSC6C[`#rpB410!W3)'K2Dn263[ubh/Bq%2iV+#-5WgbS@/1'EE9`DrV<AOmMm]f+fc<"^->"GMo3"NI?m:_/.H7hcf'4M<3;C,;=:5hI_K1G4?:n=$q_R6'91H63%/Ss];_%E%]<GiMLHaC(HqEf(kN1][;sGWcM4[3N%29V.?EE3n>mm;U,m:ak'^\Fi[(LZ56d^qKALZ>@$To1_/k&G*8gnKW'Wl`L:13PN62V"Q%W,I[gHU!HUdBF<S6&]li@EYX8D,(#_/![H2X4As(C+m4rX!h0fi)XW`ZA##?+a.t;S11:*7k_DQ:uciTB,a@JbX;k'J6dd<4./Km%8`PFLZ]jG/KA9]URruFUKafWakI1hI+*,\6bEA:Bq\$J^A^GV?=jq7_,8(/?qdYQXU6IcOcF!9R/n["pg9?ZH3FuKWMRT9-.bTJ$%rPo8U@H5bd6CJ]K*n?ZR@p#jgjbBDMH63l9I&LOL`gT=H)%)jtI/ik8(,*n9_%n[\qp>D590"WUGk?Fd>RX4rT3.(Vc3-7cW#TRs%]s:T5rlEk+-Z#d/Sif+o>a\eiEC7\8`;o<2>Cme\6b`1b\P?it%-W-58KtSo?Qh:];K'Xhdl1)<d*mFf[V@?EGAit8^Wc+0l]dQS%NV/H!@_lT>9:3i]V'3M$EX;8.U$5a^Lr?@#<23'gLq_+[m?T3@jK+rC/u9C`TBF-(CanIeF`L[(R*'ZVm2><f23i)#c/2j\94b5k%W>giVD2X+5@P&I12eJki/8S4BGkL^VP;;jmbd2l7R2kF<bKn+J2Z%d/aSD.*Ltj=k]-T<ah_8<h=&niJCO,O<BsqUsk<N:lZM//#%k.#D#\$'VfO'dCo4FF]SOVL5b*'opWqF6I<j)I?_&TmmCL@Ja:MBh?K[!Dd.FN"i63RNFGa3ZCP7aNI/Jn)gIj]!]SkVT[e08?Vh%JkefDNYb'L?R\Ikj[KUf)+.IF6"eLBkV71u&TgSahj?-?`=[4/68Euu?#]uf4%Gk]W(;A?cZ41Xdb/.N:kfMYrf]Rcc7Yr_PSaYr%1i\V#8qdM=-Dinl;^NmT=n9>/S+?%+EQYc_ma"X&At2O.;jO%Rfl9V=qL1Xb6fCp%[q(9Q)=BP^f2G^IaBsf@BBfC1`6BS`N7#Pu%7Lb;*aDOn*jCA$?BAfHG2JKDWWaM>j>#Qn]Y0TnCgk,L=0pF1Z:3>mCf=bFCHRMsW%5JigYk458)h6`nen?RFlrDE?YLA-SY^F&D%GsYuE><->X!PrZ!p>YY/?4;!-IGg8D0sS7?N=sMZ!tQAZ=>F,IZt<0-&`JG3d0t^iNKEsq_G]n4k>")b7&5d\=mN^G9g3bBMW^XS%LhYnsfqV0:-WZ'H;fhPI('cPQ\_%J)4^'#"i=0G>Lm`ubP][d:1W^CBbXMnYU;Vo=`E!"P1ZH1S7Y+"A$-)L`IjjGM_o2'SP.dH-%UQs4P_ZtYa74U;&VM$@7KVfL[_!c]q#gpkWN>gj[5>3&(^A5G.r962Tj/'!g98]aGMTXlSjU96r0i&OL6k'hE2B^jg\.Q%p2e$K>%s05&;*H/ki_lpQodVs??g`@`A)e(&Yr>YibHZ7?7g?\p:jmo.<8ea"9i6^>h911sMDNCpd-'D0pe\L"CAETI2W`MuR$`FIdiapa6%+t/iC]FdGi4=GZ%i!cGW7^De^,1P\.\..5r!s^(<cTf9c$kA8F=t/KWJ0"38Ym.##840S.27MF6acXlXmU^;B2)BG&"7mMTCb\8$%*092il=tc9<&sPF$$kn3c=D)\Nma--nlWGBatiF](27?We2RnMhT<01ji,7$>8dj;e7XnP)IM`O.@N)P7A`&]DCCE:6'DMn]bZQj%Bp!\g93Yp\,\`>VF?,9'mFr6hR6b.omc0SCa(&=aKPgYS`#SSjhbLt>#eK0C%<$J^SVc7<*T&&nF.T\YY`k3C_U&K,Ju:.TRIU/m%-Xi.RkWHgP$U)'+LRR8ePR,P`i5he"]\G.khnL\%6e+8%=qpR]j`fbB)tn%._os6!Q*Q:%qs#TR%iqdr$tIe42r_MZ`_)!2btfO2%XNu#4c!SW4eI?kD=T>oK`RR[*#',GYS;c_rpo\-5a`O-11)4&\DZh)jHP:aq[)!rGS5#WO!]FF@P[ee_#8=YODdY\4AJh&NOlPCU%c<d3K8]S`.m%HI>4C!Gml3-/+`fEYB'+\/*>&^Qf3(Cqj7,4TuiL%sAiJ=0G);?hc&'))RTgL\0a2:n4,N@/C12]3ZZBCCg!/u^Q%3Z`1SW@s;K)k3lNHctb3Nu'>6'+'@%#cCB++Pd3lIA6r]Q@GVb7)[\CW=u>l=J_e@SreTJ.<Va]nHgk6A#dkMp*s:&+"i`BBZ.MR%1Gt)ui]DZ`KG1.>+^(pS5##t5NN[-:"'EkE!iCN,+nOt=0sYOZ.#,,#QZ>flrDRIojBX:"Nj0Kt?d,%h%*++]V/Zn]SA]9[<6faC%:mE4`iAc%*:cY@ol/K<mW1<FQIBHs2.*Q\g'f1J[Rk!uHJGuB]=>F3aX@ccs:h'p^a3=%,iTSpl8OfM)RTr8GVo_?&If2'bLfF9!%dR59WTpuEWUgbd:Le,L*-4uAtnS@6hJ^09^1FGl^f3,#GK0>OKg[M;nkM1hpZ3g,?2(uEJbD*m%>V%g;B?X13dlNBVC]?dN>i@j8%'+9LEFcn_--lghhq]/6T'ahur)=![eiBlKQASs%:/JO3OL8;NFMMC<M!rZqk)rUrj5##B44C2:KFo!H'^=0QS?<(+[TAnlQAj08(%nJhWd(=k"0Y*G/Y:=GO<O*J/W6J2,FE&)=[._;/eM>;/mbKF<(\[Q9=UJc;a%i8:pR0/Lq?_t@t1@!mQL<k9q*9)n8#?)`ueYe_-%V6d/!n"/32MsDHL9e@E95JTe,&#Z!?^'X;4I8%+.[Iin27kNud3gB!p7JiN4=e2sf_/=;t_/B.n(*@$$FXH#*m*7e4o*8+:@(3]<%`uhL+im-]$(-NK.IECRIWF33c?n\G+@+kmE8dDtV09!-iRe!f].c3SLlC92dVIQk<?>b*Rp!&H#8qheDGl<b)RL44bG&t$[;lTf_%l0D,@n+.ai][P?(@(/cZ[o.#5gNJ%!h9>Q_nTfS:?)+(@/ScZAdSBQ-m<#@+*aq##FZMM))rS]0T'e^4bpdP^-*!R9;R7J45$Sf"%Pj.n=>@l5Gg3YPcH:$bilo^eDo-eYGF.XST2D4&rS4g-9ik*\E]A08/f_m2,BfC=dSgph:,KA-dkF.r><g+0b=M6?$Wjtfe`(PBH%ab5Q5hNO^_XsWh)>aBL]pSGM'0?KKL]%KTkq-4ZIM`1(DOd'51R#f>YEAEF2H=_q'j@]0m]F[*`*r(t0IR4"^mbt]N'%YI)7LaI:%/C>`;Q@n%T.mHdOmqYsfP*[K$h-EO,VTW]tMb'C81gSC_9fSRo9,c')Mf[B]\u`(-h5W2Q1gO-5?1*""aO,)s76Z_O9uj+[Yr7YQ%[Eaf0b>LOV8tJj9h*<XWM+#hSETG52e!71ANuq)_'h_&FR:nE_JT&j;UZqWAcc&pnSG5Y&FBSMd\Q<3Kd<&Ne2=jdhXCsYi8MZTl%=[shR9pZSf-_`UJ),6GTJ#9&d'%(f(Z#k8prf%sn2t@:D:sjA2i[ZAf9pZSf2u\UBGWTQJ&M"krQT\fANi'u\7M1l7P0nAS"]T(\%*DMm.\$^@#;UKShZ#g..;</HH+IXp`!0b8n,+:,7Q7i-uj7q#D=g<(ghOd=q>up_pc7Ll`__IY_R(D8'm*OtDFK$T9"`Uu-<)Wg&%l1P;LbcPN8(oG>Za[!GMB.@t4N&%5fSO%0oVM7>8[57V^?)D]uepDOB&!W?-2du3&F[\$#ls+@>d&WG.a6?ZoI1Nhb-bjGLhk=UU%.e'nunPifI-40.$i^[\*N`5phcFi8?@%7G85+C6$IL61:$:Z/+k3XA\j7mq'lU*/q/Ys'Pq]D(XKB5:<2j?8NaNrXQ`4tq/F>oFK%U<tjobhY7eMt53LM5Yt+&)E4RN"OCkNU<?ClC#7VW<gC]T=Mj@R0Gis=7S-$r+GHG/%Ll\im?$,%<4$@n:g*=(B`\Nmj8f_EW7X+%=d0^Q=sBVfjhh41H/=hW`>B<]3(72po<lRu0B:Gb)&u1+[L<*5]7+'Hg;",W8h9WI#*)G<ipIO>fMk8d>ed"lDps]kkR:%^eMta"%l>5+g/h_&\*n_KiAH#/G6W*LU\:3][q)J*16c])`+SJ2A02^$!0st03:Jf?hDnCm)qY/kqmj&DCct'sSM3A7IQ'qm1)WpktCO`et%S0aF2qtf-Sb/IElQLM,_Vn'_spSE^Ocb4tC;FARVa9D1Kf<c(]EW;.R@RCAUj@2AI*qrtE%*4mm$\h08I)5;c`!ZWEHiLT=p-[C&%lrmF4_m"%f@6)411A&<^601caSoZ''HhOE"'KiL/po7@!DaW/""o@s!-bLRKol!45`f2@/0<sZREAqE9=,o8dHq;Ct_\$4bbC-j'%^2Z(Yl]a'XN?@suk(UEF0BJ06:S_=>)g`M>^2Q$l96hbrE0p+;N:FpD:k^V?cm3ph?F]<Nmr]h7(?D9cVdX[.#/]2HOE<):%(^Ws%$S)r">:AV^4$OGANNKe-BX]a,08>L7*&b#ZZ1Xs:)*bA!;bFICIj]5T3TVonb,:Pt$L`Zf/r0gPSkM5tN#1BCiEEQWIMYMn%'8MJ%4R3^$<t5h^,U:0\%:Z%DbDcchcSs_jV7+j/r@6bY=Mbp`gN?e:=-e)alX]c5VHgh*XAeC*]&Fj0Q+7h'ffZu5>`:0iWA'-bh)AXq%`q@"5`0IPn_6?g$`c^t8iZW6*%![gcoA-nGr9VX&110?e@pG_3_Q0XE).l^(lZm^Lk8s4bCfL":s%K$7;GdN@`42BSZFj/dF/_Wo%>S5Z56!<.=rdF%G^WW]Sc9].ukr?As1.^kNI#>1WL\T3]WJ+sO/V`r#;/BUaXiHKjNr10Q4Sb<URb$`W1EF1oc$.e]3@f*p1O"nO%<+^0gn2_(EC.iqkR*XPNG:rJoS4gPt#P2CmM1%"6rVLHp<bcLNgc``\Znh6kIXBYiMuC79HA?A1J5p?=VKJed[9,O2mRgu>?iG=u%S+JQQ%l^+&KEoEl,6,VBR/P:^b)?3+VB:<#Fh[#BiI*56L[08@S=GK8gKOMpS6P5oCG,OM(PGl5XgBhce^eASqqC9U]q!6IFR&P.%V*e`f>Ht3"rfY`,R@.FZHuW@7jo"k.gUi%$K'>MW2bs'El/ZQ1Oja7Uf:?H9(q9,09hOVK(7D_f51[:?cq0?EIf?'E?*9aNPZBS8%K>+F"\P8+XMV8!qAr_]sdmEU^=6BOg5+HCgIZm%P2=FB^2;2fOpbn`70=.aHE378?kGC)M0C-Nd<oo@*.HHL(Q1d%9\Jd@UD8:K'%rTbo5.'iMS@70g((%s<PI@#?M_4hLMTtIb*8\%]gcN^tUQYk/SmE9&6bHlT:eg/,8h`KC7=7cCOlMJRt2Wjor;`5tA*UW*#qX(3.%UQIIK*Z+.j1R56QnA[jkGts\qFf@*Ih6QEO6eTL6$?2dcCX_SRUB&?B/7T)rqSLNAhpHHH1ZXg\q0&-b>X,?Rp9As3lJ);HpRgiC%4+@I&EQ_1G`oc?(jE(&mEK_lK:VG.&39k'V)0\Ba?klq$?c$??ZDh)!pIJ`:B4]Kq`fXQ?\$XqVH-=l[ca""EgZV)7EhS!cmPu+6%`p.r=HOfURML1S&dZDned3R2r=VM,i3H@D6TLnTB$frX*l!eGdX#HkB3BLAP3[r<_Lr'?bGO_D`,8V%Pn.hKlmD=.b_?R4>ZCNNY%b>Z-Z5pr!dNS)&@FG:[<Jq15BE8b'd0L#cg33aAn,:X?/R+t%a;A<Nl(r-1#pjabX4YXi0JA^$'7t4Ah=ihmW!?,f'L]Qjl`@Pq$%`d(E7M%q$[$BQuo_AL)&.%B#N)!==NUAQ6+!G6F%1MeIH7kPGYQm%k;Ab?DlYuKYt5O^(nIZa#iI$ChU$9,Lcq/WTV'7H+K;OV8-%La=Sd:\mj"s+s8AbkI;"WCQbVgnco[8,3Aa^ea/k5'jta]f3s+HtJRGRCcPIjO^+hK0k1uhXrDME_G0s<U*l)_3%udGh5_ZE_Yt>%W9ea,L@hnpnQioh=8bV")_0lR^Z#`7gL,edf.V36-?;$ZJ(LmVc"*L1E63>&MLD<<[2eL<^I!MMh'Chn_fu%`fp'W/pr2^u(&Kd)%^=K?[^[#NU/cCdc#^4D8GQ!ENB@cAWUV,oZ'm2G9&(T1AI`388.)'^GO+/E0M%^7]b'hfYnGAL4hXrDUFlfCH`d&UJp"$q"n+pV'%967^"U,a-)V&nbKnK)'%=Q&1?r?h.XhgjY2ddQ]8Gh9./'H&\^p:GccPL@j(g!k';GQ!\qPPM4cq@95sht8K0:D*<*n_a"L]IRJ?%e\$k<Y$^_"IO\f?gir^=W)T)H5!i6&J3IVf&_XJOnF-2g^Zmb/]he+nPrYrfs'<D!;Y5<`j2X=D^ZmcUH[MSNcCL!Xk^V3&oXG-S%1NW71h8@8r'Yiq"YJ1M?Y2B"OBk?/o.i.<3LnQQ\oeY?feeUc;`\ZNF)dXF)j^#Wk;NBLACTmYA^Z&-`]Z2tR2GBB&CM\M)XDBR^%ri:Jmh5HP-Y2;S)X+(!p,DErL\aTA(*L/O^kDS#oIX.(K_nPG</2IaJ[Ai6!I\ko].hRP@jrM,tCY#`YnVq.sm!Fe3loV=)?M/A5%NGnH5rA%-59&,t$m(7_cFtI9V+89'UXI,mo/iMk(I]6)>eFniJY"!`hY?5YF9^#csimURZ@Um+;B?XoDX+!K`AId\AI+N:9n%mu>%od^ddKpFRp]7*2#iHZ5fH7/6choil<rCF8^^q5'7-T360:Z,Nn_?2TQY+<YGIP2(9oeXpW7Xs#CcdJ5*F3A7cqW0XBh=>Voq]5[`%f2gch,@N#c-*t^F1CUe3eG=HtZCEi?!g_]eVN2o9S*,$g$<o@<ds]An"d?:-VY*5r?@FH\nNig%JKtAun`XjbNi+@#Aije1FZM0?%?G0\54b*@KN]nICZS*E&;\G%d_H<DIrC1F7k3KmJ.5V3&c$nRL2-#"nqp!!aQ[e"KkKc>`/f\2'\#kXLhojTjn"gb7oA,1ECU8Fh%\$eK=93-IRpWTYprk,W3DHafVKD08"*U[/Q>=[LV5HSFrLV*-Pqhk^Fe'dcVom-(@hYMEpB[?PSrT'l!p<i815MVH*lc8n5&"QI.%A%C(eg4%UuYj[T6%qj9pG;ai#!l;nu7X!'0?!V:8D=>J/?QXdpHo^llaiqm+j65/*8:<;k#?u,=r48JFoI+&&SX[?-cKofGPJ-SF%-gT*NW_gL1LW+UYpBOEL#^^p)H$D;Y4`4O*[boB++ECfR5V8ZEh(Anreu+g7:HeCSUjP[OAMn,)<]h4ZLHj@NkMPGaS_^,rgn%t,%hYbL4F*I>c[CQ-Oe_9rSHu!TdmG<#a^B`p=]/h8(Hhh;aiC1-N`EM+\S&1Q2&(\a?GXg$W=j)/o`RJeRgIK5rnqAuGX6m$jCRY,G%,D!2kA8;,>XuEbq4F<#!\*HtRf;%H,`VJ,h&UQUInDVc4AHi6TGOa._WMMQA`RNoEPO5?IJ#8pCNB`P1e)L0sB*%8ZA,GMZrG:l$%Z#!pRc<``9:N^>k2E.0#&c?cjD_GF'^4a7]s%#5d[=%qO7_.?qnSQUXk%`*3'8b_=r9JRm.HK0R(\R`srNh#=(Z`o-\L%0a,_+B.%=TD9LhF@,5:Q2^V44]nUG.me8h5='+J-tpXg!H)E]`,]nnFFO"qp9T#p-O10>LFU`e^$ahkQBE,EbAO)!nlo1NQSS?-Qg(?K[&:S%b?HWkC5gcW[C4.?YaW%EC;_V=T)pP?\cChccTC$q^E;C_8"4t=YE#L<kPf7&p)/^CJ8HoJP,BF4[oS?S+<c\oQI[9'7scqpqg6M"%=^E@[q<'I47o\hR0fdGS?ejc;#M1Th5(qmeIQi`u(SHB6XgNO[f)tV3ea`eh55;dt^>*u4AEEB"p1X'nLA.1>A/1-8Fn1)6Y#u!A%:-DX"Z_5rMTp;#Y`@;3f`Ql5X5/bk"k3L^OiVLiRI&7PQG@IV<I-<,_0?u[rc>E%:3:f(Ae!1eSC65CQ-%jS&$gi=[#mY5X"us8J%T1@)3"lQQtb<E,ubemdpCa&a0T7;&k`]F[Sg3LT4^CmT!jFM*:l+q]*"<cBi6P+e2pt&aJk8!?3U'$='me=!n5l1H7jX8]g3N5dS%M3cuMCH\N-#gE##.J4aWH#N3OEq-<2Dc%,7X%s[oc*R4!mr7%5E')C&LGiAmCNORQIO]QNrFjke?i%&.48QpjRLS'L+>*Z&<^ZE<%7-N(gc[6oaqjYd^`Y"jPC@U8g:hp1,X>bo$I*K6iRp/beG_N^`B5`0)H*4C'MmUL$;5X-`#Ct&;,7rbDkLZanO7"pn`VVN.rU'3b%eP?]@obLI27)9(Q!,:N^!mR0Z_Fmc69!EVV?bX&%m[iWBoKpa_X*o//V<(p\LJmA>ji8=tl$[*Y[_!W?CC"V@FI)uc*^oQHc0-0X%[tIKKk.4+bqgAWm:Ub)qp7#9^@l&>pS^*/e;pNNVpj'S!A8@?OS@SFEeH2@Nr\LU9f2Vjr-[c0"0#*`N*u/4&So!)+La9NWEB6U*%Fnt=ad0B-?jf?@cQc,d9G5Oj=Vk)qM]t4IBnakp.BVi;DNd'CFGVQ#Xe8+SpZXWRQTA=rq4F[845>5_&>jThG&06)lnJ^YmHGfMN%a#sZ2]!)Lh`PW4u7Lc1io5h+Lgus;$7tSk[ccK`'?d-,-k1.NWduVD-o=Lt,O*1(."i,s)IHMVC?#+F#h.O0Ck4qt\2bn&(U4Dq)%JUW;5rQOq41@\>^%sA\@'`GtVfjB:BG["WFqA^DbX6K&4Utnja1(gG['-V7,0:I^H1fS'b'7huU?53KuM")O/6PWI&b+2+gE1Wr\%+BEN3/,G.-+"[oY#&^h<_.mu&DQMBSZA,Y?;na3Hh.=e7J(bjmraO[+)_lCWg5B`&$`-IkLSu@:m#?qbL$X^d:u<Y+Sl]Br6mqAu%a#g`2C28/r=,!FALVI>1Dls#,=,m&nl]a3^meRHn-hoU(X]'RZJ\RCCeELAd?FUL87Zu6h8iV<MVr^=FA`NPrS&@8D^,IpkZ&+eK%!L3.ID[uYberr5QYKa)^loF&T;Sqrkig"aYj3BgXC\gW.jd-H3CR&m\3FV$8(9HlAfjBROnSXqJLjP-B_ZKj7?YIjm)R4KZr6tDE%Q/l*1+7@`5P7KSK!2GO"a6lld*R1.U`4Hl*aZa!V(WiQn;064-Y:ZFeD(fbcg=Wf)OKl9%IDha"GhM8H$TPF6(.FDKj)@H?q,+d:%G(\r*$_6u&b9S1_buZtdC`d2mbn!<DXNQ:gmBb)sOM^.H4P[)p93c^ip%fQWnuOV,^,kV/>eR+B5(0cpr)mBV[ki0""bstWABcsC%AK?9&3qM*qc`,PrTp;&9MZ$A$OVGFmp\#]<[_@0M0&IX24MKPEI'ITus(oE4SSo%r?V=8`oXgS`n/`O%oiGR#:#.1j836&Yeo9An%>#lU#'9mqE%Jf074#qT\5EV2d`kPdKQOr49cht%:A.k!/Q@Dk%-3:Y4o+-c#K[G2as.kJKIpQ0m..V/&2=dLRrj2OmiMP/YlWd_%%h,P7AcRR+VG&7'>m\7DJBseFTs6d"uRh*!1]3]WV]):\uD.b6ef3?Mn7B="54<DTQTSC;.?&dVfp`/(<I_PGaZQ4L8Xc%XL?K5qh%k4n]HlAtZ]hRm"(ZbJYMAKOG.dh`N6YU.l/^O@E-R:22"oQjmE)/if!:Odc>=T<*+^1<#g,^Ren+9"P>f/B(8Au6?i0"t"23h$@Q%F5(!a$Nd4m+qcAXC%as"=5-8Eg&d,Y08#\#L\8u_XV5IDg:+2F-c,6)`?VZf^0^56!"mnCVm#hR5.u-S5Pn^#HO7ALq>+\bQoZU/%H746,bDg1A-H2$d\Im@I.=RN)N<H#F&3n>!7TdjPpe`Y&!b#b_r$[mNa^(;_YZZp[$nFq)U/ZE'U(YXhTb9JD$P4P'Tj/Y7NQ:%7%7A%:V0t)M9.u2dN/)U'SEuU`PhnNHf^Zk(e!=6+a1TMHqmBD)p-ZhdpqcRVbIM9thbu/[o^FaZfagEfNds7ps&77TSImQUqk_h<"%lUkq3Cj&].V2<[qk"2-EWV\RP>Zjmn@XBhtNN\H((h[No7RtE7[T"KSAoE+$@E?ghEpiP^5S)?WH,:g@fVrp/Jc*Pp[-iAg]2u4I%e2`[dqG-H*cnB-Cn(7?k^O3;fpg;j_r:>-918mG<Msk[^OFigsD5*!\i_hotn]F[A?CPDk$:cobAJp<FQoe.Y;3lchSdh9iM($P4%6q6m,RY\6X6nnKO2A'NbR9ZS\N/8t+5\-<e-=J+@1(]9EK1VMfZ4'.\(iPQaU+?D/14W-F7$Q5Vb"P)5,FO@n$q+WpS>_8mCFH#F%B7_J)XC[1lS]R=VZ4'.D3&N]0d6`S=Lh;.2-DE&R>WJJWZQ_DC()&S<AVoK5R7Wm(Z:&`%Q\h/eZ:&_ZBR-=!U+?>6?^(?4M<&Ab%r1=SCBjN,o(s3T8aXj6ZFWB!e<,<>e-herr(b.EOM9r$f%7A*H+_bI/dkLEq15!$-Z]2R)DYL-SbQ)\1l93p4!rm)EFa8+2DuAGV%<:$X[T*>84J&Ad24&OPuIJDbG>!K47;;/$5?`i3cB$Q_"FF*7Sc/)ItY0m'W\q8;Nqte^cH?H&6d[ibYB@T"UNHGH)iR9n-S'I[\%B,.KD#6',CYK?tFB<Pdp!j',u_Z*!$H<mddHQ^SjnDc+unJe-N<P@\plBcEio`DILX>j'^oA_g/HG3[k!^EjEEm1T[?5-E*'dq!c%h)m(m"5eX'RN&aj#-h*b?/Mf2JQ7VF!$]#jq12%-i]-Y4CDA49COmFZJGHV"pH1"KGAFYU6W'F\F)3d)/;-o<.*M3t5mZ?JMYpZ=%7>M,T3/Bt^?9fCGRc>#))hfS`JW2N6m?F0EB+.2Ane2Xj[5_&e!ur;7q!an8XL]1+GiUi7`/l;I+K5+%6c/sWEi[HBCKi[RFWK<&%Ru6OIT0BW:FkUuuRcfI#3X8mIg3sKG&G<S1*C*Y-Z`Vm/?,e5D!DEK:fsd[MFL0Sl.n>l73]CD/q*[lqW];4TOW)Hc20:=N=eJ<C%l1M$N=DHn"U=!:\@op?IB\P78VGjg;-`"Jr?3gWNGYh=P@qVnL3f>!d?u?%u#WK%.:mDhX[D7>&in?[MYT0SroP5ML!'ikJW#&So%/+Pi:2.<ZT&dBQr:b"D_TabF8ZU6)e`/A%$4BrrAkL4s:[E/$>nA'oLU;4/j)ltn9H:8:!,NrG>r=!)_1hAJJ#seQ4JjX>.3+2fs%:^OK87mFAS>0i!#j!^]E]/@d@>WmE+N"O%j"GPH:=J8_:b(]8>EFtU(3&mO,Sd/amM!)>r6MY/oKNU"SYnc1VCCCu`D*+s7TI6EB%m>.HS&I]tgI0U#&K:NXo0oe&-,8bG<Af.'eV!S.&[j!OG^28R(#KG3dE)hT5DCd1B#2HIn*3KRu&N5NTW.k+'^_Q(PPfSi'?NCem%ck8abE!?#l'2h#a<\#<:G<N#[JA1'dL\\d2J:J@Wja\e%*RCEqcmIrtc$b8E@;XP"2tEmt@0Ettn4+Hb3>!fP)s.dB^JbM'=OA2V%'0Gn3g/^,59_dtlR^OC[F!)__%(-UE*dFqkm@V'L+q\QPEUX#PqFDm]W(0.up-Lon?>RNG+Q`q\6pGY8.<TT?*-4^mf_;nAP@e4&%W"6^lCR(^k0P/UL^RB6U.tj=qX*PU,R&n(9/&?iYK+e7f)-O1@`**F/(Io?a_F3Du`ip1k/j`>B]B/p!.8ZEl3NtkUa!F%`KZFU1%/HqL]\!)gKg52Ka0bFcuk+,[N'1NZM0Gc/L,#R\0KQo[57PWI<)_=P&"sbB"*MPtf+%&nrK@sW==gj(h!S)@TK#,=?qU[L"O6Ab9%""d6;0;*n?:+E>B#8eJWK\[9f8k(-=i7`3d5f4SH8\tH4"r<18;1s>P'"Gpn6c?6=T2r')Pa`4'`fEUFFaY/k+L]!+;qVr16ktj:%a3(&lTr]f&m=84TYTR"b,ZpL3>AT-F_GTeIgpbp7bCb)$,f?LU&R,b&'"IjF5m-bF!4qCh+l<qked-->9@'knmo#3@/;EPk(U8VB%"NJeR-m)gq2@ctS)p@,.?KKq1UA5R&<o;:=NL#(XL2n<('.DKn:n60^Ln0:9=_Ou_L?&WZ$K)AVHQqk&6n$qr7:TM/5b@4"../e*%,$'Yo"G@=Z6R%?pa[=Vo7b.K]2.^QSL,5MrZkfT[/26:hBH%G%%YFLeCC()/bd'Rrapdm'Zj7"OfsDc.A`Br+6jd=cdC]Mt$'pPb%Z;-!G&.gc)65mWuin/kZ_AFDbooQCFM'u_60$Q1[:./>ML>I4WV#o*3&/'[B+$e<2=QBkF+I)6GZ(m+/)s'"hi[Ajk!M`):!73s&%2MiAtTbI]](P\)EO:^C%BU40p&X1,("ZEe;J2msGd9A$R6,=%aJOo/6>c]jU0<iDPi-^(!+lle`nHECI=u)GO_i["5;NsS.Ql`O]%>2)"]7/@Jb!fk?LbmM?r9S(tEF,:b+$!;%4oU_LGUaQRug2is+#qFs?Yq(/=8.()l1sROhIK>"u'?2F'!Hk^gUa\PQELLjZ@ZUU]%WfRi?NF@dO+A*P=C&u7AedmRQ'+3DB?XSX7j$A)=TE+-]*&0N#"Tq?%*EY?.J4q(dLD1R:KDjm;C']Gj`O,tgF%Bbs"$`OV/]rh]%#Hh0F-#Vs<Dua?^@TGjO('lI(,dB2,50CSfZrkC0qW=uLP,TNQ:PE0c'+1PX7r?HPg"LSBF;J!a12u!e>tc),OVWs*aJGgF6p?oT%iS$]IP9ZdedE^]Qm,6$/?q>ee$A>3s5[`(]NARn(Q2iEGAX4b8&[A/LV%Cl1#`5.L!j[i]U^Md"M1XB]$(888S#HOU_1Ff%(^<;h%:?GIl#S!Lh:gcEAItl%,'[7m3PU#rJ,c\d;)q]rI=?]U_5_&q@)M+VFPYP&M:fs9m#c1Un'+nK@M"ks.$'7T4Z3X*l>3D92Z2qBa%7WoB"8U$<5E^WV_a!0$5#mm>V%l/#RclMm\5^fllq1O;_kW*Y(jqNouN?_rq4j_U3a@HIj+#ku.$"bVe$W5H0;f>Xukp]Xt@#'r#%-@^nZ6hro#lXXN_U8M1'DN%i@UTL"n8/`[L%nINs/V(V`%lf/=X"UO*=G6SY&Kh;[#somZSn(b+,5Oi6,>/1AMA(kH@:5#@6I)QZ%bLI0F>VZ`o$3@P=PlifZq(eSB%C!VY*A`rgA;("o=<*.Y``5RXJ$hHbV)%?O.h*/.`PSt`D2K@J@Y'=CJII[.7L9XaG&ET4)Ms8E%)'TAZ0On%]S/_Q=k]'!_[`/MAdErG`Z>eAX(FjW;p0q,:Lkpo<LueD7(;iI@>*KBV/)hc^U50V2jug/"ra[LGj-\(=:f*fAk,\Y.%(3>_9!lPONd6t%1co*?UbdK[d9P'p[9a(P(j[^r/W1PqN<JotdZEUUS#m0ZOn^+ZPc?'.NmHG3<1=q/YTKBrR4V&HPWtAG7&aIEN%,q(Z'1`H\KG@b=mJYr7:&7elmBTe)JMc$aq<boVePR$eObX3\p("/Gg'IWE:1lFMhH9cXCL1oG\0gS'QPYsO)6H$;acQHoRG2MDo%$sF4^17o\KI[hUJO:Ocr'`<&&5Wgu7j:[Tr$#QG$[#qr6Oc%(NO0tK&MEu2TCa<[ojLU;A-30"%/W<sJ_Ej71/lH<neqP[kH\,j6%>Xq&L4IY<OnjABnBk<sQWtTcPgm2X@+@;_5?][q)-8D#QOOXKK9e_e`OM$+:(e[,W+GQg4k#cFC`?a!YE]>uZ\n3WjbQl9CR?VhD%==^)i`?&",e1+!kA0eTF9*J;7oaM[n$BK*t7imfrO%X8mMek.9=t!J#$;M/@Jf/1t-ngJ6aOmQkNM8IJo][AIpU1i?EL2<`&:mq6%Vudl*@%X3.,k*+b,:tDS5\tBCH(gp>Lh<V+'6FWL*4D2#/2U1EHA;ickAmSYqBhZjZ+_n[hAW-=%!`&cdu#Rr-pMU&6NK=YC&*A/%)H\Wc#4_tsU4e,j$.9BX@32ffKjZ(>B^EOpWSe<N,U#?#(*!@DWU`X)'%Vk"_\/]%G0sF_@NTlQ"uK9<=PtAV6JH4uLCLX&1kbC-%$`$5G87fDR\-9VRHsoD(>Uf0\)$*C,ZoVKU,IMJsT0no.,8'-T2WICLT`G_X,c9-&*Yl1EQ__SF(JbS^9Hc\M#RQfeg]U2>Td(<Q%&c^2X>bPJ\q@cQl$oAju*g]g1]=)J^ZS3dokLHP^!0Q]LWB+37I+P#"0]\fA4$46kfTBap7nR?+eed;bB)DmXJ^CZQ1&r54"JeOZ%q\A7V+X35!Km"JO58MCVBL0\QTV+a9]=!TgO7^8kY4JJ15YFA9^,7Ve9qU&C-h;tI7j]AF!?G/dLtJJ_9=:]tcoTd!6`*[o"EqC-%=G+JH2';q8JmpBFl7oI80FTgjeNs3d3J]GUCcJDZQK)oeD99ZEe(8._#[',4BOeh@K2Y&`D(m6>`iY%6Ku@pn3u49MTOcq(nIYMq%bn+PuN:o3PogC8pCmV"6[M[`-&-5fDBLLqQUG+T),mXqml:!m?Sh*O)%#Sje9O3S(@Oku<WR@N6ButtRBU0bbT+f:K8Q([V$PAKq%Kg]ej^K4u*Bioo-$;L_N$3^U#.+'M$it,Af"G]P[b\*bNKd]sJi1ZNqF@%-19ko/nbRq]1QK6tT/CBfO"DLZ1]a9;`Ku.BG;T6EP%@^.._1pX>?J,ttc)Q1R^!l@><cc+"enR+-cZfq]O-k_Z+&CMn:WT_i6(D@"=X9hZ`N#BFeDUSV@rom9<(bX-u<8?I7)P34=TdcXg%.!tPR@A(b/bE(b*,X;Z013A+e!dkVTYag6"BsQmM4/8cTL`"HHSB*C3+Vrca1OMKL*G#QkH^5mK`9!@?I,RUbL:I>?dSC0o+N_49%H!)UmX@l9\;#kdM0SfJni7JV1:i-YiUEhu"k/&,#$Yup4E"O-'A[2sXLa,O-j-VNMTc+tFbD\-)Bgg]D'ZSC)*$b%k#6`9tNLSV=%RMCuMOUj/3(LgnW9JAg&Hm5hE)2PYK,oEt;0hgjX6i\HD#3(0'G7G567j)d'X:t4"9lh[^&TAs?efI<9Rd!th(9-Ds,Gn2#+r)L3%NpZD#co&Uqc2)D14eJXhq$`\ib<Vj8beW9N5RVD-[`D<<OCZoUN*4"SVCZ.XH5)+f&>XkFB]fqp_%>OV+8u`Qd8!(q`9=FlV$b.Q%9S?#S:1-XtLD2mc$(rH*V8BLACgIa5KPf<&U1+i+1p@0nRp!Q9,aNM>5Y:_#8l^$g[WW<G(rHtJ(rN-iN"BUm@_5-7_(`.JD9<3_%\"^0[EC;5D)UVS>NG0nFJgFGOfRhP+W2sAFd0^-!KG=n,Tr'3S4`51;?F^7?=>G:['qV*eCm'pH9$p.E*6=P#397%YajG6&0O)\K%QIH-@>%lPZ&[A,p<2^cTM,b>e;]*@c&(3LAJhTPo+/`S&0Lr6"#BbJ'O,V2@7t*c36UZamJ69aO>mh/I@u[-%d?`W!3Yda'e?j<h%/tT"e[RPpA<u`Y9WR)i-UN#;h_TRo^2MqmI[$V40cUiOaOZ\k':t;g:k96fDD5-)TV%@)('Wof_*'@\sq<4Kg`WP,Z\*+gU]W77S%@9%uXZ(r(((b&Q]alr:PjI4+]&\hW1d3LIraG\HSki/S2CgHD\0h9UMi!J_Q_AmYkZ\6A)JuKW=5L9MMF$`hG4TgLG+ds\gb66$J%i!UaBCmmu28g`1[fd-(N4:kfMW4<PYK,M^"2*l@M,7_'u:OR57'?gPVJJ?8G-K3&m1`*M$:RnkeaW;&UB]Pm(-Lt/j+[X@+,T"Yb%-ON"C/@1#(3O.t5X\L*iJ0%G[S(tjDm%.7e/Sm+s.'XOg;IIP>qnh.IUAG-UFsW^J)ks4/O.k_]g7Ua1"YH$0&0N'c@MFKGm7//c%V4_3dM&?PZJHB#]BL!7Z8c[7W;Fg5S)rT;"/q=^URg=.8PTqon8m-!R!0Hcr&KC\jK\]O88.iO;fIa4UD+@!m\U<-sICS]I,#>en%Wbpe,dcFGH:e_Bu)A&V@fVlt_Vm!n;bEaO<4I)$,P(F<3Dc2UP>tX:;-rd/H^d`o&lPo0-6eC:!:c?[>`5sHs9jNDN!>='p_[4@W%h\(\*";,6EZBH-)8Bug0/l)O"H);!@LtiHG_3VD1eKhn^3^L!E6<Y5"7:o_FlZ,A$0RVgQ/kV0_\g2s#4F.:(88N)m_NrZ%Lb2)I%8?m`EdF4I$FC2VdEe#un5$(ilC_1LA(J^RD>U>q6eqK/;3bj6qM(?n!F=F@LD=G,AWCZ8QY_X;M)e!#^QlH*%qIuU0%XQb^"P,HA%l\]:$QnT'JXs,/Uq?Vok.&^BESLm52?(LUYXV9hA9gqt<"a$,c-Bpb/$Qj&M+MRt[lR+`M_$nb<(/^M;U_7*(#>B@n.a1.e46CZF%B\f$<bK3@8<khFC,(PC2Ob<uGfWL&j!Hp`i'8IM==coq9LE,pu$Z4DOD*2^5SYT.0/bMG(Y(=!>/kQ/$W%g?;U[`q/8?`Y2>I$f)%A!<IF0MNWQKlLcs89i(.7MqEuqFYWg\tiGSDDMS*Yh0:BKa?%1j^oa+PB0F%9D%QD!^@>)KO^.C0>W%.jqla.I`fSb/JOCkb>E$d%oH6C"':i)CjM7oX2aB<'=((*DK8:>:RjoO+fE^t86ikH7*gp^dng`/.\3b:&,^,tH*#P7,M1n9C5TF#o>.L/4ZL/p%'7I.5q2PPC%U^@_?.ZDHZcnW[5VPI`.%M5l[G(#2nZf2;=e3IDPbkV]E$Au?D(&5XdV,p8#e<H&rQ4s,bHTi7U"*DBhq/RZTouK"k6`VDtn*,qR%Q\D3WU]Iok(ac%.[.K8.W"r=)iWg%",?l5N=KrhoiLk`SLLa4PQ5?!udA2\A"A5:>cR=H.NtV9SKNTSQ=lQq<E2:#`JA@%P'6+'s%)CHBK<r/T:0u^_3@`[(eb;:29oNbsa$R?D.&KoDs.Y'.4Jp&N@e>cT/.8\knRX*jPHH>.g3dZ&[%Z!UL+?&LW8-i#Q#F;!=aSq*F%#q"!`D!@.`7k$_dYsZJ:]u22dY;6UL_*rJjkt<dUb!3d0eOgZFd;sm">UL(V\k^2pGALX00M%?uhEcgTUC9P-7ZGMYS]EXVeu!.C%3O=HRW_KS"('T\O\?i#/T.iYW/!bX"k^nd(ldB)a&Th,F:8+1(6n1<PM0VBtK477W5PI-nNU!/MJNUohX_%PeA6r9SV^.X>],oKl%?INGC+pW1KTS&-hb>o6F#6-BS@(-8+gB&9Q.+T]1-7;X1(]Yb46^sW6jHW@<MO*9"2\)iZh\&?L=1J=Q7"I>;A-Me_hhVgU7Gu+M%cVpM`2/me3XpEZ8W^B"'-o=kRnfZ8A;5cAalG(Oj0QH)H@17_I8./qC!-BK\PPbPU#/&59ghDm<eQE_M^o!,8de%?`@MQDqA="j3%o]d0,g(p8f[+SnLXh^/FJ4*gF)G8<c:^P/T!,NNC,GGWfe$)dX6Lp[uGZNakq(U_Rn9HK#/Dgt36rIr_Tlc"iH3Q^P%1L&QX"]f7%C;eV11n#WJ"Lc5EV\%)8?soUBVNM$-784as&O!'(aG3%bTdc'IAs(\YOqYAS8leR6jFAW%ef+*n=4A+>SAc;`=ABEC;@Pk[a=ktt%=F*geF]+>/G7dE]da19G5*k5D7$%L5B%C[ZhkV6thkZUC*1kph^52\X'HE"uTh&=_(<PA_lla_=^nsf2.5i%MHc*[D/<?e#fQV@J%8M"B^MC+1&Nd.N*15:T.O:VIobfb0+HjnfWW"!;oEgG=V4::f4jf%'nPX(=<gf!=Q@d"r#&0'X;d5`S;&r7G=P_34<'Sul$H1_;L%,Y;Z]LfbZAQ[h>IEb2>X`\>ifj[CWQ+1At-*Ms7$mb/N4SRC*:^uH1g"-M"T_k\i@#R+<UbSA<Us*C3klD[ES@@2Xb1Xe*S\;8DZ%Z7f[,+H7Hu(!sRCMqY\V![RBM^19n+<"b>,0bA%V@@/^bRh5*7ZopC_#]r@c_L`Cg:n]:t;Q6J_.+Jio-4gDO+s6;KLWrk5b6Us1%*"6GsO`H]"a,seeMGb^V(k?pjr[lC54AV]ZECd<g/0Ks9>9do$>ipcc%n]tG;bCqa@#-LT4UnXfI?-$(N5r:Vf:7!u&;-(B!n"ih%@pTel=qKEMZpuN(q`GT_ou]]s.\6p]O/"0\,s*AS.$KQ0;t)T"4-h.[BIb6ZU4<o?8LJYCDids]a<DRp:;mfB;M*!dGWp6g;WjDc%LF<]POIg`XW,8OhQB-VuPC^Phb:#%Y<!Vk([>_d6TakcPUkXRt(Wf5adnh'J0I&anb!h6?(ZY=LYrlK"KOqKQ3(!&c$rWQ!h-M'c%@^E-JBupq2'U[mDFV>G)jr.+p$9^?tAl^(fb<2%/E]0[/LZAphS="'b*#Gf?&2uqoni09NLlb+iSqo?L"mMb\-AjZ)b-JsaZW*5b%Eg8#BjVZu,-S16K5$mE6A9O)8'0TA/"TtPAW?K6?)'DGb8m0t=/s6qdo8hRE?76KtcfYWj.8Pf#91]1&.\o^7KS><qYe.b#1fG]V%BXC5c?fr7ETep'&"XOEfW"SCUMBu4\.?\<K6Gihle(9<e"&V-^@gN='17]b/Bn@jE1fZZ-1A'C#>Vti!">^VK7C]<`IUXJoR0Y6@%'T!uX0*l6dLf!XF&c"h.0Ma!=XC@51Ts@*N=dEH)Fb5:/4-<H`,"=@45E;cKAT<E4MP\2M38^B+18'fbg+4317JmE2odfTe:!<nZ%7HKuH2SdCBbt&QW<go8+d\?*"ZC7HhO!DRI10W6<Lto,cD]2VVQUF7?(:d<-<%-g"_l\kC`>_!s![f=&]\t+/*4B$]XES?\(A,l@%KM5k&`>0B^7@:_9947$=WQm5@VMI1:d$5H)rJ`&E7V,u,I*/l$8Dq)Afo]i;LXp"2`os_1c\8TI&]QIYl@L(r2EP53^p:V?Q\&[G%@&aY!39%uPRECRBVDDmNP>.&Dg.M?f+Zhbt87I%sQnk8a3MqI'FJ8<Na\tJk$<bOp&iXp;$gL!KGm8lpZ:$=SCh']Wk6?<BLVh*N%fLRD]HJE1N@G%d(:K&fdC'k#`,K8X`(aE%4aH@0(S#n\?Rg\P'.0rD>@Yj^`d$Qq7W101D#3Q70W@9CR$iMRL<5G>1@05&XCc`2*%G<2X]a.&2^'h2m7iWr-<U+D/C[amI9N[sUPhik_h-;ol&Z-epW6+V`"NA8"/pqEFgM/*D!,8GP$fg[uqLd:)YO1(J/$[F3E.%]Pj%P%*Z)b3OsSe<?"E(@+?4+@g)JA3P^h0p!HnCn),+c[:=YElB`3^:SKn#;_Y2hhkAfKEr;r_J(<2D]h^,l565#@sOD>Op\<r(-<>J%`n6EmN>m0I,\^(Q#rkpQo*m^Ho#adNnB=917F*>6)]I*ej-]&DY$W2iCIB6YBM>#D)J`EG'=451"),g)jo1BufUmU`N*Ki3r_tm<%63]j\;3"*PVV9299)L\cX6*#`/3Bs6.5Ee3*"p_N._9PWYU-J0i63W>Y?T;g'TlAV=NX'8:Uu22:;dW8UDUTq#)uBWop#e%3gC=K%P(F<3qsn]bNaEH7Y8M>38GAijL%,:?XYcp1<7$,_XpdpG.Rt+DSmY]qPXNri$:S;<'mbp#%(\"t-V"?n(s%L@*GL,m`Z.9=fFuHY%EQ"h%)RSb7!2OQL0jDRa6nD^ih>eua\Uu,<`5?4U4E?H]#aT&FW$n60gc:+c;f!RHaMC7)PF/_,Z]Z.LmdEH!)Mf>E*#1a"=@1!1%',Cpa/l1GF*:1IKBde*CXK#FNUW$.XK1lMtktrf[`/Wm?H?`4em*\T_kiYIFL+1@:/E+[$EF0E1m"e::I>p'4+)Ok"'jZlV#S@%=%EGR[IA6:73U^45ZQSNGHrYqZ_=Cndl="kLG==L`e@Bp?\77#_-b7bqDXOWn%]4$,O#j/IHn",q>N"W_PiS@R[Tjf9W-O>9N0(-'m%eJJREXtQQ=F\]=?>9YFT()i"hOg@$bCiNNESR_5f,t+Cfr*7T;CQTQO"T-*2`^D<&Q!V':7NL-7pn!Gu,6[VK_>n5E8eARNb<S18%<2VH+2,GJP02No.qFY7]!YJuXoBD-<).#^Cc=Hp;UI(%$ac,gZ(Jk(\m2D517;m2sAESfPo]Y5rQ`c*IZbt'AnLb$dkNA1V09*lq%.P[P??/'WSEF"JTM';/+(;3Z.D$;hhV'6I>nj$-T1;*;"';OX.Sn]S-#"<Fm(mIRI0B7]L#_sRDWQ9JJ[0aFNNJF$HNoBY$^hF\G%MARj[K&sM6N+u$i*kCj3'2Q^]&7.L"G^+aM+R6V(A)d8(LW,G.Z\S]^(Dhf7[8c>X/m;Xn5+*nKf?MC"kXJP/3:=g;9gYU=oIol#%?5!+2gAK$Xm1(A+:Y/.;j*_"Q-7SNmbSH3^Lqpk@@;U+jLPRq;;2A?:JOML\,cS`!a+@bZNiO];E'0WL1_@!(i/sP08?aNM@r]lJ%#pT\ue^92G,EZmiP!js166A^Pf]#dGKD^BH&AoVTMH.a7)%^2c#NILR)-hq,-9MuR!k&l+(ZBD!ER8_Q0SD^J^*)Ug,8Wp8nK)FC%*`%E)63V([EdVl[Q8.jfgf10XkVc6E'1IHg!HGpqRrk:jFq&/h`L\Y6'LjP*'r3WPbnQ:rJtE[m#tXFBp1NG$Z,hrNW_`gZY`]hi%ojL%@d/o2Z8Om9*&:@9P(DO`H6n&/DcO,<GN9B4Y]Fj$TGQT`^EjL<akFU$,Gq(Xm(gBdq$(iSY,D_,&1@bA$f]K=p^='K8I6]M=%_p:[*OK0>GJ>@5p'0?D(T,kH[aR>B;[Q$)Zbp4k!Q?A3ZJo2\FNIsb-U7+P^QXe-8P#UK[YLuFO2!EKl8R"M)VGfmi6V7r"IN4"Z%6U[GVU4Eb:4V4kc44]39b6l@0Kr)([9>k&T63^p*?'6`0#u#=.3eJ'jl:#f9)j;fe&1PXr%LKTP#"Z1_N70]\3aRJ+QhKZCTtH.'%iNjAi@G@KlfC:U35;Z9s.T[3iU*N<2N;E$c`X9si#pO`>&:&Gp+_a"\\e9^gfh?s9fdah"D$@;h'Lj7l5#F(oE,^O2P.5R5,C62-%9N",)JMHGUVRN?5"<b]e1@UV_Ba#uFNm"#(CWrKaHG!(\,MZLs*K#7ICgCo,^gU3!"/N(Bi-H/+N*XS(dH)C;58m'4g+o;1P8>*@%k_NNe0G7>EOALrK`@t%o!YdF2c3j%R@G@GfkV0jo%YaW[h/gEf$fu)^p'8LfEo3[)Td(>:OXbB^F?+V`&0a9^PRrSYEJ,TAfQ])?%VcX@J6c3[K>l\iAl,k7q]f/cgB;q\BSXsi6\NKRCJDC[rD=e/KN\3ZGeOp(&R2a5W=YJb?/q-SUSk+g&Q39f./DdoN7RA(A01(C=%gWtCL[P3OaV0s=kLe_bYnGu(pE%*uDM!::D>B99-!e\&eTO"!]QK2;pM+`B*k^$i`0&:G],U-SUURVHaPZ)(sLa=5u.<5;)?3q7s%%&(9kUq;o1BZtn`p;erqkT_@92^->s_gA&I5U1%^,_Ern+3hk^erC6!DMd&/-C1%%&.&D`r9N;A&GqCHR5#j_T(-?MV+_%;*s;U+%HU1/4?e.a(=dT_!)\kEl7:b(qHrs3gj=m2.N,]FNpW>.?,LU"g@HnsJj(3UrqmL`_3"=+W9apUPa.Bk:WZ6uC$#J'J_acc1cXH<?%$I\iT8ZoQtaf#ZPVWA&OLdV9QlSCr$>B<KJOnk$MMDkX"mbab0#tD`4oQZ*:r28bWRXib+X"8RI,T;PCV>HC/1P6d,X*56W)^QDb%0-)Oq[!jFs=WpMEc@l-Z8X6A>@.YU_AKS$IglhteJ0XL19o`QGK\='e>kJ.??"G`S-EmqL4hQ3j2$P4Te;Bt*8)tPRFQR(h>#?22%SFTL/MqJ\"+u!,]0ung,I=\4][F///JKm:Dq3jXUj10O`?porNNk-3cfB1UKj,;,\,*'ic-F@>L:=;4YaYE;'P6'C&0;/3:?+iJS%1?aHh#")tjQZhn'+ii7u/.k<&&I4E-M4cmOLY@&,e79CnG&3,HLg%gWZ\s%B0iPci*<;Labs]orG&")Zm?3'g0J"_U;_2,iT9ZH+%hN]%<P7-JdMH??pJZFVF.JJ'#Km#?(8E+BQ5g7bX@ql0_7*Q.ss6A8g&ks9;k[pd3K`c5p+>\1-&NHL5M8n'15Z:@pj/3G#pPQ1t%QHYnsVP(=%r;;bs?U$<k/P3hR*1eQN*D[n_[Y)pPPTF+clC4auU6[/sPc(M#Pc(L97f>lfi!:\Je6[_VpG9cH=jm$h8H[t]+=tA5%5c<"YVI$4(G">^K?@0NE9JIMk*"cjC;m`*M17LskXBG'QgZF%[1t@t:2<C3E/_,P&Ll:s]:Er3JMSu3p`9KZtUVg$$'9?[;6<1CE%LI!\-8:q_8Hh!(`ih;V_Uk'a?Ud8K?Ud:?C65hhX65gIf$#)q&8jXFQU-fhY-:/WT,g0Wt$q^1q7"Zh'/<Lo"'ph10L&+djd"$=)%7l&dn"Z5GB8M[=19-P96U-]bTQGbUn8-LlD2:M6/F!9C&i7]_+NUMoR(#C%tHJGb@73Z^hJ9Jg$/b*5"OX`XbA-5>$CkK`<F9=?b%giJWH2^FP*-a8`G8La03e[(T]P;LT/Kc'QB0@(q8l*r#JKS5FUA"bt*g=-\-bI/"fA]PPdcj0m:N++#o-_gUJnF#4CQ1&DP!T_-u%82"Q4NN8je@4\t#4A+8.CiV7fR;Ij,,TC,_$kjPZ/J$[EnnCbo/ltp;8DKZW;FTU!5?<q(6?/!P]EgWkb-CW9]:pSChSE"#5!5GH%%'q2HBl]L$,peAQHT9G[Xj8.1H.uU?ieZcQ6ou'@4LG`_Y9-:s+<hrpKj'1n1[6sZQ6A;ZY1)A1)XK.&0!Yu"YEt8ZaD?N)K;%[I%Ua[&t\HMJ&@d2k))P%+q80*Mm[7D@%3O*]"<8)\iYUGTW0EX='Ao>^5EdcGIM>*M'hD8N10d`8k=*V35.n<R?.upQN`A*Mr*'B+7%\Dc;\"V\K01rm#R=s-+^LN,Y=4=><2<TW6*#l(F:lX9K+FrfggbtjI@CAldY"W@ZUf5O.NNFVOL"UEpp(,nW$2qaj>)-#Wcd1YOo%846M*&j`TcoU__t6_=o6EUq*TSOVB=6.Enpp%8kj?F3Ik!(eWX"L4uJP8c?oa7;WO"&U84-g;3fmo#jq'Hu!>O_:MqR4=F[&?&6T%(kQ\0M+?&.b]1ThB@s5G%dp-"!X#gVQXDf#1u]"V.:W&@L_SU%bnN+=.7>.Z"Yn0M3`R<YhJcZ'-.jKd_VnOOBI;OpCS[[0s#`@>%,k76S7J8P^o"gs'R48]/G2m9ihL',^Si#ckH)>VRUbM$o@=g6r-rn>Ucc!`LEX8>mqcV-s)p4)ZP;JuC6l1CS`e-tn%Ug?8qXM^5%eB_QNaZbRq9S<D8m93tUP7),WM#Bu3-&GIt$rAk%='k*00gSoY)T-&A8#R>l/\Rg2T6l1BaX(d4'0!)XBsR8R*I0k51Z1g53^Nsh%ns-Pd8;2C8$@!h.hp/$%TH5Qm]fKj`,N(.^F;CcKFa+"^A%3MO1K7bO2ErH'&U.8paAd!Z<mt'WG%?sWd@0C>gbahrUk\.K#pj@+%0/Q]f7UO6tL]sf[,aBBP:(AI!W!ni/e`bIV547Wh5_kF-JlgHZ$S;erK<5^cat<%^Kk?-m/1VL&rmT*nU,I>2N*LX5U4@EGk<c>a%+;U_4&YX_E\eH(-3&]VEkfULGIITjkNI91%#aT"X-\>Ga98LCg,4=>TLE)5B_<_F\8W*bqVY;(qKK8$4+3E/P$G0ag3?#,H8H^Ie%Y-*e&S;6Vh&@.<R.h"dB&$f&I04n-Q:*ENt<)ZPAqB8Xg7Oj`V?on_6j&KoP+U5P-ii-lX!a^tdO5uJhnC]NPNMiqUVdfo5O[a/A%aYQ8b$rhIUNrV)ZG:Ys=&ATH/jV;6j0=4uS?h?#t5r^'`$j-!1#`k9ZCEWbT5LN)dZGB_(H)a-bUP/ksYoaN$:V@sb5*IB+>oGs@%RB%#L\lr<E-&c*T6HUChH;WTIpYsiWr],QEaO:@$a#rn5;<%Sn.#<&&68)8=?7RL(+lT_Ck"(a[GkneXcn</UTu3T03#JNg+,ir$%I-q9W&LCq.N+>)_Z'6@0@peGnA0u_u/#[#MoZ?E4])FtMVTi[8]Hc#!N)ms`Cb!h$"Mlf,(3BoB8rQ.:mP]:7;$bu;Muo#9F<p"q%]7UU)f=UtI#&A9Bf/u/nD.8`8?4"D\G++Vn>8jc-^).eZ`9l>pN/3J^L`'\>8IgR'-.rSFG/OKgntu.`=?t8Zg(1^&T.Sk&[GE@Q%0EK*/ipD7I%3FqkO^;0!_$rh#TccId%>5otYN&+K&D!#9CPbe5k#o@ESEO[5<0X.Uh`0!hi\dr^ZOAC`&7a7.M%S*=/*LV<cB`Ui%?p=mLd5)5$.XGUV-H[D*)F7OMrG<3A0IRQs=jBj61m"mk^9>Tp<$^nID/sYCgNl6SO)<<%1!&!;>3(N]$j/6]fOT3#iNRY!4Z5>@%^*O3=W6Ys/%>\>F66P8X_2(&d=!a@.^oC&R;Y*l%37X>XIi+1nY,#U+_`0Cm5;<pn;"Dj6FhYp/EB:05I6+G`Ful-YaY>H+/Y:9f%/qtXL_Zl?9M]LsU+WaK<pGYjIbI9E*DW2O+gDb&^[a"3!O2]N^QRnDW04PqIiOp12W]IMHVc-HkRo*(8W7,17WRG:g\(Pd'[YYZN%SIR0/T+5p9S.6d\:\IXnZfB].FaR4>2C9FR=a%^oPn=<(V(M#*kWt_lJ1J\ars*r-K%)F]0<bdO/@jq9f1J@t2K>i(:F2Up7HkN\%L(<riXs5@J`U\/08E://AkC;XHH$(0q%Zu;.&9G<8)&m28YiZBEtaQ>4Ca2CLWrGCd8M@"%)fV\ndgt.2237L'E-Ascn\c.\;UOc%J=G_3-ontS*GYYUF6"PZ3ft_i[^7TI]/]GGL#m'Yi[0AK-[06N.KDU;R(8,$EQ&$[Lqp5!)JN5oiCPMY3'q+EKPlgCb/Aor'U\=3%rX+C8:W5u@7@nKU/Y79,6i+qoTa[O>WR-Ju\jYK4]*rW]h[unZ@P[?O)bI]7hR0'c+XBCGF++`N0/5tu)'!ReU1r"j$h)W=2t)Hs%9-U*qJK'>+<?uCq$)<GMpN7."2,^>D<k+<7kS!a='YeV'W00OuMCg\ZD)&cEm4bl8#h4!]9/0kr%ih2LEej^F1d%]R-V72:&khhc%Gj;c!Db6K=6gR3c+,X(89]i'HN,Af!(rj^SUL$Ui*+=X2"U69/LlClbWrYd9nMIq5<X=YTEeNO+!Q:hhoF)("PTZq&UF3g/(R,&3%Q=E]YJKZAt=<OXj?-Vb/7k,)k6KaF#8I@dP,9tB*L#S1G0-G=(4HC9^XtCX!q=;V__RGgZK[Ee_<CEm?U+Y[[?O8RR7;S=Y[n5"=%FV[%O\>XHu"C2UFM^2ee6%4.)#4KP@--:*td_R'?+D+0.-;M3NUJp,3M^+h@&PjFGrZch6X\Xr`\]"V>Qg3SOa`e8#EP3quMKir0%,'"%/4/+8@8\ISbStJmo9?_!u?H5@0_n$,R$6>hLM+`A=^tkAT>9$ut7;h?aBh(?o-;q[K'p$feD53tA"Rhg&Bd(;Td\!`O=An4a%NR5EtRd$aDZJUD.gOHPV\@9)$9<>^J4C>Lrs/)GXTY4g&e,9=lP$D+G'o!<Pi[P2]`@MU*-k:Uo;%_CnXbWGk*Zk^,<<EqR/qO&W%fX7g5E<FTAR"(LJ/.GMCeQO<<J\ZfBa<J5MN!C^AgL4n2o(VD?OBR'"+:Ehb>]k7i,ZU,*HI-o*Ii%oFl(J.*N*b@m"(pm`_T3V=%*HG-O3@GeS!R.rGWfoRmiPN%qc%ojFP:M!j(&+j\ZD%48Id2*e[5gQH\Pd`ch+pS1dC[,ckYJr;Z[3?Qi':1CoNZ7eX$d`<QRurW%BF7_<5U[8FFOAdi^9=;P4*EFEs8#C+g!`G;^0mi0JH=_,!g&S>^(FPu2kl51JN?Y+AO"T=hn&-X0[/fMkZY4f\VVWpIQlZ-!55sm%0>j,mGL&tuZaTT)L%=TJ_m=h^St5nSDegk&dj]-^;jHTpq-G$%;^YRDM+l&.AG0q=2'1HHVWqo?kP+1mT077Z4F8I-=a9$`1:Q;!%OUWAbRU\0#43Q_oO%;-7e4kYh7\8`E6X^sCLO]sU=cn]EZ?rE&7Qf0tX:U3QW<?h3'!HSS2^3ul0ilP%eNc0W6JYsJMNPtlq,WUX%:1I7-d+Xe$(6H0XNqj6qnO3"Sge5;g$6bc<*m'!WWG7(0fHQ)]LEPg_X7ak5UNmq%P`_Epm-7+5QQm-`DS+mJR_dc32+0j9GCYZ-%]dnamSda=sB;B.gBH6:_hI8T]]3ndH`G+t`@oe8Al,rsdl.Et5*Tb'RB3rXR0QTZjakAIY,GP]\[ojQObDJf-7.r%6f0UE`9<.FG%i-`5;H?=K-f1[G%4gp>OSZVIe3XW1qN;32+9S#sOUBmPEa'j/#A^;QFH'*)`>7aI(GTpU8AI=1b\\m4qm&QFCV3XD5)%qcQM6JCb%j;=`HQRqTd992pUYbmmj+cO/-Hpr;JjQ@l0,C.";o=u'<"N\66j5@>-g.8b?39n,%U\t+Y)4OP;bq01,?0\u2;QX*;WN:ps=D_V<%(a\P3KYdElgZ5W!jC<4p>7?h]6<86E'H,%AKfW0NZ"R(MGbMuY2;+:N&g]jd*a8:qXU+WNEH(Qgl:_Xe<&uV<0$a5C_oU=roqk_>%d7BPJ/3/dS_ON=pF84P)S*fPsOCj7@^7C(X/5%h$X`g*m9q"sY4`"1Tb;bQ$'ElUJBoXUYYf4&CL`SW9G*c8![Ud_rJebcnMB"^J%+cRjm0Ne0RGouNSZiIf)WRWocKcWn.SJLCsQ[3*RUkRK0#=a#\eg+Z.q[:86C\MRO$BtNB<m/N-QW00$1TKck4<CgF<0^h'FF^"D%nLW?s4HYJfpDX%a$<#Zeqe#\b!H;=.YG/b*38%=.=%;l>-jflC8=-?N)nm$3DLRm#U/esY]PDCBm-Mj=lT!+:`3FHps7uV!]l#43%48uqj^Y=X!1J/4=BE8eVprKaM)a18,#)$\k=>Y`NNpp@G9GC%NA3i$A!j2]!j<bmt_R32eKY+<!60^2dCKn''fA_/i"A8*r>NY*V%eC0+KCCi=238r6mPsVcR-kqJbpL`Rmo#qT]Z9?r!HQ^1,Qn&4]m(D1_V0:R7$),`u#hsWe$TAL6[A%aSGCV2!3d5$m7YDe92pm6m%Td@'/iRG_b"pZekn#EbG[%RN?]"+OS1>j.:gS$]%M(QJ=G,^^.V#T\pn."5MA<so[(4tR?e$q2c;2!"6*E?g@paJKf\4?07Qp;L;%DC^qaCOhDr^]fsH!TRBlEmdjT"MlN,qYqfZK1ophF\%@&-E+YufkR=73oAG0OhQ8TcM_^Y5)I/#@kFBGpkk$eS_+e/q'L-=e^_6p%r0!B\X.j@`=,(p)r%3PA4*5O2O`haNOV/\A+bG9ZqXEN^]PJ`\+^,`W\J^SLa6]Y2i8Oc_\a05%#^ssS<"DOOBcEaDrMkm!&n+A;%JUY!pEihg(_LO%UN3K)iU"^qZfL1p<++q^B(.=52@(EX:/<ZSRP=2s%Z-g70Y&^(s+f)1bEG"su-a9bjahXo:fN=7U#g5jCdGKZ"%U\2+Qbqil2HAOb%JRkT?9=Uk_)?r7&hdG(AXq58Z?!t=(\)A;WUc)Zo5Yk=5Js_;\4uXHc!6M;N`Y"3-S<_[H.9V8dh%6B(8ikR&%Vg9"QosO(ZfYhrCYdMHZW+f(2#ma'UPsk7L@EI31<FMF?,-]N][i)tRT6`&`A@FaXMct4hV9"I'F]X@S"0lM]6AF,;AP2-jh"bK%%8?62&-&VCS3g7#rMc?U)K^M_GLD>$t9Tse6FLeB(l*V8(,/74.%FShAY?9PbKJ@]2>$'A:!GOnS(6s4JSIA?UYSZteecKFkb<,mJ%aYTr2T+6ft\X7Th-?++oP1dK#\KG,%K.Y*;/hY@W#5+4Za`W4j/nC,6j'Yf('JKf'Rqb_ffud"8!DL3T^lTh5#h,FIdA3>S-J'!G%lbp)o:h=l!OBSu9ChZOQeO#U'\,[2*`)7Ut!c]\P@!#?n<m8@4AO@_YqM/H):;jK)JQ$?b8?[IdHhD2.q+Bg@ZNlFNNk'%`A?G::%KKoX%8<ps_frDY$3hou-]cqa#Jr/\2+6M,k/"Z8.91,iT8A^c#I[EUem`^=dP;M&Jm78eI"$V<!(`,T3]GIO91(faIgLEir6dJ/!%Sjfd"Td,;;as1rKIeAita5Ubo!OH'!^GOXm(lGXH?P"j4k>h;P*,=63$3;U:DR!S&'ri'`4<QUCQ]A;Ha\q`-CU9_/N$QmlZ*)lp%*Ja[K8N_HKp[HE<jd3HKhEO4&rUTgIc/$:TO&$j(IX6G=mIut!]+88?rd;8+qXj%Df;Gf*IiQ5YIs?D;o(DV?bPdc75Q:oJG[rX\%G^0,Rqn%=Xs"Zt\~>%AI9_PrivateDataEnd