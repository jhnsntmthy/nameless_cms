%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: BW_1.EPS%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: Reger Smith Jr%%CreationDate: 4/30/07%%BoundingBox: 0 0 324 107%%HiResBoundingBox: 0 0 323.4014 106.2535%%CropBox: 0 0 323.4014 106.2535%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x5205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-04-30T17:17:52-04:00</xap:CreateDate>
         <xap:ModifyDate>2007-04-30T17:17:52-04:00</xap:ModifyDate>
         <xap:MetadataDate>2007-04-30T17:17:52-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>84</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAVAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXklr+Z9r5r/ADssfLWhyrPo/l+G7n1G7BHCW8MZhVIiftekHfp1+I9F&#xA;rir1vFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq+dfzl/OXWPMGrt+W/5bFrq/uC0OqanAwAUAH1IopahUVRX1ZSaAbV6nFUh/5x/j0mz/Mm00HQ&#xA;pVurHS4Z5dZ1gf3d7qLxNGiQEf7phj9X0a7sOb9wAq+qMVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfPP55fm7rmp67/yrHyCWk1W5b6vq1/E3Ex1r&#xA;6kCP0QIu80lfhFRtQ0VeQxRJGkv5ffl9KlzNcoT5s82E+lFLFF8UqJK39zYQ9WY7yn24qVXov/OO&#xA;9raXXn5bPyyrSeVvLFtM95qzoUa/1C6UQ+qwO6LxDeihPwopJ+J2xV703naCDz8nk69txBcXlkb/&#xA;AEq6WTms6xsVmjdCqmN0pyG7Bl7g7YqyXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FUj89a5LoPkvXdahNJ9PsLm4tyRyHqxxM0dRQ/t0xV8bJp+qwB/I3l&#xA;08vMuoxtceedembgIIzSSW0eZv7qC3G9y1avJVdwoBVVtC0K8823i/lz+XKt+heSyeYvMUilDeFD&#xA;/fTd0t0P9xB1Y/E3xfZVfWPlHyp5S/LHyUbOCVLXTbFGuNR1G4IVpHp8c0reJpQDsKAYq+ZfN35k&#xA;3fmvzjrv5hWbS2ei+W7RbDy9KSUd7qZ6QdP22JknK9kWh91X2LbyPJBHI8Zid0VmiO5UkVKn5Yqv&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoHXbSO80PUbS&#xA;SEXEdxbTRPbmtJA8ZUp8JB+KtNjir4r0PQvMGvDSvIOgNx1TzQiax5s1J+pjdjLDHIw39GGKkpX9&#xA;qR6dlxV9efl7+Xvl7yJ5ei0bRottnu7twPVuJaUMkhH4DoBsMVeB/nb5h1X8wPOt95St75dJ8keV&#xA;KSeY9VkJ9ISCnJmUGsjq37uGIbs9foVefnUdL1OBdSt7N9N/LTycxOm2c1DLqOpOKxiZhT1J7hlV&#xA;puO0cIoO1VX2H+X0d3H5C8tR3hY3iaVZLcl6lvUFugete/LFU/xV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5r5d/LoeWPzc1LXtPsR+hddsEgWSIrSznhI&#xA;Zo2Rm5CKVYwVKggEcdhTFXpWKvjnz/aQ6x518yafd3Z0vyLomrXN95i1CMD1Lm+uJHKRRq1PUn4L&#xA;6MSdFoznYtiqZ/ll5Jv/AM1fMdhqVzpw0n8s/LblNL0pa8JSrBjHyO8skjANcSnr0Hair6zxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvJPz3/PRPy7gtbDSY&#xA;oL7zHefvPq9xyMUNuKj1JAjIxLNsq8h3PzVfO2sf85O/nDqIdI9Vi0+J+qWdvElB1oryLJIP+CxV&#xA;g+r+fvPGsf8AHU1/UL1d6RzXUrIKihohbiPoGKvVv+cctL1Bte03XovO1jpr/Xfqtx5durrjc3cR&#xA;CgqkDN8fPnRNvtDbFWQfnJ5N8uW1/d6/rXmO1n8r2mp3cj+X9Ncte3OpXDmaWGVgWSKQLwjdj9iN&#xA;RtyO6rx66/N3z8dSa60vVrnRLRFWK00vTppILSCCOvpxJCrcSFr1apJJJJJOKsk0j/nJ/wDOHTuC&#xA;yapFqMadEvLaJqjwLxCKQ/8ABYq+ivyJ/PKL8xLW6stTigsvMdn+8e2g5CKW3JAEkQdnb4WNGFT2&#xA;PfFXp1nq+k3091b2V7BdXFi/pXsMMqSPDIa/BKqklG26NiqLxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KpR5s16bQdAu9Tg0+51W6hT/RtOs43lmmlbZEAQMQK/aanwipxV&#xA;8dX/AOS/58eedcu9f1TRnjur+QySzXksNuF7KixO/qKqqKKOOwGKsl0f/nDbzjPxOr65YWKNQsLd&#xA;Zbp18ahhbrX/AGWKs003/nDTybGv+5PXtRump1tlgthXbs6XHviqEb/nGA+UvOnlrzF5avp9RsLP&#xA;VbR76zuVUzxw+so9VXjCK4X9v4BQb9K4qmep/wDOOh87eadV1bzJf3Gm6Ot9dDStNtRGJmSSdnlu&#xA;JJHV1BmkJK/ATw470AGKoTU/+cM/KUgP6L8wX9qabG6jhuRX/YC2xVher/8AOG/naDk2la1p98in&#xA;4ROJrZ2HyCzLX/ZYqx7TPyb/AD48h6/ZeYNM0SSW6sZBJHJZyxXAcDZ43jjf1CrqeLDjuDir6p/L&#xA;rRtFNvceabfSrvSNW14+tqdlfCVJIZ6/vUVJQtFLrXkB8Q4/shQFWZYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqxC7/MzSohczWemapqmn2byRXWpWNqZbdXhYpKEJZXl4MpVjErCoPhirItE1nTtb0iz1fTZf&#xA;WsL+JJ7aWhXlG4qpKsAw+RxVG4q7FXYq7FXYq7FXYq7FXYq7FXYqk915t0K1802Plea4C6zqFvLd&#xA;21vTrFCQGqexNWK+PFvDFU4xV2KuxV2KuxV2KuxV2KqN7eW1jZz3t0/p21rG808lC3GONSzGigk0&#xA;A7DFWPWX5k+Trrysvmf696Oksyx85UcSeo9OEaxKGd3fkOKoCTXbFUPcfmdo1jbreavp+qaRprGh&#xA;1G9s5EgSpoDLx5vCCe8iqPHFWV2t1b3dtDdW0izW1wiywTIeSujjkrKR1BBqMVVMVdirsVdirsVd&#xA;irxiz0/85fy9ge28uWdj5y8mJLLcWNqJPq+ow280jTGNXPwS/wB4aH4yfAbDFWPReZ/LV15ml1FJ&#xA;vMlr5Zu/LMeqWujaXNqaC0uY7me2mRYbBvSgFLalZKR8qmoxVmnkuW58qedzo2pavf6hpXmLSYNQ&#xA;0e81W6mnKT2KUvYQZXdVLLIJ240FNugGKsc1FZ0u/Kmv6jqfmEab5n1fUZ5dLsrzVHcWE1tLLYxr&#xA;BZyGYcPSSUrGPh5MPsjFUTLL5hsV0TzB5JvdY1E3F9qaTaFrl1dO1xb2XJJbcR3JdopOdq7xFkDg&#xA;txbbbFUy1K407z/r3li50XXtW02y1O2vv0hDY31zayRy2T2zGCWBZAkUq+o6P8NaGu/wnFVHy/5L&#xA;l1Tzf510SbzL5hjtNFlsodMZNXvA8f1mxSeRmYyfvD6j1HOtOmKofyX5rQfk5fx31zrlzqjDVa6j&#xA;6er3LBobidICl8iyBQiRIDxkAFDXflirJPKHnryvpnkjybpuuay765rmmWMiQSS3F1fzy3kSlpPh&#xA;Ms4DSu1GNAOgIC7KpT+XHl691/ybfXDa9rFvrEWpajb2WonUbuf0hbXTxwBoJpZIJVVVAYOh5D33&#xA;xVJNe/M7XtY/LnRYY9UttE803MF1qF5O0qQIx0edoljj9Rl/3suolAUfsc+2KptrXnC6sofL35s6&#xA;XJeX/lvU7VLbWdCW6lMUUt0ESCeGF3ECuk4EEm1PiqBWpxVn3k3R7ry55XVNY1Ga6u/3l5qFzd3M&#xA;twsTP8bxxyTu7CGFRxWp6DkdycVeD+aNa1W6jH5lQeXNY/Tdlqkeq2V81rxtBocCmJbfnz5hJbdj&#xA;M54faY9t8Venyzw6/wDmrp8EWoXx0HU/LL6pHBbX13bRtJ9agSKVRBLHxPpSEbda774qxTzpf+af&#xA;KnnD049W1HUdG0GG18wNC1xKZDprXRtr62n4lfrHpmk0bSfFxDKxYYqyT8xJrnW7jWJtJ1W9s7Ly&#xA;/wCX7m8nuNOvJoFku7mJpLIfunVSYo4mlO2/NK7YqkWiXNnq3leOa21PzPb6pH5YkvrqS5uNUggk&#xA;uBDGfWhe6ZfUdZTyDREx0PcHFUTaeetX1DyFq2geZ5ptM85WWiy6rpt/ZzSW4vrdLcyQ3cLxsvxq&#xA;200R2r2K9FVTzV5SvND1ryfp0HmfXpY9Z1aaC/d9TuSzQmGadY1q54hSqqD1oOuKq/6I17RvzMm0&#xA;fSda1K+aTy3qGpadb6jfTzwrffWIoIOau5VlX1DswI3r1Aoql2g3mj6/qGkeXtW1DzV5T81RkNeW&#xA;d3e30Y1BoomMqwTeq8BXmPUrEFqooBToqj/L/lKTVvOHnfRLvX9bex0maxhsI21G4dVW5sUnkEis&#xA;xEqs7mqvUEbdMVX67a6ZZ/nb5E8vQWsFnotrZahfafp8ESRQfXeLDmEUKnJIwWXbbc98Ver3Vrb3&#xA;dtNa3MazW1wjRTwuOSujjiysD1BBocVeUeS7vTvK3n7zXoIk1ebSdJt9KttIs0XU9Tht4mteTqqR&#xA;i4SOpVaVA8F2rirH7O4vL3RL26XVtYRR59g02Hnf6jDKLCW7ghNsySSpIi+nMw4kBgfcYq9T/MGz&#xA;9bTNPmW7u7SSLVNNQG0up7X1EuL6GCWOT0XTmrRyNsenUYq8guNXuYrrzLY2Wt63H5rXzSum+WBJ&#xA;dajJYBCIHFvI87PYmqmUlHJkp0HSqr0u3nufNHn/AMx6TdXlzbaT5ZFnDFaWVxNaNNPeQC5aaWa3&#xA;eOUqqsqIgYDqTXbFUg/NXR9b8ueRvMmoWOv6iLBBYzabB9buTdW1x9ZEVxwuhIJ3ilikX93IzgNu&#xA;KYqq/mF5itbh/J1lpk+tWRfXrGzndo9W08S2snJZI5ZpVgEpbiv2mLdT44qknkH/AJXj/gqP9CfU&#xA;f8PUP6A/SXL9Mfo//dPHj/oleFPS9XtTltTFWPeWP8Z/46k/5V3+jfqH+GLX9Hfp71/V+rfW5PW9&#xA;f0P+Pn659Y9Svw16bYqyX80fT/5V55X/AMU/XP0/+kV9X0PS+s+j+9/SfH0Ph+r/AFL1acP2eFcV&#xA;Tb80/wDGP+M/y9/wl+jeH1i9+q/XfU9D1fqEv2vR+L0/q3qceH7VK7Yqldn/AMrm/wCVieW/0/8A&#xA;o70/rlz9Y9Ln9V9L6ueX1Kn7z7Hqf3vxc/tfDxxVG2X+Dv8AoYX/AHBer9e/R95+nPQp9R+vcofo&#xA;+s+n/fcf8ivxcsVX/l9/jX/lZX5oev8Ao/l9Yt/q/wDe/wB79UT6jzp/uv6tx9WnxcumKpb+W3+L&#xA;f+hetY9X6j9Y9LWf0dw9Wn+9Fx63rV7+t6nDj+zxrvXFWVfkxx/wDoH1v9G/4i/Q9nx+rU9f6j6K&#xA;/U/Xr+9+xx5fs8q0xVgf5Wf8rl/wnrH1D9E/oz9Jaj/cet+kfV+sP9Y+rer/AKP9uvper/ssVZB/&#xA;zj9z5+Y+P1f9HcrL9Cen6v1j9Hek/o+r6n+X6nLv6/rV7Yq89vP8e/8AKqPNv1X9F/4Y/wAUD9G/&#xA;7019P9Kx8vq37HofW+FPb1P8nFXq356/43/5VXffoj6r63oj9P8A97/vJQfWfQpvxpXny/3Xy74q&#xA;y2/+tf4EufrH1D63+i39avP9G+p9XPL/AC/q3L6eGKvmb8mf+Vx/pzyz+iv0ZX9AXf6P/Sfrcf0X&#xA;9fXl6no/Hz9bj6dP2eu2Kvc9B+o/pPzP/jPj/iH6in6Vr/vH+h6S8Pqf7XocvV9Tl8fOvLbhirEP&#xA;J9f+hcPMH6D9X9IfU736x+lOXq+n9XX0eVO/6N9H0f2aca7VxVB2/wDyu3/lX9h6/wChv0L+gG+o&#xA;/UvX5+l9Q+H6/wCr8dPT6eht6vHl8OKon8yf0N/yorRP8V8f8S/Ul/QH6K5+t6/1c09Pn8XpehT6&#xA;zy+Gle/HFU+/OP8AxT/jb8uf0P8AVPS/Skv+9Xqf33oN14fs+j6nT9qmKpX5/wD8Xf8AK3dQ+p/V&#xA;/qX+DdQ4ej63136v6iep6PHb6x9Y4en24/5WKppB/j79J+UP+Vkfo/6t9dj+o/ozl6v6T+qzel9c&#xA;5/BTjz/uNudP2MVVPyx/xP8A8rT/ADK/Sn1T0PrlpT0OfqU+rJ9V6/DT6rx59+ftiqp+ev8Ah/6l&#xA;oXrfW/8AF/13/nUP0bw+t/W6Dl/efu/R+z6vLalMVS/Wf+hi/wDDI+t/oynpn6/+hPU/S/p0PL0P&#xA;rH+jerx/l/a+xiqH/Jb9L/8AKwPNXofVv8OfUNG+qV9T636P1MfUOdfg5fVq+v8A5dOO2Ksdsv0j&#xA;/gb8xf8AEvp8P8US/on9E8/rf6Y+sRel6frfB6frejxrvTny7YqzEf8AKyf0j5Z/5WJ+j/0R9cg9&#xA;P9Eepz/SO/1X676u3D1Kf3G3qUr8OKsRtPW/w5+aH+NPq36D/Ts3o/o71fr/AOluFt6P1Xnt/vrh&#xA;35Vr8OKpjof/ACsX/FsP6I+rf48/R1v/AI6+s8v0Tx4n6j9Y9P8Ae/XvS/3z8FP8nFUN+aX/ACs/&#xA;/A3m39P+j9b/ANxvp+j6v6K+p/WjX6p+39Z9bh6vr/s047YqyT85f8b/AKJ8hfV/0d+l/wBP6f8A&#xA;W+XrfVvrvBvT4f7s9Dnz5V+OlKd8Vf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:36923797F8D011DBAAE2975E5D9B4AE7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:36923798F8D011DBAAE2975E5D9B4AE7</xapMM:InstanceID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -106.253 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 106.253 li323.401 106.253 li323.401 0 licpclp[1 0 0 1 0 0 ] concat154.91 69.7104 mo154.91 66.2134 li159.873 66.2134 li159.873 65.8843 li159.873 62.3828 158.259 59.8184 147.135 61.7451 cv128.843 65.0029 li118.318 79.6025 li143.576 75.123 li151.143 73.8242 157.787 73.5532 159.873 79.5703 cv159.873 69.7104 li154.91 69.7104 licpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0 0 1 cmykf163.324 79.5693 mo163.324 74.8071 166.138 71.5356 171.881 65.792 cv175.928 61.7451 li194.425 65.0029 li204.969 79.5869 li180.714 75.4023 li172.491 73.8242 165.52 73.2715 163.324 79.5693 cvcpf164.349 66.2056 mo166.182 62.2744 170.083 58.7197 172.327 56.4761 cv173.923 54.854 li180.716 48.0615 182.022 45.252 182.434 40.5737 cv182.453 40.3296 182.802 41.4902 182.907 42.312 cv183.258 45.0684 183.055 47.0688 182.118 49.8296 cv180.717 53.9546 177.4 57.2407 173.096 61.5449 cv168.415 66.2056 li164.349 66.2056 licpf168.293 9.24658 mo168.293 9.20996 168.407 9.18945 168.407 9.24658 cv168.407 14.6646 li168.407 19.564 162.11 25.2158 159.602 27.708 cv150.377 36.9575 li147.188 40.147 140.803 46.4448 143.484 52.5215 cv143.573 52.7236 143.655 52.8975 143.313 52.6553 cv142.631 52.1709 141.598 50.4702 141.322 47.3623 cv140.831 41.8232 144.607 36.8638 149.266 32.2056 cv158.064 23.3955 li166.989 14.4712 167.859 12.8984 168.293 9.24658 cvcpf159.602 36.9795 mo162.11 34.4878 168.407 28.8354 168.407 23.936 cv168.407 18.5181 li168.407 18.4614 168.293 18.4814 168.293 18.5181 cv167.859 22.1699 166.989 23.7427 158.064 32.667 cv149.891 40.854 li146.921 43.8237 144.198 46.937 144.323 51.9634 cv144.4 55.0435 145.949 57.5962 148.279 58.1978 cv149.238 58.4048 149.18 58.2798 148.952 58.1826 cv145.66 56.6289 145.896 50.6855 151.217 45.3652 cv159.602 36.9795 licpf149.341 28.7852 mo142.548 35.5776 141.242 38.3872 140.83 43.0654 cv140.812 43.3096 140.461 42.1489 140.357 41.3271 cv140.006 38.5708 140.209 36.5703 141.146 33.8096 cv142.547 29.6846 145.864 26.3979 150.167 22.0942 cv158.064 14.1846 li166.989 5.26025 167.859 3.6875 168.293 0.0356445 cv168.293 -0.000976563 168.407 -0.0214844 168.407 0.0356445 cv168.407 5.45313 li168.407 10.3525 162.11 16.0049 159.602 18.4966 cv149.341 28.7852 licpf163.44 75.0947 mo163.435 75.1367 163.324 75.1367 163.324 75.0947 cv163.324 69.7104 li165.578 69.7104 li164.304 71.5361 163.653 73.3032 163.44 75.0947 cvcpf163.457 66.2134 mo163.452 66.2554 163.341 66.2554 163.341 66.2134 cv163.341 60.7324 li163.341 56.6152 167.376 52.1636 171.376 48.1899 cv173.972 45.5967 li176.066 43.5024 182.461 37.1943 179.78 31.1177 cv179.691 30.916 179.609 30.7417 179.95 30.9839 cv180.632 31.4683 181.667 33.1689 181.942 36.2769 cv182.433 41.8154 178.657 46.7754 173.999 51.4336 cv171.599 53.8438 li165.815 59.6279 163.892 62.2202 163.457 66.2134 cvcpf163.45 56.7075 mo163.445 56.7495 163.334 56.7495 163.334 56.7075 cv163.334 51.144 li163.334 47.2178 167.229 42.9814 169.118 41.0918 cv172.047 38.1685 li177.367 32.8481 177.604 26.9048 174.313 25.3511 cv174.084 25.2544 174.026 25.1294 174.984 25.3359 cv177.315 25.9375 178.864 28.4902 178.941 31.5703 cv179.066 36.5972 176.388 39.6899 173.419 42.6597 cv171.044 45.0337 li166.077 50.0015 163.902 52.9048 163.45 56.7075 cvcpf255.748 94.106 mo255.729 92.7227 254.1 93.1021 254.1 92.6851 cv254.1 92.5142 254.251 92.4766 254.402 92.4766 cv255.104 92.4766 255.786 92.5522 256.487 92.5522 cv257.074 92.5522 257.662 92.4766 258.249 92.4766 cv258.571 92.4766 258.609 92.5903 258.609 92.666 cv258.609 93.0449 257.245 92.6851 257.245 94.106 cv257.245 98.1987 li257.245 98.4639 257.245 98.5396 257.529 98.5396 cv264.463 98.5396 li264.653 98.5396 264.615 98.0659 264.615 97.9902 cv264.615 94.106 li264.615 92.7988 263.194 93.1206 263.194 92.6851 cv263.194 92.5713 263.232 92.4766 263.516 92.4766 cv264.141 92.4766 265.127 92.5522 265.487 92.5522 cv266.188 92.5522 266.472 92.4766 266.851 92.4766 cv267.344 92.4766 267.381 92.666 267.381 92.7798 cv267.381 93.1206 266.112 92.7988 266.112 94.106 cv266.112 104.148 li266.112 105.531 267.836 105.19 267.836 105.664 cv267.836 105.721 267.76 105.891 267.627 105.891 cv267.116 105.891 266.529 105.815 265.847 105.815 cv264.634 105.815 264.104 105.891 263.744 105.891 cv263.573 105.891 263.289 105.948 263.289 105.645 cv263.289 105.19 264.615 105.456 264.615 104.262 cv264.615 99.7144 li264.615 99.4111 264.691 99.2407 264.463 99.2407 cv257.472 99.2407 li257.245 99.2407 257.245 99.354 257.245 99.563 cv257.245 104.281 li257.245 105.569 259.044 105.152 259.044 105.74 cv259.044 105.834 258.912 105.891 258.742 105.891 cv258.495 105.891 257.112 105.815 256.108 105.815 cv254.763 105.815 254.554 105.891 254.479 105.891 cv254.327 105.891 254.27 105.796 254.27 105.607 cv254.27 105.058 255.748 105.683 255.748 103.807 cv255.748 94.106 licpf271.547 100.832 mo271.547 103.864 273.518 105.247 276.076 105.247 cv279.638 105.247 280.452 102.897 280.452 100.662 cv280.452 94.5229 li280.452 92.5903 278.69 93.3857 278.69 92.666 cv278.69 92.5713 278.823 92.4766 278.88 92.4766 cv279.619 92.4766 280.358 92.5522 281.097 92.5522 cv281.457 92.5522 281.797 92.4766 282.139 92.4766 cv282.233 92.4766 282.385 92.5713 282.385 92.6851 cv282.385 93.2153 281.267 92.7988 281.267 94.5415 cv281.267 100.416 li281.267 101.344 281.495 106.024 275.981 106.024 cv270.998 106.024 270.05 103.238 270.05 100.321 cv270.05 93.9355 li270.05 92.8174 268.516 93.2725 268.516 92.666 cv268.516 92.5332 268.838 92.4766 268.933 92.4766 cv269.425 92.4766 269.899 92.5522 270.41 92.5522 cv271.017 92.5522 271.623 92.4766 272.21 92.4766 cv272.305 92.4766 272.817 92.4385 272.817 92.666 cv272.817 93.1968 271.547 92.666 271.547 94.0303 cv271.547 100.832 licpf286.628 98.6152 mo286.628 98.9756 287.803 98.8809 288.693 98.8809 cv289.508 98.8809 291.327 98.5396 291.327 96.1899 cv291.327 93.8784 289.565 93.1021 287.708 93.1021 cv287.026 93.1021 286.628 93.064 286.628 93.8027 cv286.628 98.6152 licp293.525 103.826 mo294.889 105.91 295.817 105.209 295.817 105.664 cv295.817 105.891 294.756 105.891 294.586 105.891 cv293.203 105.891 292.464 104.925 291.744 103.845 cv289.641 100.529 li288.958 99.4678 289.243 99.5249 287.121 99.5249 cv286.515 99.5249 286.628 99.8657 286.628 100.055 cv286.628 104.053 li286.628 105.683 288.599 105.095 288.599 105.74 cv288.599 105.929 288.428 105.891 288.276 105.891 cv288.106 105.891 287.67 105.815 286.098 105.815 cv285.377 105.815 284.658 105.891 283.938 105.891 cv283.824 105.891 283.748 105.796 283.748 105.683 cv283.748 105.209 285.131 105.474 285.131 104.034 cv285.131 94.3901 li285.131 92.5713 283.502 93.3481 283.502 92.7036 cv283.502 92.5903 283.653 92.4766 283.881 92.4766 cv284.222 92.4766 284.127 92.5522 285.093 92.5522 cv286.192 92.5522 287.272 92.4766 288.257 92.4766 cv288.561 92.4766 292.748 92.0977 292.748 95.7544 cv292.748 97.2324 291.687 98.502 290.361 99.0322 cv293.525 103.826 licpf302.479 92.3062 mo306.041 92.3062 307.026 93.7646 307.576 93.7646 cv307.727 93.7646 307.841 93.5757 308.03 93.5757 cv308.239 93.5757 308.239 93.8784 308.296 95.1104 cv308.333 96.1143 308.504 96.7397 308.182 96.7397 cv307.955 96.7397 307.822 96.2471 307.746 96.1143 cv306.571 94.0869 305.226 92.8555 302.782 92.8555 cv299.087 92.8555 297.306 95.3184 297.306 98.8428 cv297.306 102.14 299.201 105.437 302.839 105.437 cv305.813 105.437 307.67 103.542 307.955 102.67 cv307.993 102.538 308.106 102.424 308.22 102.424 cv308.314 102.424 308.409 102.538 308.391 102.632 cv307.955 104.527 li307.936 104.603 306.59 106.024 302.327 106.024 cv298.443 106.024 295.658 103.352 295.658 99.4302 cv295.658 95.5083 298.481 92.3062 302.479 92.3062 cvcpf311.313 94.106 mo311.294 92.7227 309.665 93.1021 309.665 92.6851 cv309.665 92.5142 309.816 92.4766 309.968 92.4766 cv310.669 92.4766 311.351 92.5522 312.052 92.5522 cv312.639 92.5522 313.227 92.4766 313.814 92.4766 cv314.136 92.4766 314.174 92.5903 314.174 92.666 cv314.174 93.0449 312.81 92.6851 312.81 94.106 cv312.81 98.1987 li312.81 98.4639 312.81 98.5396 313.094 98.5396 cv320.029 98.5396 li320.218 98.5396 320.18 98.0659 320.18 97.9902 cv320.18 94.106 li320.18 92.7988 318.759 93.1206 318.759 92.6851 cv318.759 92.5713 318.797 92.4766 319.082 92.4766 cv319.707 92.4766 320.692 92.5522 321.052 92.5522 cv321.753 92.5522 322.037 92.4766 322.416 92.4766 cv322.909 92.4766 322.947 92.666 322.947 92.7798 cv322.947 93.1206 321.677 92.7988 321.677 94.106 cv321.677 104.148 li321.677 105.531 323.401 105.19 323.401 105.664 cv323.401 105.721 323.326 105.891 323.193 105.891 cv322.681 105.891 322.094 105.815 321.412 105.815 cv320.199 105.815 319.669 105.891 319.309 105.891 cv319.138 105.891 318.854 105.948 318.854 105.645 cv318.854 105.19 320.18 105.456 320.18 104.262 cv320.18 99.7144 li320.18 99.4111 320.256 99.2407 320.029 99.2407 cv313.037 99.2407 li312.81 99.2407 312.81 99.354 312.81 99.563 cv312.81 104.281 li312.81 105.569 314.61 105.152 314.61 105.74 cv314.61 105.834 314.477 105.891 314.307 105.891 cv314.061 105.891 312.677 105.815 311.673 105.815 cv310.328 105.815 310.119 105.891 310.043 105.891 cv309.892 105.891 309.835 105.796 309.835 105.607 cv309.835 105.058 311.313 105.683 311.313 103.807 cv311.313 94.106 licpf231.725 93.0591 mo231.808 94.5894 li231.808 94.7544 231.849 95.0029 231.601 95.0029 cv230.898 95.0029 231.932 93.5552 229.988 93.5552 cv227.258 93.5552 li226.514 93.5552 226.514 93.5967 226.514 94.4653 cv226.514 104.144 li226.514 105.757 228.044 105.137 228.044 105.716 cv228.044 105.757 228.085 105.922 227.878 105.922 cv227.423 105.922 226.886 105.881 226.348 105.881 cv224.238 105.881 223.866 105.922 223.742 105.922 cv223.577 105.922 223.535 105.881 223.535 105.674 cv223.535 105.219 225.024 105.426 225.024 104.268 cv225.024 94.4238 li225.024 94.2998 225.066 93.5552 224.776 93.5552 cv220.847 93.5552 li219.688 93.5552 219.73 93.9688 219.73 94.6309 cv219.73 94.8374 219.896 95.6646 219.523 95.6646 cv219.316 95.6646 219.192 95.251 219.11 95.0854 cv218.531 93.4727 217.207 92.8936 215.552 92.8936 cv214.022 92.8936 212.45 93.6382 212.45 95.375 cv212.45 98.9321 220.144 96.8643 220.144 102.076 cv220.144 103.689 219.027 106.088 214.726 106.088 cv213.319 106.088 211.582 105.385 211.499 105.012 cv211.044 102.572 li210.961 102.2 211.044 101.993 211.251 101.993 cv211.499 101.993 211.499 102.241 211.623 102.613 cv211.83 103.482 212.988 105.467 215.594 105.467 cv217.414 105.467 219.151 104.475 219.151 102.448 cv219.151 98.8081 211.458 100.835 211.458 95.9126 cv211.458 93.5137 213.484 92.356 215.677 92.356 cv217.952 92.356 218.572 93.0176 218.861 93.0176 cv219.151 93.0176 219.192 92.521 219.564 92.521 cv221.054 92.521 223.163 92.604 225.604 92.604 cv229.037 92.604 230.774 92.521 231.146 92.521 cv231.601 92.521 231.684 92.645 231.725 93.0591 cvcp136.344 91.3628 mo133.49 97.4434 li133.325 97.8154 133.49 97.8979 133.821 97.8979 cv138.785 97.8979 li139.364 97.8979 139.322 97.7329 139.198 97.4019 cv136.758 91.3628 li136.634 91.0322 136.51 91.0322 136.344 91.3628 cvcp147.678 94.1758 mo147.678 103.192 li147.678 103.482 147.636 104.392 147.802 104.558 cv148.422 105.178 149.87 105.426 150.738 105.426 cv153.427 105.426 155.991 103.979 155.991 99.5942 cv155.991 95.375 153.179 93.0176 149.58 92.9761 cv147.76 92.9761 147.678 93.3071 147.678 94.1758 cvcp147.181 105.881 mo147.057 105.881 146.023 105.922 145.444 105.922 cv144.41 105.922 143.79 105.881 142.962 105.881 cv142.259 105.881 141.597 105.964 140.894 105.964 cv140.77 105.964 140.356 105.964 140.356 105.716 cv140.356 105.095 141.846 105.343 141.846 104.392 cv141.846 103.854 141.349 102.696 141.101 102.035 cv140.274 99.9663 li140.025 99.3872 139.901 99.0151 139.198 99.0151 cv133.656 99.0151 li133.16 99.0151 132.705 99.0151 132.456 99.5527 cv130.885 103.068 li130.802 103.234 130.678 103.606 130.678 103.937 cv130.678 105.674 132.456 104.93 132.456 105.591 cv132.456 106.046 132.125 105.964 131.794 105.964 cv131.091 105.964 130.388 105.881 129.685 105.881 cv129.023 105.881 128.32 105.964 127.658 105.964 cv127.534 105.964 127.452 105.84 127.452 105.674 cv127.452 105.178 128.61 105.591 129.271 104.144 cv135.269 91.3628 li136.758 88.1782 136.841 87.7646 137.172 87.7646 cv137.461 87.7646 137.626 88.5093 137.709 88.7158 cv142.921 101.662 li143.293 102.572 143.583 103.606 144.162 104.516 cv144.575 105.095 144.948 105.302 145.444 105.302 cv145.857 105.302 146.188 104.806 146.188 103.979 cv146.188 94.5479 li146.188 92.604 144.658 93.2241 144.658 92.6865 cv144.658 92.5625 144.782 92.521 144.906 92.521 cv145.485 92.521 146.064 92.604 146.602 92.604 cv147.884 92.604 149.084 92.521 150.738 92.521 cv154.088 92.521 157.397 95.0444 157.397 98.5601 cv157.397 102.903 155.33 105.922 150.077 105.922 cv149.084 105.922 148.132 105.881 147.181 105.881 cvcp0.65332 104.72 mo0.0473633 101.448 li-0.0737305 100.964 0.0473633 100.661 0.289551 100.661 cv0.65332 100.661 0.65332 100.964 0.774414 101.509 cv1.07715 102.66 2.59229 105.326 6.10596 105.326 cv8.5293 105.326 10.8921 103.993 10.8921 101.327 cv10.8921 96.4199 0.592773 99.146 0.592773 92.5425 cv0.592773 89.3315 3.31885 87.7563 6.22705 87.7563 cv9.31689 87.7563 10.1045 88.665 10.4683 88.665 cv10.7104 88.665 10.771 88.3618 11.0132 88.3618 cv11.1953 88.3618 11.3164 88.4834 11.3164 88.7256 cv11.6797 92.1787 li11.7402 92.4214 11.6797 92.603 11.4375 92.603 cv11.1343 92.603 10.9526 92.0576 10.8921 91.8154 cv10.165 89.6343 8.28711 88.5439 6.04541 88.5439 cv4.0459 88.5439 1.92529 89.5132 1.92529 91.8154 cv1.92529 96.6016 12.2251 93.8149 12.2251 100.782 cv12.2251 102.963 10.7104 106.114 4.95508 106.114 cv3.07666 106.114 0.713867 105.205 0.65332 104.72 cvcp163.768 105.137 mo163.561 105.633 163.437 106.253 163.147 106.253 cv162.816 106.253 162.609 105.426 162.444 105.054 cv157.77 93.9688 li157.315 92.8521 156.281 93.1831 156.281 92.7695 cv156.281 92.604 156.405 92.521 156.57 92.521 cv157.149 92.521 157.729 92.604 158.308 92.604 cv158.804 92.604 159.548 92.521 159.796 92.521 cv159.92 92.521 160.044 92.604 160.044 92.6865 cv160.086 92.9761 159.3 92.9761 159.3 93.6792 cv159.3 93.9272 159.383 94.2173 159.466 94.4238 cv162.774 102.2 li163.229 103.234 163.313 103.647 163.519 103.647 cv163.726 103.647 163.768 103.358 163.892 103.11 cv167.159 95.0029 li167.283 94.7134 167.531 94.0928 167.449 93.7207 cv167.449 92.8521 166.208 93.1831 166.208 92.7695 cv166.208 92.5625 166.332 92.521 166.497 92.521 cv166.911 92.521 167.325 92.604 167.779 92.604 cv168.689 92.604 168.938 92.521 169.227 92.521 cv169.434 92.521 169.558 92.604 169.558 92.7695 cv169.558 93.1831 169.021 92.6865 168.482 93.9688 cv163.768 105.137 licp19.5557 105.932 mo18.1021 105.932 16.6475 105.811 15.1938 105.871 cv14.4668 105.871 13.6187 105.932 12.8916 105.932 cv12.71 105.932 12.5884 105.871 12.5884 105.75 cv12.6494 105.508 12.8311 105.568 13.4365 105.265 cv13.9214 105.023 13.9819 104.478 13.9819 103.569 cv13.9819 94.9053 li13.9819 94.0571 13.9819 93.1479 12.9521 92.9663 cv12.7705 92.9663 12.3462 92.9058 12.3462 92.6636 cv12.3462 92.5425 12.4673 92.4819 13.0127 92.4819 cv16.6475 92.4819 17.6172 92.5425 18.4048 92.5425 cv18.8286 92.5425 20.5254 92.4819 21.1309 92.4819 cv21.313 92.4819 21.313 92.6636 21.313 92.8452 cv21.313 94.9658 21.0703 95.1475 20.9492 95.1475 cv20.4648 95.1475 20.8281 94.2388 20.4648 93.8149 cv20.0405 93.1479 18.0415 93.2695 17.2539 93.2695 cv15.436 93.2695 15.4966 93.209 15.4966 94.481 cv15.4966 97.9951 li15.4966 98.6616 15.436 98.6616 16.1631 98.6616 cv18.2231 98.6616 li20.2222 98.6616 19.7378 97.147 20.1616 97.147 cv20.3433 97.147 20.4038 97.3286 20.4038 97.5103 cv20.4038 98.1768 20.3433 98.7827 20.3433 99.3887 cv20.3433 99.873 20.4038 100.418 20.4038 100.903 cv20.4038 101.085 20.2827 101.146 20.1616 101.146 cv19.5557 101.146 20.2222 99.5098 18.647 99.5098 cv15.7998 99.5098 li15.436 99.5098 15.4966 99.8125 15.4966 100.116 cv15.4966 103.569 li15.4966 104.72 15.3149 105.205 16.8901 105.205 cv21.313 105.205 21.979 103.206 22.2217 103.206 cv22.3428 103.206 22.3428 103.387 22.3428 103.448 cv22.3428 104.114 21.8579 104.781 21.4341 105.265 cv20.7676 105.992 20.4038 105.932 19.5557 105.932 cvcp28.9463 105.144 mo28.7646 105.629 28.583 106.235 28.3408 106.235 cv28.0376 106.235 27.7954 105.447 27.6138 105.023 cv22.8882 93.936 li22.4033 92.7847 21.4341 93.1479 21.4341 92.7241 cv21.4341 92.5425 21.5552 92.4819 21.7368 92.4819 cv22.2822 92.4819 22.8882 92.5425 23.4937 92.5425 cv23.9785 92.5425 24.7056 92.4819 24.9478 92.4819 cv25.0693 92.4819 25.251 92.5425 25.251 92.6636 cv25.251 92.9058 24.4634 92.9058 24.4634 93.6328 cv24.4634 93.8755 24.5845 94.1782 24.645 94.3599 cv27.9771 102.236 li28.4014 103.206 28.5225 103.629 28.7041 103.629 cv28.8857 103.629 28.9463 103.327 29.0679 103.145 cv32.3999 94.9658 li32.521 94.6631 32.7026 94.0571 32.6421 93.6328 cv32.6421 92.7847 31.4307 93.1479 31.4307 92.7241 cv31.4307 92.5425 31.5518 92.4819 31.7334 92.4819 cv32.1577 92.4819 32.5815 92.5425 32.9453 92.5425 cv33.9146 92.5425 34.1567 92.4819 34.46 92.4819 cv34.6416 92.4819 34.7627 92.5425 34.7627 92.7241 cv34.7627 93.1479 34.2173 92.6636 33.6724 93.936 cv28.9463 105.144 licp195.037 93.5552 mo193.837 93.5552 193.796 93.8447 193.465 94.8789 cv193.382 95.0854 193.382 95.334 193.134 95.334 cv193.01 95.334 192.969 95.1685 192.969 95.0854 cv193.176 93.2656 li193.176 93.0176 193.176 92.521 193.506 92.521 cv194.996 92.521 196.443 92.604 198.884 92.604 cv202.317 92.604 204.054 92.521 204.426 92.521 cv204.881 92.521 204.964 92.645 205.005 93.0591 cv205.088 94.5894 li205.088 94.7544 205.129 95.0029 204.881 95.0029 cv204.178 95.0029 205.212 93.5552 203.268 93.5552 cv200.538 93.5552 li199.835 93.5552 199.793 93.5967 199.793 94.4653 cv199.793 104.144 li199.793 105.757 201.324 105.137 201.324 105.716 cv201.324 105.757 201.365 105.922 201.159 105.922 cv200.704 105.922 200.166 105.881 199.628 105.881 cv197.519 105.881 197.146 105.922 197.022 105.922 cv196.857 105.922 196.815 105.881 196.815 105.674 cv196.815 105.219 198.305 105.426 198.305 104.268 cv198.305 94.4238 li198.305 94.2998 198.346 93.5552 198.056 93.5552 cv195.037 93.5552 licp179.485 92.521 mo179.816 92.521 180.105 92.604 180.395 92.604 cv180.685 92.604 180.974 92.521 181.264 92.521 cv181.47 92.521 181.636 92.8105 181.76 92.9351 cv190.818 103.027 li190.901 103.151 190.983 103.234 191.025 103.234 cv191.066 103.234 191.108 103.151 191.108 103.027 cv191.108 95.0854 li191.108 92.604 188.998 93.3486 188.998 92.6865 cv188.998 92.5625 189.081 92.521 189.205 92.521 cv189.743 92.521 190.322 92.604 190.901 92.604 cv191.563 92.604 192.39 92.521 192.845 92.521 cv192.928 92.521 193.01 92.5625 193.01 92.6865 cv193.01 93.1831 191.894 92.8521 191.894 94.2173 cv191.894 105.178 li191.894 105.757 191.894 106.005 191.728 106.005 cv191.604 106.005 191.397 105.922 191.025 105.467 cv182.876 96.2852 li182.835 96.2852 182.587 95.9541 182.463 95.9541 cv182.38 95.9541 182.339 95.9956 182.339 96.3677 cv182.339 104.144 li182.339 105.84 183.993 105.178 183.993 105.674 cv183.993 105.798 183.993 105.922 183.787 105.922 cv183.332 105.922 182.794 105.881 181.884 105.881 cv181.222 105.881 180.229 105.922 180.105 105.922 cv179.857 105.922 179.857 105.84 179.857 105.716 cv179.857 105.054 181.512 105.881 181.512 103.234 cv181.512 96.2437 li181.512 92.3145 179.237 93.3896 179.237 92.6865 cv179.237 92.604 179.402 92.521 179.485 92.521 cvcp175.307 98.6841 mo177.292 98.6841 176.796 97.1538 177.251 97.1538 cv177.375 97.1538 177.458 97.3604 177.458 97.5259 cv177.458 98.188 177.417 98.8081 177.417 99.4287 cv177.417 99.9248 177.458 100.421 177.458 100.917 cv177.458 101.083 177.375 101.166 177.251 101.166 cv176.672 101.166 177.292 99.5112 175.721 99.5112 cv172.908 99.5112 li172.495 99.5112 172.578 99.8423 172.578 100.132 cv172.578 103.606 li172.578 104.723 172.412 105.178 173.984 105.178 cv178.368 105.178 179.03 103.234 179.278 103.234 cv179.402 103.234 179.402 103.399 179.402 103.441 cv179.402 104.144 178.906 104.806 178.492 105.302 cv177.872 105.964 177.458 105.922 176.631 105.922 cv175.183 105.922 173.735 105.84 172.288 105.881 cv171.543 105.881 170.757 105.922 169.972 105.922 cv169.806 105.922 169.682 105.881 169.682 105.757 cv169.723 105.509 169.93 105.55 170.509 105.261 cv171.006 105.012 171.047 104.516 171.047 103.606 cv171.047 94.9614 li171.047 94.0928 171.047 93.1831 170.054 93.0591 cv169.889 93.0176 169.475 92.9761 169.475 92.728 cv169.475 92.604 169.599 92.521 170.137 92.521 cv173.694 92.521 174.687 92.604 175.514 92.604 cv175.886 92.604 177.624 92.521 178.203 92.521 cv178.368 92.521 178.41 92.6865 178.41 92.9351 cv178.41 95.0444 178.12 95.1685 178.037 95.1685 cv177.583 95.1685 177.872 94.2583 177.583 93.8447 cv177.086 93.1831 175.101 93.3071 174.356 93.3071 cv172.536 93.3071 172.578 93.2241 172.578 94.5063 cv172.578 98.022 li172.578 98.6841 172.536 98.6841 173.281 98.6841 cv175.307 98.6841 licp89.9561 99.146 mo89.9561 100.055 90.0166 100.055 89.2896 100.297 cv85.4121 101.63 li85.0483 101.751 84.7456 101.933 84.564 101.933 cv84.2607 101.933 84.3213 101.57 84.3213 101.388 cv84.3213 100.418 84.2607 100.418 84.9878 100.176 cv88.8652 98.8433 li89.1685 98.7222 89.5317 98.5405 89.7134 98.5405 cv90.0166 98.5405 89.9561 98.9644 89.9561 99.146 cvcp70.1445 92.4819 mo70.8716 92.4819 71.5381 92.5425 72.2651 92.5425 cv72.8711 92.5425 73.4766 92.4819 74.022 92.4819 cv74.3853 92.4819 74.3853 92.5425 74.3853 92.6636 cv74.3853 93.0273 73.0527 92.6636 73.0527 94.1177 cv73.0527 98.2378 li73.0527 98.48 73.0527 98.5405 73.2949 98.5405 cv80.2622 98.5405 li80.5044 98.5405 80.4438 98.0557 80.4438 97.9951 cv80.4438 94.1177 li80.4438 92.7847 78.9897 93.0874 78.9897 92.6636 cv78.9897 92.5425 79.0503 92.4819 79.3535 92.4819 cv79.9595 92.4819 80.9287 92.5425 81.292 92.5425 cv82.019 92.5425 82.3223 92.4819 82.6855 92.4819 cv83.1704 92.4819 83.231 92.6636 83.231 92.7847 cv83.231 93.0874 81.9585 92.7847 81.9585 94.1177 cv81.9585 104.175 li81.9585 105.568 83.6548 105.205 83.6548 105.689 cv83.6548 105.75 83.5942 105.932 83.4731 105.932 cv82.9282 105.932 82.3828 105.871 81.6558 105.871 cv80.4438 105.871 79.8989 105.932 79.5352 105.932 cv79.4141 105.932 79.1113 105.992 79.1113 105.689 cv79.1113 105.205 80.4438 105.508 80.4438 104.296 cv80.4438 99.752 li80.4438 99.4492 80.5044 99.2671 80.2622 99.2671 cv73.2344 99.2671 li73.0527 99.2671 73.0527 99.3887 73.0527 99.5703 cv73.0527 104.296 li73.0527 105.629 74.8096 105.205 74.8096 105.811 cv74.8096 105.871 74.6885 105.932 74.5068 105.932 cv74.2642 105.932 72.8711 105.871 71.9014 105.871 cv70.5083 105.871 70.3262 105.932 70.2656 105.932 cv70.084 105.932 70.0234 105.871 70.0234 105.629 cv70.0234 105.083 71.5381 105.75 71.5381 103.872 cv71.5381 94.1177 li71.5381 92.7241 69.8418 93.0874 69.8418 92.6636 cv69.8418 92.4819 70.0234 92.4819 70.1445 92.4819 cvcp60.0874 93.5117 mo58.8755 93.5117 58.8755 93.8149 58.5122 94.8447 cv58.4517 95.0264 58.4517 95.2686 58.2095 95.2686 cv58.0879 95.2686 58.0273 95.1475 58.0273 95.0264 cv58.2095 93.209 li58.27 92.9663 58.2095 92.4819 58.5728 92.4819 cv60.0269 92.4819 61.5415 92.5425 63.9648 92.5425 cv67.418 92.5425 69.1753 92.4819 69.5386 92.4819 cv69.9629 92.4819 70.0234 92.5425 70.084 93.0273 cv70.2051 94.5415 li70.2051 94.7236 70.2051 94.9658 69.9629 94.9658 cv69.2964 94.9658 70.3262 93.5117 68.3877 93.5117 cv65.6611 93.5117 li64.813 93.5117 64.8735 93.4512 64.8735 94.4204 cv64.8735 104.175 li64.8735 105.75 66.4487 105.144 66.4487 105.689 cv66.4487 105.75 66.4487 105.932 66.2671 105.932 cv65.7822 105.932 65.2373 105.871 64.6919 105.871 cv62.5713 105.871 62.208 105.932 62.0869 105.932 cv61.9048 105.932 61.8442 105.871 61.8442 105.689 cv61.8442 105.205 63.3589 105.447 63.3589 104.296 cv63.3589 94.3599 li63.3589 94.2388 63.48 93.5117 63.1772 93.5117 cv60.0874 93.5117 licp44.4565 92.4819 mo44.7593 92.4819 45.0625 92.5425 45.3652 92.5425 cv45.6074 92.5425 45.9106 92.4819 46.2134 92.4819 cv46.4556 92.4819 46.5767 92.7847 46.6978 92.9058 cv55.7856 103.023 li55.9067 103.145 55.9678 103.206 56.0283 103.206 cv56.0889 103.206 56.0889 103.145 56.0889 103.023 cv56.0889 95.0264 li56.0889 92.5425 53.9683 93.2695 53.9683 92.6636 cv53.9683 92.5425 54.0894 92.4819 54.2104 92.4819 cv54.7559 92.4819 55.3013 92.5425 55.9067 92.5425 cv56.5732 92.5425 57.3613 92.4819 57.8457 92.4819 cv57.9668 92.4819 58.0273 92.5425 58.0273 92.603 cv58.0273 93.1479 56.8765 92.7847 56.8765 94.1782 cv56.8765 105.205 li56.8765 105.75 56.8765 105.992 56.7554 105.992 cv56.5732 105.992 56.3916 105.932 56.0283 105.508 cv47.8491 96.2383 li47.7886 96.2383 47.5464 95.8745 47.4253 95.8745 cv47.3643 95.8745 47.3042 95.9351 47.3042 96.3594 cv47.3042 104.114 li47.3042 105.871 48.9395 105.205 48.9395 105.689 cv48.9395 105.811 48.9395 105.932 48.7578 105.932 cv48.2729 105.932 47.7886 105.871 46.8188 105.871 cv46.1528 105.871 45.1836 105.932 45.0625 105.932 cv44.8198 105.932 44.8198 105.811 44.8198 105.75 cv44.8198 105.083 46.4556 105.932 46.4556 103.206 cv46.4556 96.1777 li46.4556 92.2397 44.1533 93.3301 44.1533 92.6636 cv44.1533 92.5425 44.335 92.4819 44.4565 92.4819 cvcp40.5791 98.6616 mo42.5781 98.6616 42.0332 97.147 42.5176 97.147 cv42.6997 97.147 42.6997 97.3286 42.6997 97.5103 cv42.6997 98.1768 42.6997 98.7827 42.6997 99.3887 cv42.6997 99.873 42.6997 100.418 42.6997 100.903 cv42.6997 101.085 42.6387 101.146 42.5176 101.146 cv41.9116 101.146 42.5781 99.5098 41.0029 99.5098 cv38.1558 99.5098 li37.7314 99.5098 37.792 99.8125 37.792 100.116 cv37.792 103.569 li37.792 104.72 37.6709 105.205 39.2461 105.205 cv43.6689 105.205 44.335 103.206 44.5776 103.206 cv44.6987 103.206 44.6987 103.387 44.6987 103.448 cv44.6987 104.114 44.2139 104.781 43.7295 105.265 cv43.1235 105.992 42.6997 105.932 41.9116 105.932 cv40.458 105.932 39.0039 105.811 37.5498 105.871 cv36.7622 105.871 35.9746 105.932 35.2476 105.932 cv35.0659 105.932 34.9443 105.871 34.9443 105.75 cv35.0054 105.508 35.187 105.568 35.7925 105.265 cv36.2773 105.023 36.3379 104.478 36.3379 103.569 cv36.3379 94.9053 li36.3379 94.0571 36.3379 93.1479 35.3081 92.9663 cv35.126 92.9663 34.7021 92.9058 34.7021 92.6636 cv34.7021 92.5425 34.8232 92.4819 35.3687 92.4819 cv39.0039 92.4819 39.9731 92.5425 40.7607 92.5425 cv41.124 92.5425 42.8813 92.4819 43.4873 92.4819 cv43.6689 92.4819 43.6689 92.6636 43.6689 92.8452 cv43.6689 94.9658 43.4263 95.1475 43.3052 95.1475 cv42.8208 95.1475 43.1841 94.2388 42.8208 93.8149 cv42.3359 93.1479 40.3364 93.2695 39.6094 93.2695 cv37.792 93.2695 37.792 93.209 37.792 94.481 cv37.792 97.9951 li37.792 98.6616 37.792 98.6616 38.519 98.6616 cv40.5791 98.6616 licp205.336 92.521 mo206.039 92.521 206.701 92.604 207.404 92.604 cv208.024 92.604 208.604 92.521 209.183 92.521 cv209.472 92.521 209.555 92.5625 209.555 92.6865 cv209.555 93.1416 208.19 92.728 208.19 94.1343 cv208.19 104.309 li208.19 105.633 209.844 105.178 209.844 105.757 cv209.844 105.881 209.803 105.922 209.472 105.922 cv209.059 105.922 208.231 105.881 207.404 105.881 cv206.246 105.881 205.874 105.922 205.584 105.922 cv205.253 105.922 205.212 105.84 205.212 105.633 cv205.212 105.095 206.66 105.716 206.66 103.854 cv206.66 94.1343 li206.66 92.7695 205.129 93.1416 205.129 92.728 cv205.129 92.5625 205.171 92.521 205.336 92.521 cvcp114.06 92.4819 mo114.545 92.4819 114.908 92.5425 116.181 92.5425 cv116.847 92.5425 117.332 92.4819 117.513 92.4819 cv117.695 92.4819 117.877 92.4819 117.877 92.6636 cv117.877 92.9663 117.029 92.9663 117.029 93.5117 cv117.029 93.8755 117.271 94.1782 117.332 94.2993 cv119.634 97.9951 li119.815 98.2378 119.937 98.3589 120.058 98.3589 cv120.119 98.3589 120.24 98.2378 120.421 97.9346 cv122.36 94.7842 li122.481 94.5415 122.784 94.2388 122.784 93.7539 cv122.784 92.7847 121.33 93.209 121.33 92.7241 cv121.33 92.4819 121.512 92.4819 121.754 92.4819 cv122.178 92.4819 122.663 92.5425 123.148 92.5425 cv123.693 92.5425 124.238 92.4819 124.784 92.4819 cv124.905 92.4819 124.965 92.603 124.965 92.6636 cv124.965 92.9058 124.663 92.9663 124.542 93.0273 cv123.996 93.3301 123.753 93.8755 123.451 94.3599 cv120.785 98.5405 li120.482 98.9644 120.361 99.0859 120.361 99.3887 cv120.361 104.054 li120.361 105.689 121.875 105.144 121.875 105.75 cv121.875 105.932 121.754 105.932 121.452 105.932 cv121.209 105.932 120.058 105.871 119.392 105.871 cv118.543 105.871 117.816 105.932 117.635 105.932 cv117.513 105.932 117.392 105.932 117.392 105.689 cv117.392 105.205 118.846 105.689 118.846 104.296 cv118.846 99.6914 li118.846 99.3281 118.543 98.9644 118.422 98.7222 cv115.211 93.6328 li114.727 92.8452 113.818 93.0874 113.818 92.7241 cv113.818 92.603 113.878 92.4819 114.06 92.4819 cvcp110.797 99.8125 mo111.221 99.8125 111.221 99.6914 111.1 99.4492 cv109.222 94.8447 li109.162 94.6025 109.041 94.6025 108.919 94.8447 cv106.798 99.5098 li106.677 99.752 106.798 99.8125 107.041 99.8125 cv110.797 99.8125 licp106.92 100.661 mo106.556 100.661 106.193 100.661 106.011 101.085 cv104.799 103.75 li104.739 103.872 104.618 104.175 104.618 104.417 cv104.618 105.75 106.011 105.144 106.011 105.629 cv106.011 105.992 105.708 105.932 105.466 105.932 cv104.92 105.932 104.436 105.871 103.891 105.871 cv103.345 105.871 102.86 105.932 102.376 105.932 cv102.255 105.932 102.194 105.871 102.194 105.75 cv102.194 105.326 103.103 105.629 103.587 104.539 cv108.131 94.8447 li109.222 92.4819 109.283 92.1787 109.585 92.1787 cv109.767 92.1787 109.889 92.7241 109.949 92.8452 cv113.948 102.66 li114.25 103.387 114.432 104.175 114.856 104.841 cv115.462 105.689 116.553 105.265 116.553 105.75 cv116.553 105.932 116.432 105.932 116.311 105.932 cv115.523 105.932 114.735 105.871 113.948 105.871 cv113.402 105.871 112.917 105.932 112.373 105.932 cv112.312 105.932 111.948 105.932 111.948 105.75 cv111.948 105.265 113.1 105.508 113.1 104.781 cv113.1 104.356 112.736 103.448 112.554 102.963 cv111.948 101.388 li111.767 100.964 111.646 100.661 111.1 100.661 cv106.92 100.661 licp96.6201 105.447 mo99.3467 105.447 101.891 103.993 101.891 99.5703 cv101.891 95.3291 99.1045 92.9663 95.4692 92.9058 cv93.6514 92.9058 93.5908 93.209 93.5908 94.1177 cv93.5908 103.206 li93.5908 103.508 93.5303 104.417 93.7124 104.539 cv94.3179 105.205 95.772 105.447 96.6201 105.447 cvcp90.8042 92.4819 mo91.4097 92.4819 91.9551 92.5425 92.5005 92.5425 cv93.7729 92.5425 94.9844 92.4819 96.6201 92.4819 cv100.013 92.4819 103.345 95.0264 103.345 98.5405 cv103.345 102.902 101.285 105.932 95.9536 105.932 cv94.9844 105.932 94.0151 105.871 93.0459 105.871 cv92.9248 105.871 91.0464 105.932 90.9253 105.932 cv90.8042 105.932 90.7437 105.871 90.7437 105.75 cv90.7437 105.326 92.0762 105.811 92.0762 103.993 cv92.0762 94.481 li92.0762 92.5425 90.562 93.1479 90.562 92.6636 cv90.562 92.5425 90.6831 92.4819 90.8042 92.4819 cvcpf245.917 87.9038 mo250.638 87.9038 251.944 89.8379 252.673 89.8379 cv252.874 89.8379 253.024 89.5869 253.275 89.5869 cv253.552 89.5869 253.552 89.9888 253.627 91.6211 cv253.677 92.9521 253.904 93.7813 253.477 93.7813 cv253.175 93.7813 253 93.1279 252.899 92.9521 cv251.342 90.2646 249.559 88.6323 246.318 88.6323 cv241.421 88.6323 239.06 91.8975 239.06 96.5688 cv239.06 100.939 241.572 105.309 246.394 105.309 cv250.337 105.309 252.798 102.798 253.175 101.643 cv253.226 101.467 253.376 101.316 253.527 101.316 cv253.652 101.316 253.778 101.467 253.753 101.592 cv253.175 104.104 li253.15 104.204 251.367 106.088 245.716 106.088 cv240.567 106.088 236.875 102.546 236.875 97.3477 cv236.875 92.1484 240.617 87.9038 245.917 87.9038 cvcpf205.17 71.5503 mo205.365 71.5503 li205.67 71.5503 205.824 71.4028 205.824 71.106 cv205.824 70.9556 205.766 70.8306 205.652 70.729 cv205.539 70.6284 205.398 70.5776 205.23 70.5776 cv205.124 70.5776 205.07 70.6196 205.07 70.7046 cv205.074 70.7622 li205.074 71.4517 li205.074 71.4985 205.078 71.5259 205.087 71.5356 cv205.097 71.5454 205.125 71.5503 205.17 71.5503 cvcp205.72 71.6255 mo206.184 72.3032 li206.242 72.3853 li206.387 72.5972 206.518 72.7056 206.634 72.7114 cv206.689 72.7144 li206.726 72.7163 206.744 72.7329 206.742 72.7661 cv206.738 72.8228 206.646 72.8511 206.468 72.8511 cv206.263 72.8511 206.079 72.7271 205.915 72.481 cv205.48 71.8267 li205.457 71.7886 li205.433 71.7495 205.394 71.73 205.34 71.73 cv205.108 71.73 li205.082 71.7329 li205.074 71.7681 li205.074 72.3735 li205.074 72.5083 205.091 72.5962 205.127 72.6392 cv205.164 72.6802 205.246 72.7085 205.373 72.7222 cv205.429 72.728 205.458 72.7485 205.46 72.7856 cv205.462 72.8247 205.435 72.8433 205.377 72.8433 cv205.36 72.8433 205.325 72.8403 205.271 72.8345 cv205.226 72.8286 205.153 72.8257 205.05 72.8257 cv204.789 72.8257 li204.755 72.8257 204.707 72.8296 204.644 72.8374 cv204.599 72.8413 204.57 72.8433 204.556 72.8433 cv204.505 72.8433 204.48 72.8237 204.48 72.7847 cv204.48 72.7554 204.501 72.7358 204.544 72.7261 cv204.634 72.7046 204.692 72.6655 204.716 72.6079 cv204.741 72.5503 204.753 72.4263 204.753 72.2349 cv204.753 71.0024 li204.75 70.8247 li204.75 70.6587 204.692 70.5679 204.576 70.5503 cv204.494 70.5386 li204.443 70.5288 204.417 70.5063 204.417 70.4712 cv204.417 70.4331 204.445 70.4136 204.499 70.4136 cv204.512 70.4136 204.554 70.4165 204.624 70.4224 cv204.661 70.4243 204.712 70.4253 204.778 70.4253 cv204.833 70.4253 204.922 70.4214 205.048 70.4136 cv205.144 70.4087 205.226 70.4058 205.296 70.4058 cv205.853 70.4058 206.132 70.6099 206.132 71.02 cv206.132 71.2778 205.995 71.479 205.72 71.6255 cvcp205.458 69.7808 mo204.948 69.7808 204.511 69.9614 204.15 70.3228 cv203.789 70.6851 203.609 71.1216 203.609 71.6323 cv203.609 72.1431 203.789 72.5796 204.15 72.9419 cv204.511 73.3032 204.948 73.4839 205.458 73.4839 cv205.968 73.4839 206.404 73.3032 206.765 72.9419 cv207.126 72.5796 207.308 72.1431 207.308 71.6323 cv207.308 71.1196 207.127 70.6821 206.767 70.3218 cv206.407 69.9614 205.97 69.7808 205.458 69.7808 cvcp205.458 69.5503 mo206.035 69.5503 206.525 69.7524 206.93 70.1587 cv207.335 70.564 207.539 71.0552 207.539 71.6313 cv207.539 72.2065 207.335 72.6968 206.929 73.1021 cv206.523 73.5083 206.033 73.7104 205.458 73.7104 cv204.814 73.7104 204.287 73.4663 203.876 72.9771 cv203.544 72.5825 203.378 72.1343 203.378 71.6313 cv203.378 71.1196 203.542 70.6694 203.873 70.2798 cv204.289 69.7935 204.818 69.5503 205.458 69.5503 cvcpf233.17 90.0513 mo233.364 90.0513 li233.67 90.0513 233.823 89.9028 233.823 89.606 cv233.823 89.4556 233.766 89.3306 233.651 89.229 cv233.538 89.1294 233.397 89.0786 233.229 89.0786 cv233.124 89.0786 233.07 89.1206 233.07 89.2056 cv233.073 89.2622 li233.073 89.9526 li233.073 89.9985 233.078 90.0269 233.086 90.0356 cv233.096 90.0454 233.124 90.0513 233.17 90.0513 cvcp233.719 90.1255 mo234.184 90.8032 li234.242 90.8862 li234.387 91.0981 234.518 91.2056 234.633 91.2114 cv234.688 91.2153 li234.725 91.2173 234.743 91.2339 234.741 91.2661 cv234.737 91.3228 234.646 91.3521 234.468 91.3521 cv234.263 91.3521 234.079 91.228 233.915 90.981 cv233.479 90.3267 li233.456 90.2896 li233.432 90.2505 233.393 90.231 233.34 90.231 cv233.108 90.231 li233.082 90.2329 li233.073 90.2681 li233.073 90.8745 li233.073 91.0083 233.09 91.0972 233.127 91.1392 cv233.163 91.1812 233.245 91.2095 233.372 91.2231 cv233.428 91.229 233.458 91.2495 233.459 91.2856 cv233.461 91.3247 233.434 91.3442 233.377 91.3442 cv233.36 91.3442 233.325 91.3403 233.271 91.3345 cv233.226 91.3286 233.153 91.3267 233.05 91.3267 cv232.788 91.3267 li232.754 91.3267 232.707 91.3306 232.644 91.3384 cv232.598 91.3423 232.569 91.3442 232.555 91.3442 cv232.504 91.3442 232.479 91.3247 232.479 91.2856 cv232.479 91.2563 232.5 91.2368 232.543 91.2271 cv232.633 91.2056 232.692 91.1665 232.715 91.1079 cv232.741 91.0513 232.752 90.9263 232.752 90.7358 cv232.752 89.5034 li232.75 89.3247 li232.75 89.1597 232.692 89.0688 232.576 89.0513 cv232.493 89.0396 li232.442 89.0298 232.417 89.0073 232.417 88.9722 cv232.417 88.9341 232.444 88.9146 232.499 88.9146 cv232.512 88.9146 232.553 88.9165 232.624 88.9224 cv232.661 88.9243 232.711 88.9263 232.778 88.9263 cv232.833 88.9263 232.922 88.9224 233.048 88.9146 cv233.143 88.9087 233.226 88.9067 233.295 88.9067 cv233.852 88.9067 234.131 89.1108 234.131 89.52 cv234.131 89.7778 233.995 89.98 233.719 90.1255 cvcp233.458 88.2817 mo232.948 88.2817 232.511 88.4614 232.15 88.8237 cv231.789 89.186 231.608 89.6216 231.608 90.1333 cv231.608 90.6431 231.789 91.0806 232.15 91.4419 cv232.511 91.8032 232.948 91.9849 233.458 91.9849 cv233.967 91.9849 234.404 91.8032 234.765 91.4419 cv235.126 91.0806 235.307 90.6431 235.307 90.1333 cv235.307 89.6196 235.127 89.1831 234.766 88.8228 cv234.407 88.4614 233.969 88.2817 233.458 88.2817 cvcp233.458 88.0513 mo234.034 88.0513 234.524 88.2534 234.93 88.6587 cv235.334 89.0649 235.538 89.5552 235.538 90.1323 cv235.538 90.7075 235.334 91.1978 234.928 91.6021 cv234.522 92.0083 234.032 92.2114 233.458 92.2114 cv232.813 92.2114 232.286 91.9673 231.875 91.478 cv231.543 91.0825 231.377 90.6353 231.377 90.1323 cv231.377 89.6196 231.542 89.1704 231.873 88.7808 cv232.289 88.2935 232.817 88.0513 233.458 88.0513 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (Reger Smith Jr) (Gen Conf of Seventh-day Adventists)%%Title: (BW_1.EPS)%%CreationDate: 4/30/07 5:17 PM%AI9_DataStream%Gb!R&q-G#PZ8VX:JFC<>*+m[b\Oci/1VjJ+6QcKLJ-1J@`&;E"FoHWhrN.P@/ZIR^D@c'hqg?/"c8sph>%=NY<CrIu9(V0/qX3T[%V>9T!1@qWRCI_qpFN^99QR\9&]?cI[Z:rg>]a,!H4Z<_AZr;,G^k#:oC1oUcI(.\>H?j<hFUhU"X%'_7g3dSBg5G'XL\fPLWUaKP%]@aW?BP]M0O7c7.XBLE7qdS[KmbrK\jmfY(=tG$/jWX%sd-&I:qFtJ)9`O8Ep=%R0bB;hF.W&F/5Jk``r#rSCIigR0*U#>eb+M,&%]4X4+0C;O+OXaHa>@ecZr.fRe+3,s/*IQL$g>?*f]9Z`/4dh%cB$3mGcd]GMNLRP'VcE3@24o=ko*u`t*hOP>SH_fI"1:.O0E8d8%!Me`)B#FXLR;K47(Ick.Ln\o$^d"PAi^MC^2?(1&r+iRM>JIarl878)I/F4n=+'-oZoWtdrrZ3Y6`!(ZF7f(I6_ef%FOu'E',9u_%G+7*C#6E5])\7(]'T;sGWW2Mj8+kG-UB?G2I!EK$/s\jtqul=`X8h!hnJT:Mp7E:"8'M_4/W7KGm?Ki1%/@^IbD`^!D#;_6?O$Ab%9egCCnN*oZr*EDD^oSWnipF5CDXO)37CRl,c.:^Y>0t&;L\sBdo4k6&?R5Z4G7d=!kqnu"Q\!(UG?$el<S^r7(>#1]=.>71q*731%'j0]J+P_b7%KA$Z2uNfM^HD,Ee)(sg9dgH$"a-.)ka1eui8Figg2&WRT!t>@2+pjiY+(c;nj0s1$_*gZFPWN@$]P*gk$J*l]DJYF%Z"j7*GriFKUDD;!9mQd0GN5\**t(@4lgX#=e*()bi>#*dX1Zl,C#>5;Ra$VtJ*'OH2[)l'QN-Dej+'=<g4/*<h;+5BODG6s`ID/D%:cc2lq!l,0p=9#W_qe%frd9':Q.A4Cmr;"u[lt^_4l0qPn**XDrsOqMhiF,KLV*8TU.,SPW4+g3<tC;.^Y>=!A+/.&)S\P9C"#Q8%qU8f2LZYqoaV_!A?'i=U>L.Rpj"gSEHb+qP6Mjn[A+T4.Kld(Z[f5'TmWNJ,W8q@f14H/deQZV%j!p2i!;us`1Kb@2i_$ll@#R/4%S"J$iM%9PSm#8pSe61hjU%tn_@Ae5Q>q[N'#,T+X5t8Fc+!_EtGMlOgXBrQTs%1=DPu%FW5<m"LIfoI!O?U;<Da1>o2;tI*iW!V7%4fU`O\oJ8[[P@harb_Z16oBIks$B<Baq"@2_!h;tiXDW/=o?$)?D4Pg=NR6dB\Th&U)3of6;C@b/C5I1EY;"ZoiTa9[Oe[O;'.VQ%UDs;k6Hnbu:L_G>7#CaG8/-+#m[92>E[Y@*C'[?E$CpO`OdI\G>[$;iM"7(bi':i.pBM<1"dQOAh[cBR0'k\Xs7Jd0PSZtkhgf4d%?QM6mVTT?oouBOIY-`.m#C9rK(9u$Z,th)3I0g3Ul>A[0@iqN8!nmaTFIca)(APmu;^sFcZge!oK.nM"]q/^rW'>e6eY#YW>aDZP%AF*4+e>5)G>]oFUW>8\-s*W;FdN@T6j;1oi:\>aBrHG56VhZo9<oPjVU%G[A2&M=eC0ab/"U:Y7B(;M'pq^_E564,?#r&,pd8t$S%XOTCTT`#&i2\6Z%Fa&Ot;/cEXs$#8@m=CC]qW"(9eA!(IT&AdWfJK_BbEks+<7a,]qOuH>s1bOB"SHQ,Y&;(sCc.f/)8!Pc%5S[t%MZ;r=NHC#l:;)*k?i3oB[GSdn7.LFkgF2o"rS^227D,0gmKp<[0.)"n2ZEP[3]i[Pj;;8.-3kk0/>kY"L>F_^Q_+*#Nq'+EPgs>n%Hk4K&qo3c@Z,r.R>5f[8cZ2N_BO1)lQOf'"K\phss#4fe`P2auFY*A2VICP%(&>WDZ^gBSUVk&o*OR5YH,)IuP2ed@0;'uu7:#`h%__,g+qU^5%2#\#(KD*4=ec0f!%!/Z$Cd)A?o!6pL7TO=&l>St-O]CiKk!.%ORH7Le%h+eYc]*7r=Do.&2n)4X86k^M4"eQsWicM+%=c[S$lgD?*>@^j1i.$!Zpo.?ICK1<d`,P_)UPY'"HAq"T,,=u2^I%i3h`GYg[&t<h>koJ.rue0;dp737FR%JN%Lq0RBZPWr>RUR!%&TZ;,c_]t99?N"c_jqpR(j`9mmfaBq-##TqYHJU;V>]0`Pm;?!>X.+G3TLM-Wqk#!qt+=/r8FL$/:Xh34,qhIs!6^ULMb&R#H^J-%dJBn@5&1#-;dR5QldRTV*pu(=a1\:+WGLp_Tu4fhXo<G6;SQq1&":i.MPjVS[bJ=+H[.0CZe-ARr2!C<c8lmrhNpu?g!>u3<B8%[%q^8U:RkL?'%6jrf;0eIt]FWaoH+228N<`3b4KV+_[OpNtrKkec<13cGetK&?>^qK'\*kAF*pTb]ms0p0cWX;N[lTl#HL&.iL$.0$%<c1JZ3b*8Uct'i=-sttJ.\2I^X:_N"[-CHSk;lH9e_`%cGLt1JD07Y'(6i:?G*q)K)k*$RTP)ZA<^Uc5Sn6qZpRE>UJY#<<%d6l/%Q%-b0odo@>q,a?aN,H\sr_%V=FS0VIe0qdfXlb&,@,VT3T)=%B4kr1f^X:X02b_4#cq@TC<8&\J5A:]YcMuG)lG.'dlOWZdX-hoI%j^'fKf8]*6IT'S*CNbZ/R811d9f3aK]-llCZVBV("f_pjJh/<q\a](NWmNs[V+g3deZJu&"L>be0(n#&!Xle(G\XV)"N=Wn.!Y?.%?[]#bmb>un^T(O5mb6:7RW%NDNL%#Ml(.bFnoPU"Ap6\VN*%CZa!kD:a%pn\+;Z<,lh[LXo[N6g<;at@<L%/icrK\:6f,MH1(Oe[%[GK"Xo]rJT]mb3DrG(V%,.1PMjg$IQE\a)!r7-&5mEjr8;H.OrVoB28dD,5WL;SThCn#6'N?VT/"S3rPO]M$"=Yc`l9K[-]Nj78Y%b&IoS?P9k8DNi?.X(ICom@4KX!nT*9Z8m\ViH(jWU^_kgd3F%1e>g*YT=aX!X1EVYWd:P&X,#6rQc<T^[0a/.])7!AnB:gIpZ_6U%G(,dORcd`CfA/g3PadLb_##$o:H@0^lJ\JtlLF??63WjLgI=i][<=g(fA5T,6\G1$?LC4j3tKkW?6_2m\=NQ_nM=$K/S'u^T!*,g%*qEB>n'prOiQ=/,`*]<Xo]K7NK#'4:FWi-"S]Y!,S7[`c;._95'p2eR*JS80a86U<XJW>q\88&l2EA`QLA?O-WXfeXfqZ&0q5/])%5T@6d?iF>;CB5f"jY$hhnt[ejh$mX9AhUcX5'].gJ[B;RH5=+e'^OUu=Glb/lnZ>FQTu\\]:5^E5&82jZqE$*%GnFa`aEi1e_?F7%S]?$dO2n!-9Mu/hfLbk3Z$>)Go[)#gC/tWiXMDKm)*+"A[DkjuLX%@'\umqqG@8VdR!1+V$RFYIZh6P[*LeTK$E@E6$JeOZ2q;/"%'kRBm2"1'7mAp(N6e9eoggBkeCgT=i>lC3<qP_Wg;`g&uThG\"F(l.sNt5:UU&Nho*^mQ/^6=T5>@kiQD2]Ve7(6-co6.NuML5L/%hmr'kgCD-0Zg7`)$YYioHn2nj0XdR*]4s3EFtaYV#$u]OoIEF5ULGf,XJf3qB]EFM>O@r'<$OXQ8;X,DKfe"MHBi@?i9Y&i>p:";%h,LQc'TRNGTWH`12mK[sD;GfoM_^a47K$81q87BIY=^bOWU)*<r2[]os/]H&<jLr'E$H@AQ:2BMgA8Wod15]``HoJGG'Bp@@j#(M%-V4Sj"!mP6N[BV%g@og;+Bb:V,RYB'JZ7=;2mD7AIS&%kl^^K`$%-Pq@S!an!+!bq-f@hq!sQgf`Ck2piPGoqdB)P,&Aoa795h9(%f-hFaI%%Yqo:2!AUDih-6eh,Uo$SjL@YmkI-X9s5PgFJj]NF.?n`'KWO+5^3pdFii"+8QlN[dTL$nK7WGdnnT-%@Es+Kcq[iZAY3%\$n_CXatL!CRnc%f'_AUrLZa6p$9Nio]K,Zp$0$__-%)8d/WAqIXO<XF/'V#ENEsCZ`T/*C9+aAJ(f90q0fgEF8+.=%s(P5a.$X`%'!=r6^T<bOCTC[sJ$>=O_36gd3rR0;40Lim/tZB$=:;II[eodIiYuP+W3`f'/)%YnReZf`^@o`2>Ddp<BA\.2DoX2sO8b*_h>Z7L%S%Yh&`o\nV^Q$Lk)i%p%>AY2b!bYN2(6-Qk]mHo<<c1"Ede!+cBB\p,8($Gpk8!NjT-'D6/CfH_pBU\?ptSjP`n(\ZSrW0:kj2<K%!qX?D)#L=GXmbYH&6]QNAsYEr?Ft'd]dp,m2k;U?-@We'Rh,#UfpWn*Xkda*Bn(!uG]U*-/\$R7e5pB!>2d_DZL@5GD/Co5d2t:t%>FCKIp@!^?X@=jIk6nV'TG=e9dHKH0oYg:k6S5Ffp;FMVP1AdId\l$f,ge$K6I!*jVmC<Ep34t(D8#jPS=6Fi*W)8UW3p%c^WgHA%T6M*bq%XJfVi9.hqeg6jXaE_]l1i9i@V,RWpN()ERhO%MU/A1&W7f:R20UupJra-nYO%>&k]GGKDN93d.UHa#5'*3!CV'9J<aR\1%0KGP'<VIooI%Wr;2dNSUNW*Vi34\sWdHKSDGC4hFTGfC^Zt@YIO7k=J%2OC5:8TuHG&4b??CYl12gQ%*6S!b;]>iQr>WQ@4NI&(_%P:MX;oL@[$+1#nC4DH*p<qKCoHP:o,Qef#<Xc8lI.iF?C',<1mQ89FB])YI[BHA1jNcfa@e[sG@`pIb\URRmmPH=$)H9FJn^#b6V%J%sk@)Ug'YI(DK:IZ>b"VQ8+HMb!6^bd.J4#1(C\CYO2#7&+Dd;i-X&.Y1['IT=W2A,WuJeK-pYl&BSA^P'#$X"^s/rJ/CYC)#7<%Cj)`QkBS\Td;QAB@I;B6HD<RIH#7&$Gq?'p=I5fM]C!hI*q&kp5I286ZVIUn.)"$^r5@"U`QT99ZrBVWp#Q$V41!=uWQ)nu<hm:X%Qhfa.Zpm\'BQegtbPSNORQA8lkDmhD)uVpK<*RIXoXf&?W;iBa7Zk\'A)05\]3hZ+c)!=EIXZU*fk@^s4EZk=BW6U.mTMj,CMW/J%]Q)08:HP2Wdi*)2p?!_jUR08J@aiOj1[>N.>,nh'G\>Ld8rKefB@XjgkIMSfIlI&`I/W\#2#=A?BQSF&Gr@#g]oQc)UVN(ufugL:%j'7i'.q`\QA.YB8ot>:5f][^l9\l1fp#NbGJ4<U%am!)<s';HjEF#Hmk7Xk8np4>U-0Nh<lAisn)mf"M]l2Qe6?f2RAc1B;eeU+=%ED/4sXcPSTYO(0;Yq@\YW[9(fGOsYe4`>H<\5kD`(Dc`=D3JK[W)*`"qQG)*EQha:\eNjep[9c=a.2J9kO`-;C"P78?6edf((eCO%SbgmtQL<FW[Jk?!Sc@QC$[dA8e_WAGrS#NS^Fi`ucc^4[Y=-K>5?P>Z*C&lU<GQgF9:5D<]![$qrAj2q$gVd)^*@6kqtG#Mf&=`h%=OsZUlfe<8<7\7EFZfAqWd[[`QSGQ61)>]']/eE-F`KV<NrPR'B(!-hf#c27En[]RA)D%PQWMRiXKVB"0E1f_euo>0f88EUeuuij%+/`IYjG\6[r]RK7r;JR?okS*/+2;g$IXQ-?p_T(h2*k^g/QSFqnM7h]:U0,]]pnQXjTJe5ID1h(A!_sekL94HN3BFRD"$5pbP:aV%R[sE6H(Fr8GQ)^Vk&'9ser8;LK<`P_O*gN"4h3DWAcDO7XLe(RM>s%*I!4[]m&g0T\,$hOCit3hZYk=g>p%=o1u!AIm;`$ISbn@N%Ba*_'Z'&^F$KH/p<SfBN-<E-dQ@lNOY8_+ECL>]N<_J6P)lkL>X4>acKq2B&If!8n_#?=+4g!fPB9GqSic8_qHrHPR@5iS&ZkhMh%^>R<3#0cVh>IF=>'+9$Q/uN+oNN]h/:Q#G^_ekCfPOB"D\JRUo8)s/dUY[TV3R'se\1Z:4HZi$+VD^KLEP7Ie.+pTuNIkmQG"u>p%a7QXJB0UGUh40P57^$16SktE0p)c6Y:nqPIM$ZZ=s,Ci:o>-gPnL;.Kp[FG_'^S+dc"rWOIn_#+&n=Ats*K'emb,(n7U^Tbm6m_G%ME\kLrF\$GgAc:rUQ+V0_nAjDL-B40Q#qnB7`-h-.5%nErKLF5;J"g)@W>.bJGpiCIBdS\e'#ER:l]=>[6ca^dg*N*k8&6c2n_Pt%`nbk?97-6aC@!+CIpO9=N\_J3[q`suB62+00)j0Uh,oHc`^tU0GLOmk-`l6IgkSZraTo#=fY(;H+&a4)l_@O\d!p"#^Z\:oBOF'm%bo5;b)cS*AHR`$]U<V^#!+&aFJ*Nr#`[lLLEoTLFDej1f7se/RDVSgMT%5FO5BFG24u^n*PO)D2!,-?%Qp?)^<u,ZmCDHaX&EL.)%S_k_C_W=E[VrlRnpj^50Z8?d`-_0aor$a:!eBEg_P$OV>^4W]Ij.lX%:9:'rn^.\qT"LQ$K)5=L]ZeIBF.4LnI*Hnm*U/@D]n.-^%HS\lV5"in+j]",s%'e!\E,shuHQEW-=hiVaR@8?Tqh*4Bgg6&4;^sJ(ee"&<CjN75<gsEX""hh^)\'`-f-flMSKETkWE#WPq_cq\%rL2q*II>DC3r-H$nqI&fk)LFZ.<DutrF@I;D5ZhpDV1cO8jM')D9/Eq:F(Z1YDY-c<o]kLR\(q&bVBV$i3E$T?Lq$nZ'aU$^2>g^%pKrY\X(N_%po\_e.=H:#F[B.gQ>(30!!UfXi-re>R#>c0D)FAp$\ED.9'5h=3[J]N[YLg*'`%++CY)kGJ%5G4oY0'F-dm2#9%#07%b9Z:t]5o].R`aQ?oaUf=bK<RBgl1@5s+mh!2tX"MmMdB-\Y)gQgrblFP2<Cqb^N^0<ib,rq+LH9pHPKg@<kN*romULqliMaU=6Sn%?<`Ze^o1#_=^m5'N29.LcD]<<1W`X\@OZ5<F^#93?Z37HX3%IUBM\BMR%dpIKNFYEGF)5k8a^oR?MPLf9^bm7)uPcN0A2nbaHVs)%l13G%kkm-0pTJTPMi#=:Q_Mi`)(VqCM93%Aoo%k)`1Wa9VH<K'EAAYJl!A.&R41r:X,L-QC\#g9aC`ZGl\:q7?].ii7lFkudfusK%ppHn>VR,nb)6QBEV2Ds,HCi65qU(=A[PCRn;PhR$8/KWWGf$add'-)V$?B4NSDK<fA63[-)9>Q*NHH,]e![Q&]R$n_.qC'Gg^$,<%=+?*sIAqN,bfrSa(JiV(MQF)T@L>Rpdd;JL8o^mXZQh1@;"i'4F(,sQLpeql?-2!t8]u)C:V))A/@BJ!B$._BS",Kbboe8,`B897%\[.tg^UJb%eCSb),`)^\S/V*^p/;L"7Oc/;Z8Temm9XNt?C,aa#s-V)(^U;s:,%2LHbTggpq9st!L.nTP3a9]fu\\&G&!@7^&TJO%ckV^C.s1S4eLjY"FkFp\mu>9\.-@OZU:Mqh+iW;><dA]hQSuVY)1&T%WaIB+DXj7=b1to(ZEeh_bUm/ghVsS<Bo?UBBr15%1;$9*%X2XW!^3g6%mZaf#r0V!Woj^rP1[ZURm31`]P(fU7aeD/GjSY&\S`Q'1h-TeoSpSA#(&bBMG%H\d,>3C[#d'UR$Oit58R!d+FqVB/%s*gSOp@/=H@<@Mni5BlRI!nR.8;>1IA$3QnN>6,uL/K=s9J8%?F:ua'Z[?",i(V?qV:C$?hD(;[60<(\QrVR\"0M2G#^;H#E&pGO%@PDl<4R\YhE3Q%LS#2muBB">Y-.S-RnB7Qt;C.+H(I*nIP&IQ*<STpT^0ClHdj=CmVkm@+@M48FF^jo`=Xj)bG"bc"0ft)2fh#k&%@T"5cE_9XAFK0l']=/)nHC/k:O_4.FqRe`t*rD:IYm3IhZGHI@BiUEJ6Z50D1oq6acD=NG[HXZ!-sj%ToZXO$LME5OX$rWKpJK7A%s1M!q,uHhsrV?FKj;q<$/YlYd4/nU=maa<mO44JgeAm_GUTcrm.dJ[(8d4T7lrhW-:\kr94SnJg\UJB33f2;7cTI3lL5S"8.="^s%!pF(o7BQV\4'!=QCL)g:[$,*!Nn2qeO-L0td:0^#.N8CYCYq2uf_]n)56*(rU9X.MLI!m<etR-qj'8\CHE'D\PC<-sodjXBoaA7R%flrU:dWGTHCQ1tFRs-9V*??c.C+1@R95G?MG\4O7j+nIRLu&B@X74#M.ML7;n_T_fkt1k?DC1QA45Yh9qUXr<qh;9cR:i]lg!&,j%!F*.bCHLRVWN`6#R=\Q>TiHGG99q;FH@'ti1RLIFGY#'1U7k*QgQ5JODo.+rA%C$l5/'%HP_Jf#RV("c?L*':iKp:d7sPjlg/t-?%Ae?=VAY[]B^]-lhKdf4<HpV?'4a\m$Uf`%mG6CePC.Y"!%9h'`,)E0=CF#Za$%%/0Bo!-TTBf;@?Q(OlbpB//@bGLH*X>n7)F?s.%FUEgtWA"_tIJQMZp+4r@25X8gaK3iL0GQ:iIO)XBX=SF2S".77m_3?LdW>qEadt5:1r^iCjN2ck;/-u-q)$]Gbpaisl7CGaJeZV?%\V/iq+dhV]e$Jk'@-WW>kX-mI@]iJPncVmRaL-Gk?ajOuhU1]WPtig0ePt::OD%k"XH7*e3P."%KgfRJ,3"lon^g5-af/nT>q=Sa%pf9Tmce.TNmC_@]SK]i$V#6P.WGKUoiE0)+c`Dh[Mj\\16EC4&N+N$4oAQKo6+=%67'GI>D]C>LXJb1,j_)pd[D"qJkk%!1mL2.!%Hc'e_FSQerFBUhZ*4l%V\r:IA^2rLMF#3%>Cr%99kV=%k)0Ca?%[TPLT0]B\"c(9pbAJ"MkVBIJqokbWc_*'qJ++Ghr!^.rO)N)Z%])2stmNEH3LFtfD:-1t;l=ie<>>#?Iag9Yg*`,H;r5%\`q8"\;]+d=3Z7L"BFpb&NRP(J=OAekLcLU%G>;Ps0hXd!!krkCR)pLL5%/uH!8V5!RG&G4duAqn,JDf/-B__]/P$I_pW<@D5FM6l^HEq8@%*QAq)AuBt;'VorP47b1PR+$-)1V;/kF-SOW-Eek_1=m8=</b52%fD>mYaiLVjs1Y+>E;((SZ;+0T!hS6MDWC?]I#GF4`*W[8q``E^%*S@F;^<V8]+k\Xl&k=ujY&7Sl,@2B_?V\"(R(0Z\m?KrV!!:2%9M7u+LpAQ=)'XB<Ai<#Z9uD+&UU!9O_kl0_-kQbuE>kAajN3b^9E#hD:,/l3?]:=L,I%S$R@9U`,<p_kcc,abmEl;Up[:'tB$>?:%U96Rj\k+f"@b(pc'*V.4XuCDIRums,1CGc#N%g=]r$>\ooomGJ9D=n&SQ84HN#;?3GE'flQia:pOd_RP"2Fjr,t0UO2l]pfHp;n(%g$\I+l_j=K:?I>7/?Z"AW%(7((U#Ce`&pmsS2HC,=c[s"raq+KDT7jer^4qt1YdqWNaI6(U_2m6Zdh]M2q1=Lq\]b7<puhi\_2=A%b@P6L'r[iC_kFcg$=l?WC^k7J`L9\;\``CH\oU=Veai&($;/"4=DF=&"?A!'2'XN3Hf`TI>bT*X8=Fp_Q(#o2\";?^k@>juq$3:I%hPmb9V';$,3$>[PDa73Y2!iBHWO5bnO0jDDD`W<6R@09J_Qto)`;o.BH7k7jY%D<7'm&gXd)UTRO(QGm/A:JRNtn.^2"sas85#47%o@0CZ-e!.%PoH(WBuoO:QUaNOp^5Irmnu@kRJ[K*^-"/2?0\!TRPRa:8*4))l&ifHUg?pF`B5o:*t*=(H:=enY84$B%IK;:^@@7/%$fl[43._D[(n*P:^Z-JW-N<d[G`N99H,:f$SW*3+L=YAr4Q2Doc/8O\$BGU-k=Hhc)q!J'eJr5"5]TV[6oL=lKl1JtGpbfe<UFJY%;9Vq(GD<jkCjGPLV,sHb;+&6(4q=ks7n]+rS2r_6hA^''1(8&H'^9+5TaOHf;Co#Shg<8Pcc%<9D?Mt]'eS?Sd-/<:JghrY=anO^%Ea?*e[--k:rGBCVM`c#8H'/M:%q6q6kY;XYEaN2"I(3'=0m*T]_kim:6=lq;LDr3>[BFtfS-[XWk/.Y#O]j"PY&Li-;#,&K+4E")%7\('f`EXDmR&Z:S%?pU,\s:chW^brp\5I'2>]O,)c%h3+3R.Z@N4?UniHh$jlM4mV9,/.ZWFONN`<sXR6=i=.BbM.NG<r.aBRuF[%TBPp0nT@st`%!uQl*t[XAFFgO?#,RP_FsQhk4>7@8lt$LbN(]*n1N-gb@3@/%c@EQ"GoiD?L+GUj>L9C^7%9;`I]aN)/'[u;4Rf$%<qT#&&:XUFTuiLJ$LO@bCLrYh<rL^0WG@q8f[.AkN[]UU\.+hj)/^D9>/Va-k3`_ZViWL$J(G.[;d?`V<9uW#3U++aVUoZ`H-m'T%^4["ijGOa1WH/M`bX))qR_I,j+8[h9N79MUb=MReRZ,bbIn#T`b/WU7P*$+EN$'>[CDfQ1.b6D5N)\#..s;ADHM3f<@*62Y3u.-'%Z'=$u(Tjju5/cGTR!#HTZ#*T"(!`%QRFsVgVS\bX;9WDE-W8oDmsuQ`.U8[2`1^,gFM"h?OCV=iE*=c?>uTWf.U8soN?s4R_J+lN%=g+6niFP*k53q5uGV5-)Or"H9QWJC']Etk/oW;M#'it#Us7f**+%tL9L'&;DlP)&)$L'6Wa\.?n4C$enCu#=U.CX$Qh9Lr&Hm)#@%AI+(8gU*VPM7^M!bGu;n6-jg`Tt<Hcg='C;TDJI8^_am!a$="3NQm7M(Lo6_DqN^tg?1,!F!p.+ph9HMfZ__J+9-J6j]9FaG:l"b%P"tHJ+cbD:n+A<VZPG@MD(6pdm9mcYk?)>eM75J!PHUGO"/oh;gXP>cchA<&B@Gc0Sr5\&2s#K4fkn^ccY1h#0[c\Ya_p:P)0VKZ%?J8N#>KE;9ZaeCn/lp9@D/[IDQoS3('X1C%5AQ6*P24tW*:IGqlJ9aus"a29Q!rjIS`M00h,p))=rT]7Z8:hspBr@8fbnu+S45H>%`QUeUm@0.MM+7.H]<Uf<rc-KlcfL..qfQ@BEP'LpoCO]HqVg;SFacnZDL\BXUtkbE].l)S18ACGjl0Um,0)E^.ACkC_RFSb$#uD`%QWij>gOocXnG4jW-?&`Z\T`/24IYG,[o:.Z;W&Rrp\@lJ([2Q^.BbUt<3aYoE`C95W*YW[o.FUgPh4qA\UmI53Sn,e<R/3i4^T1#%`:XT8Ln$Y)7TI$*=l9n&_W*F*6r(8t4qX0S1VRCEG\3;PG;QL%4bG0kFG[M=YP7(7cVr*eT%9b5A]aR`f)`2AdX%j'UlHjm/n;mj%S5#?INForE3G:<Vg<dEKeJL?:/hNDBo=T,%Cq@>9*s^)ge!;HV2@niU:=#e11HmWf*`4h$cRA">ACG*]jO%Sg(%GH<T1tZ<91NJ0%Bf96lCsNBnl+5""H8@KUI%Y;e2#.a@X"^hq\hr!,H7CsT2P&5AO\;Tt7n8e<Q^1:bZT1LC9p`;;VPeVPflUr=FBPgH%A$9Qn-O#?%flRDg.n>[qQ^19'r/C;n4/]h2/"B>#5%CA5VFs!?iLGC^flUpCPU`HRVG#[uau_YaCq?uY\t#6<ZE!,N9p\n3a^IZ$9p_/=Q[JCE%ph[OK>WQB`O!L2I/c@$V(7NJ3kg'6&gi-p:B^fiL7$j\MfO%+JB`Kco]97B8el#KV1ZGQF,$ibUQ'jX%WS5=7YI>tpe"?TmR<Yhd%<P'+5]t1QUb)3p&d/1Mf]UUkH>\q%(X-JD%kr(!)HebQ`4ga)7ctZk/M75&*<*dm(n`Z#27qdh+;tafu^#^eXSpJ+7S(a]V%Ki9m%#@Nt^m39iVk^GhN6SeBf@1dY&*u/dJANk1e=#AFBcePAX^N;\^f2k)/0f8FEh(ZR$im6EMXFVE'h$r>%iQp9g*M6U#RCc@j%)ZMG%\\hL:H9QFPn1rbbBC:qI>UTramq;(b\/,Y9_SguCTZNOkOl]_.mj'ZHZ>rAA,d]4R)F6"%:8(dK?:g2fo]pJ$f!sj2,+;0<'Bt5]%_11>+QBd(s9^f'i@Llo*li[FY?LEG?A/%a\)p7q6h;En1d$,IAMq"ZMqG$<sPJ6",US16A+&t-3AcE8[ViI1+6Z5-s]['A_O1"KZ%p%4_PS!O!UoaLf-/$GdrrseNo@fHs5k.Hm;R`&B<=eMs,W[k@JGGE2];Xq,th[QVgIV!F,%kF-kA7h5_9k6`]*Bk4,9&5Gr2;`aT%`_`:L+6b!#G9TCdp=&nImo@/VXO4^hGWa+b%$(Y++<[r`:RXX8<)(]AV'Rnhqo02udsiQ/pDXZCcRA?EB9Tf;%pDcSdoo5BC8pqc%KFO)SIh-M8$bBF62?[jKHm8(nCZZR[I3s,KW:O1$8^VB7^^G@SmoG?*mY2FHie>#'1EVOfE*)8"]V4qRj@abcDo:?HmeV;[Dnm1W%;I5bGhRMmP1+`VccCU[Fm^h;&*D)n-"f\G3(n?Y<En;N^?)]itmN'9h$K].eW]AMR&!a[mRk?DLNRZaA^,$l.9rs>&IE?ei:TXMX%0Wh\=8aK_YnOomf\`K15Hf=fo@`"T^PJK,ojgV.@euVd)`GrTl/%?$A>.OHoIAATSN3IbpQtXJp1VtcNh04:8m5/=^"i:EN"CklT%mL/F)!fq;kp7K9fBieWJ$Je(9T>\)r<@'Yp-27;[EJ6%,-8B6/N>KfY^$Ie",qN+P//?KN>rfTIaeFq>n'RuGq_h]LSN04mep>sg%=/[\EC+;T+l'::Tg$\mNa6XZ_e32KuOr)Y:f"_8GY%P9h09Pp4W)EjK,$d0!&%pW29A])8C3sD!C@,'Fm^s0(H68n<bj@L/s1BGC%]rHP"[(]P_mAi:Uk`oa)^J8lHr6%W*CUI<AV=.4O*O]s71!4b'DZ"XVP*q'VHML^7f4i-Mk3f@"PPsKGib^h\(F)T>CL6GdDjK(T%[IJ&$0XK/)jYcp[EKugdGFeI<gWH5@W0s+*T"&WNq/EhoN<rqfoBJ%OCEaj<3]dWYVY=BiMfZ-!)j-DNqr^bfqYY$!B-lO8aNK?S%]7uoIaSjk`qg"@Xk[\0Q\BRX_X(F7nW^*nuaiq#ug;cirR>m6?s"T"6XD&oBc-sGG16a9;X'`%P$^@/FIsHG,=jEZ7F2!+7T-u'^%'9&+2Xe7a!-8BH%qhKjQ.6TFbO'SK$j/&#K8,E%>&p9Uk@T-K*3=YhnQ52A=fILP=P8bAlVGn)J9W$,8D6:S"WpD?h\ng/t3,#bN%7fI6e`F!4[.hGmLl-<"*I,ENO$a%RA-WA,-.P#?_e%"[%/$6j=#Mo$:<YbH,Yd-IPZuX3RqS#UGoO)!_>@162d&"r;c8Ro(d>N0^%[JF_sqrLOq?u)9@f,YlIZE*5-G'1OUQ]F0(c'7l5>Xs-!Q[J[En8+onmjIq>FJVsd!+$bh.F6]FTHQ0^Z<OnIX"XJiAcWB`A8Ofl%?l%\)Sn6+H9O?B)'g#T8@f!aC1#!5FSf+G+cp.5?BRO)L=ngUpV>[<Y)n-*.WGda@7_Wuao=IsOI-Q\T_*K`d9"><J-7e77quSL_%KMU\nHq"TU4tDh=0Ff)f]rCY4e6C5pH^:e3hF90('h\_sER-pX3EDLFgiJSU;VZMk97:R87[HemB3ldTON9G]J0r#Q/<uDUV<cBt%YMKsgj_Ucikp.g<4t>l`h5+1A&ilkqT!.>ll5-T2<n<c&M[m$X/l2#[HC\=72.Jf,e*1MbEY?g3dY0Kb_sA@.j2>[TMl9/V@!iL,%5ZrV+Er^Q#j#s[Je\pP3!;>GK*rJI?R$%]s!]9b8P69J9MHSN#%.g3"S1?Ws(8)u[EcV5mZ>;:oA!e)*M";.I"dh'<e?koc)nAKT%@#AQ:S2MkH`tF46s1kCWl:&.2nkm+`0APb4jid;5NV$)^;IQHM,F:)c4m>.%r$NQI1Z(k%V]OqME0o8a*p)]""$`MMq<7e"[E]>E%nsNcuV!_R7PMc!2oL]S<H.O_,at7Qk<2"O7H=q8Xia"d?aYgZAU!hiklSI7<^j#bJ?hGB%DQ&eDrUL2XmXsp,?,+m#)Tgf3qR_4P%@4",^LC:i^QQI`SEQb'4oug@fG=M,:(r#=fbGS=h^s@M^00c&MLp^P,r*;O.BZZ%b#4Pio^?_+]T4tJb%.^Q.>1VL8,#f6EqW2YN%]_op74T5rU,`XGS..^HRhX=M]He0p#f+lV()s2Er`*3<G^[%6;0.$"?aQBF.'RH.I^jCH_F+Npioc);*Hp*WW$bsa6j'BFt>"$ZW%d-ph!>tS_lV/siZht;nO:?nm/aZG:_IFg,:4b`dRL4@fNP?fV9.G&.`GQ%)>oog7\_nPH7;Phf@pAqSJHAjjYO%@kSqg[3Ns&HfG%m!X33YK1GNnF-58f:q-^)a<^6qc1E1hr>[:EUI?q8,'WEKBGCrS!haokjC\(+obQWD#:'DGQ!9B8h9J8?bSQCB+,7FY+OCNUpW14%2P0cJ?iSjT+Rf/<e8itWg3V<,oujP8^jCH]Cr8Xm6t8AB?q$8NZ=!8DkXM,-GPu,p?hN_K)9GU]aF)UCn#Wln4^Y;(lBdc=hs\1+%q)VI#>FPu6lW<:5^&iSi7GcG8nn.Rl*oC?Hbc^^8L;)+dj]+P"[.jiTf.Z5bWPI?SrP%Tan(3^DpgN(Q9?VTQO^^\ll^&H!_JE#Y%kA$Z6rUS5,dYQcQb<O8$Ao+DirJ[$.HIX[pY0:9YWUKZm)Ela1]70R5+h*VhJ(H>L0t_=49^aCdoioReeW28>&\RFrIpte!p^#aL%b<7Psm+RT7laN,UWh4R&2#+\3=e<p?Rp-)Df.Xa/(m^fig2I"P^,ERJ)$rsS.@FK(P+foBVUhs2`J(+'(U2t42IdH#g8r*e7,"A$%:X9=h(+dbIWj2lSFnn&pUe_&g$,e8hp$nq[0qYa,n_$?@[FJIWI.r)`oCh2L(4J9N-^Vj)W!I!6@4omR6+o-Vq*+\%$sc//PNQ/Z%A(>e<5KpiEq@h,fIIm8Np?:qYBs"T=?Ei"1cS&H@4.k**NTONkgADZ0>IEk3$`j!rlc.Y.B\ZdH]1ulWD;Umda6hVgeqqqn?$UJi%m`##XIkkS`SNEFOIU%p%>Nb1I^T<@>:<34qS5*6PGGdX4>-7IO<r778:$[KrS[;]U_Q!6>n/<$ncQ16rS=I@+hV-l@Mgi?(q=4,i%D!#m%o\`aEjoMj'b/*'!a4IfpQ1=BX@;fo?iMs3N7^)P>J"NmWSWTn%@kVoLmbU`C&t\gj@H6RM@_HM]"*W$bjWJ#<C;;Ep([X+-%Ph*k:=3b(<#tXTHi8RAKA1bAH*A;oDT5W&R>HPU7g!#Rf/+3&ols",n]sY,NZXReL])$)WmdE<I-dMZ`bZu5&m4J9>T7%ODIBs\I%0#fRmnWUA0&mWd>J(DJc@kP$UeFo#MY<&@O4Xtr^2Dc_.igIU4GWdt`G0_1u?^NslN8(bF=)6d3f\H,rpP=5;S,G1X=/oZfm2l86%4?!5U\K76p4l%$Gq(i%]XoA\2:%RO(m9/M>YLq&KHaA$"?XPjnMt_.)@kClSNHKS,KRY"+ZalQp-2?*6+5uCl(@K5DoX49?HL+bb%<-<ck7&Dpirq3lX"5dohoCdW-rgC_iB>pL$;tKeI]_JhqM@+kAFOmY`s$YLs[r$P<Ct@;^G.rA"!F292M2j1le*70d"AA2q[3+\;%<o;"@<p/!Dp<)"IAblF3=k[1Y5Cr6Fo0Ii3cf-%l@DOE(f#$R])27<,Dm%B"5A2WeDHBD1cHUkfq`YD\9MF2*g:q"QVpC>$FI&!.%i6R&MWpU6m&HUXR_]gn0@lIGERiipaJX=qS?q:*uYQt%5kZOK%=o%4q!68(+$t#NYK5]&Pmbth]?Q[,V:V<76?Y?'`lD(b+<`9\'%;mu61(>f'P^U?sgqg.epC%?N/mCN1!UL]dQ\U"$C2dFfAbj8LYq.<C0M+UF+!nBmQ9@Zde$pR2>k/R;?`mNN6[<SP]`coQN,p1gH%CNGc-NN'&ID0u-<@\QgF;M.;Y2kG]6:2$!ko/Klo0YtR=r->q?>6+YFC9bt9p,)^5)roZ@_WA>A'Q)U/C6s'urY9bpKFD,9Kc\U)%c2cl&f`qV(MuWX0s&k)i:OHR<cguTH"%^.u]C6_o2C7\r@*rF#qi)KIM]cgHB5$q)c23%cQh,Di4c?=ZQG9NQ2_LuBmGPFVic^pQ%%rF5YpDDo&2'[9')dfi$k.f0XNd`o7<s/1\W!e-X<`)"?jgI#DB0+V-]o@_fk6Q#28UO&EOu?^o\l5QG=0:efWC=@Y(MO^bD#JbO%Xi0)B&WKMX:@\,j!#npt62YD'hQK&#5AdX8k>c<bj4gH]bn%V^k">qQJUp"84E>A+<m<bc,qT9X=LGM/n"*Oh-]ta%o[1Vb8j[qL%F^k(#iVKs)?$TUh[GG3&2K]j77c*QP",_ujX%/MZ;SWRUkC%Pc'gK;[Ge#s3"2Z^=iK#q4rb?p>U,rW$H[#03'o)FeE<-,=Xa>5a%=5c"qOqft2hc'c7nkEPd0#F,$!K#(1EA;0'5HY,[Ti5e!r5M'lSebH,c]#[-a(KDj]\2tAdk+h*CLc4`p0l/fpKrB$`b@Ot>R(Hm%]><rl5T**W9M[6iHdJ!YHE<Fi(9uFSN%[W8=.#b&otiG,F.@"^BBIGM;fZ1AM-%OVl+PU0Mo??k3&1>G$)*''Re-5<f2+-f-H[-0%`g<=d*Gn',[pr._DgpM@GJ=ee<mS`QF$&uqj]kD`DNQ7;A9so%\joak-0afda3RXJRQe\4-;n/u[P:%JS_!+)Kf:LtJlOTC_HB(f%=@F#MYmeM+k9mS*bo^p?5P-G.p34ucd*@f[qB4W.cg1h=!cPsqV@SoP*&$\E<H,]CmSq&*EehIQVWb2B7tUI-.ISTNbmQIq27L[G%e`c6,p%ZCcDi&M7LX8XpNP-`p<tUXd[C(1&))q5!QCC@[1+?8]g,N:3Pe=tgF9,4#(PDp:GNKC6SE&uGL3ii[.-LNH8lO(9&`pZ)%8Z:hPLiSLs7706<8!J)c>O(ML5GF[7.Of]9jD;8F5)<N/.==_kC)f\h#<ml7q*1sDEuej]/K*qUW<@]u'H_p5bBI?Br$-(A=]km9%):2"k'ibt/hqRql6EG!NLHgD,=g*c?48@.6BD=8*/JS$ZTdt<8im]'\S)2K?h*SX+^4KgAdc.$:*!Cjt^t/CKELQC_r;H@lH[[!-%8Zf;/a]f0YhO.ENbiYW0DYBW(*NRHENo/eWT$<f2%EWC/n<W45i+-WrkP^0OjIm)h0qNm&I4G]m9ugH+$JVYA=,"6#q0j+0KjErF%C]C$'P%ue]litZe0784oBXIJ;G;j_Ajgig/d_^cV`f?[oRiAJ!j/DM:c<Bi)jg"@*.5-u'4rg_CDhm1Qj/RC\.*icL6u%0G__:2S%KML`\ocLr_Sc?7J%)+^PFgou*rj;K?o)!IhkO,5Y+6K0IO#P8K,[?hKIT\=(elK8orubK<n[js]rW]49b1a%4o6tK7o=OkQ0C*FG%e)O$GSU<WtK:].ro[$RWjt<gONQp,qLLX7eD&<W^B3^ASQ@\;V6q4@bTo#O/;Wa>Db3I1(f8[d!om?APk3#ZmDtSFH*0Tb,g=L78%Q&TJ:ra>]JHft=Of@n[dN;E2DLFn#BP/pgpV0%mFB(#i7#j^h^Y4D"Eid`bsrrePSTdn8SrpnI"G:'84TehE!gI4X!.^(l^s2Cj+%OVYQ2gDntoA1#`s^b`a5a?l,`D(H7aTN8KPSV/A/A,2LfpNla)K'9Dt+6N5<,l(@h3t(m\c`9"p2ba*WF6*p)e@c_?4.a$BGK?<R%_i9!`s%p[8^qL!\o"E"fcIVmt$A:R^\)Z'1BDh@b?MER+/C*U[3F:e3<Nmkc#dC<(5.m>6LZZjZ"Z"4d*aL@9,L?<6WkJ7N9[u1m%f\*iLECk(Ecb%72NokJVan#<f0u\WKH)TTDHoSY4<En52*]pa9QRKD(KEjL!Bhor@A]:7tg3B)o@p4;W]Ga#bhPjfFFUh_82Lg)`%Da#/T]Xh>IH@92[W0j;dqo?nUHQcV=cCJ&m\M+dVoX3d'-C-<T:"jBT<ft"C=V,E$qZ:nIrkOWK02.7]0BCJoikHK40@NG8:K#[c%bA1VBa1JX<D85jU^H&_$AS(Vrb4J'e!#U7$<N<.%>LfM:D'/?aZ0`omhYA=b,je)3j.IiEi9<C+:$GcEl^E%X#Hp^iJ['a6fp3ha%b3]P0/:$Y?(Ph>6hrC>eZdNKl25d5tHuX`gZrNq9@E_KHP(*^qq^Q1^D(T;4EXr"4P/qDj]E`WF'IFau@<:#KcZo30#[+W?M)X[Z%fM-G-XNL9d<T![4mhV]HW+K2hjj%lR(\!"NDY?(@=?:41B:S+.k@k;WrIO+u.#(6RaLNh\Z"lkrBgUt4qRID(;a)M/?1K2JkB29u%<OgN>d-463j!kPM*BH!G<HmcHUN@G4B?[:VmWk8YeN?W+d@"KhT)=GMb0$bBjh0l!?*,Yk'sN\H9r?4oaHqpun[l+VP"?%*9?6?d%TaQ'cMb?Ie&j,n6Z*W#uh>Ym)oBP_tTB*>#Q;@3t%,0<]):EOYlHMQuT'CsMok!@WB$)aO[:6%lq2XY_,X.lB\d^N?cQk,&]ap`n%pl7--"5f:`Q$LW$"BGBL/d2uFJDT\Cjf?_b6.!65Hqq7N>=H="?;mW'%*G3.j]8+bqYFJ'4mT%p5HXit"$$Y'S=V1VLJfFr$8t(0%>TX`Zk(`MLr`ZGL(S+0kZ.(8eS3NhWkej_rqk0^\c^7:Ykj)?QbSI5KR.8J>hRHmZ9tt-Qb<<%4M>G.mN-WR>(c6o5BPMU(75]ej%oLCD:_I6Vkkr1+m<6:$0\+Waj(kZ:6YFMk7qK6J:>fN33ZRRt;(@k;b+&p?T'kNU.F"02Pb?ji`<lsShjk#RnYY)(ULAK5qj@O4d%T2E^E?&m]i:*iF+ilTdkLH$J0E'T:6lOA,->2XpqB,D)#6sAN!'RB828#6/tWV!&e6/U#-qU;k?pF0)lJ/gI.0@*b9]3&e&gca3Q%IlCOW<p'El_>iGCK;d#\Y\\Y-r8Af&].?ZRfeT$Lf:GU"MhM\DcJ%)SkH=V[DuEsJ7-Ja%G.bLh?7b]R(Jsg"Gm\k->sN-!Bc<O:%(XU'XP#_J]s*+=CdL5ufIJCRHOsR[>nDE`U8,1-nZ;kJtJ!Jj\DY`#tX*foaHnIG'X[[m)QX/LP=qUE";9,E2(IhiD#$=iaS1"c&%=;^:!i)F":Em"q#X,cQOJ9]TmFJH-O"]a;d2BZnfnj6A`/_OQ7NM(:,XD2EO%TI!En7CfEA_6P4""V1P/Z7mG$p/'$rQqjL8HqCh%0,SdLl=WC?o\_O_Y1d2BmLe%0fFbKfqCP0A9::K;kuZ!3*U#iNMiZh\7h()'7$5g<NfF!Y&94bZ+8BEfJZcd&cu:N?A%a?P%ZEVm%R2Ycdamn/d)_kjTNpft"#:Br7A3OG)<=M:<Tf-3"U7$2kWos2l)Ro+M_K[[Bgk/`XGB\NO#'F1.b#?dNdk<BhBV'Ks8Y[E$d6U>?%L4BZq_6UjYJ8F!PQSbXET`[(X/N])I,DffF"%K&,@!*^X@0j4!_Fd"J?J@0F0W51.G0%(b$L"N0=jVHV&E6.koHEe*[LN7ejT3S8%ThcNt_l$D++$r\a>BRks;..9e71PqUk^j2;[@Mgt%ihB%5aZCS76k10\F^dLEN)9,%BTCuFOS'DZ>/TX\9pRWkQ$r&XEm&C&Ia`r%2IAT$$Q]/j%]f)UR_;o!KQ87<3eeYRp0_cP`?#[pjM6SU2B3;Q5''%(U$kC=*+Mts']:gg(rK@6YV$c(!<)X/9QM&\ZjD+E"9oPA%FaH#`![&f@`jH(\fH/pVYVeT!))1Zr#;nIV&>gPc.)Q=;$rt+Zo\^ZRS>mUHWa>44M7l4!$@q+I$#Bt]==GA:6C]0=W=/mWU$q?J%+5oBiYlYm!A'e)X5`W__W&^M.FBsfS#+^X!O&eK^WnjZs5[bW>Ci!3,$[V-S8pJum>R;Bh#ZCpYa^[SWQ<5i6C!Yo4$$9HB+L5:?%.3&0OnmsMA%l]W@:msKl3a>TDle#bQ)c<_rj]<Zkd+8u!<p0dsZ)5=Hm*N)`2%?RGbOfZp@ODcaDRH:OcYu4-Y2fjse<Y#uAMjuP%2pCgV4.*4mUD\4Mp-iG@:5?>=&MY,`k1TGK^)!CQ?QoOk`hinJ*EW\S*EVSK?j2*OlN987\N]C.,ROdtcuD4<GRF)b'3tSV#mc0P%>ZsPM7@jpDB0.*<=MPLjG;ap5!N#U^)mR1IP(C=6gFgkbA$F<*,%ul:CN*^#X`c??D,mOl[<u45Qo,);qiT>UmRIedcF,m.PGEmo%56=$br3DtcptH!2'2\?-"gIS0"#:=aOD!$a_U<Z]hcm6X3tQ!Tn<kD9/$L%o)oS"7V<e38H5(?"L@*a>G)=QiXBY$:<&B]d(^gF0%$[.25_*NW;`#T@d^a7tGXN9$-5lX#sVXFiLr7'&[W.=Cojol[fJPZ_NiiSLT/@8Yd,BcIO#;?_c:+(O)c@I,Vj:=#jooNVs98ff9%'KV,JiI8"Y?]^A[Hr>cIQ5>\Q%'7eh66)I=28TU0-W(am,4sQ'8]-eT!+#5&f7[O5"B:<o!_/FY%&>>ok&P[4Y%1%R_N]p(3m+7_%ECnA9aM$pk"M`t[jVXq%(,S=`)Ip!M:pe-WJd?<!qi/,F,*2f(hSH33crV4BFKg$ucZu=6!0mTT&:"A3L*ToQ6ZR2+><iFdDh)'n%-K-+p%R#m&"B[gJ"Hcmt6g+n%Ic)C$KT>oEZ;DZI%!D`<@?DdFZlb"7/dHM1Qbc^t4TL0(\6L<[,r)3D!^1Pf1X[n/S3[)>J0JBr%h>lQZZ3c*0q(>?e#W;Jkd?0&Ja<QB]nfgl2EYpQ2$"2iH?_#B^$TtR@KcDe504%U)fFs(t+C8$e(BSbl+I:ApZOm'&Wh_?4X7($S%948uFs);!*aQ9KNjH:]"=q<<UJ2*D1LjRebM:'*A'&B;=",!LCNBf]Q:!!';##T@GM((MWgS%9O"gDqm."lj]a#l9pZO/#[+X!3c%J`R&l_nQ;0^4WO,=qS$<cpu(WlQ_ct^_K!T&'GRg6em_9&T`au7S&Wn9cs4`\oi\]&&fS<CbAm1\Fe!fjK^Oq;hYRQ0@gk%E,Dar%KGI8tXK*F(Uq,t<G:asjlq;$sbq3hrh1OPXY7dd_5d4'L&1=G7Ns($^"8r4*e-]%h"\XLDYT$uB_;7[3:l'b:)jLI,ZU7^-(ok;6%Y6hc\&E6S`-#uHA5p9;_"eG52AAXctX9eJ9g]IVnY6('pA6<ghd+Ia$e#NNCcJ6KW%(<b-#A,DL!+M[[(s4`W@8:4Rml1MMJ9qOU%"7`0]JVK!&jPAl6P,7:"!ZDnPL0HPIY-%ca7;,Rj"R6%0mFc0W8?>9_^egMW^U0,G0ogctG>&,W!j@JKZE#i'K6=YB2qg7!&K`j^%1;8dIFk8>eA/m7Vp77X_UrUh?<W\^7D-N8+3f*,nXXIA.M,d&McZ<?n$rDZl1;+UQ!Eieg"\cdjN4)QA"HHYp"0k[D'Amd\*^?sY%+OK:"7b"0Q(ij36j0K\7W#Y=3,7@WU!$o#^KV<5B?&13c6rja&F9O0[(Bte&JG9^OMF@5`YWPT4jU6r4"=4H$0Dsl]KWe!U=ghYZ%(#)[;"H'N#q.=t!Nbu+eKA6G,OJJHLE-,LIM6A0MVB@3cd&c$<+D1n;RX#,1!Y_t.o&:K'FG/&.,e+F0P??R)!oY)_'9L.k%4]-B%&JpE9"0l.T2E*_XEn.)r<EZ+7ciQ4'a&.3I#1=+,GBgkJL(iiNM]c\H60&FV&6aXq%LgU3IG'`Y#,/c($n9R1NF`@/*87*iQZCJY%0ku<nF'Y!ROMaSsDjCI@)=au)(c2d>q2YAJ@K@??;@m7[Ee)(.j$'NoDIN2<6>bj%V&J_XU*']S@R(0Z3l\[h%@R@`4a\uo-OR7J%o$0f03enUq3QL,WTZ_>?ee,%c%InZHn6M!`BY0CB9Z*ZJ6%'7A'Za6]FZ^[Anj^YZ;["ET6_0(-k2CW[_<OiU%:*<kjeBlZKSj>-%n!J%j3a6_1^$9/qhf8:'Cgbk@`V:<Y;3WIt`fKDnN_###0H6QG&[geXju?S)!LQKO"eq1`_2OS)V5?PO<hS#:"$qtKdUNiEXUa0I%'QQWq6/,'`"]WO(WM5=!G9\+/HO`_8qG(KV4hM.0"4@Hp2/LcW):t1i68T7]^cI3*c:3#`UFdf9:noJ],2mrMV3!jMg@@Rca>2A5%(WRK[bDSG,eE&IpgCAV_BFB6cTR**(_U''Ho\BW_PAZ>1e?jV;L&"2sV6*)"-jn&7h7\N]p/^$Wguof*a)Fpr;[3>l`h5hCh4J3e%\Tp?FI2ou*+SBOaOhruq@d`>$+1)];n$0slHI)oO%s>&<TdbgZOFp:Bd(iqJ#pG0(oZ1>C_#]JuXYc\"3rh%>&SB]enL1jdFIK`'%<=1a)!dbG*$&,qY.0Sr<d6u-f.cmED&5qnX6^k66T^p5i'+di"#q1KucKg(blar\eTcJ"N;Ei&:c8g31!-%2,+J'8`?"WqDo$:F2%:F?W)E-t.h4jYEC%TQ4g\ZcHIWT3JG+Pps*?N`VF/"m1K`J%`2P]C5!_r['dd.kR]!oh_iU2Clgl2d*/km0Z"9_=H75h%E-(sQrW%`=*=afFK6?oU(X=pPU6KK,EWh_f^X0YF$o/IBIMZJ!^="$k3.(-IcesOs_`Br86[-"KDl6-D>=@iF:N$WPTkhfY26D_*6ci)VoNa%eme\l)pN3S4TY]TjUlc`8;\Z2d4^4q$P-g7:u-_RA:N4F8++18CH;J$j<K!#+WpD69h0`S0``G[D0("44<YjRi>^8S>[&]^IH(Q&%Z$iI1M"<,:P/LbiamY$Cq2WEqR@DDkkCKBOfNu@A%U(=7F$uP>0bMU7d&GVSA>KQ73$[XlF+rT=!\;5=nR5@!^4s0^2K!S)"=0%(%#X>>R#]pY4P)t!`aH@GB);IEIcj14S#_!!=@_%=n!g.PWLsNRdj[\A[+Y5rqK+s`0$@+gTejp'`5j37qn?4C4PjGnVJD-/\#j?4c%8!k;uHppunP;GTLKZBC]%t$AMZJ5o!mk^aQ1Pt%!K4aO3N`O:)\daJ)=Mfb*,=k@5pX==@k(j*aW/5o(`)V2T;dUO'`!CN"U_K@d%WD\mjU=_s&8=KUDYad*Ro14n7\>"Ubaa>+SY_@-9HG2_a&qjeTBVjM"@qJFf*PPp.JJFT2^pl-sj-[dgL'Q]pl(2;W>kdgNfrV'E%H*HR7(i#m0:U#0Nfd=%J"=,?R]OM3__Bp??<of][TA1Dfb)-HAH4$FQmLDV.Mfa01%t/ILh&W@(V<$nYGD?2#,cRifGh2:BVR%HX%8&8@X'IV$4iW_;*,LRERJ3EEZDchNB(gCXtJ,gIThCq&1[VT6g6c9S>&h\BM7&kJ=PMS"WJ.t*#)&<=s/Ku@_'rF:P';bf#h$/+_%D.sJ4W$m=51Rqr4_X,Y"*FXc651:K[3[,PP0r-hH'IKrE!)MB4c5=&980M`eFc=Li6qfBDcS=4j<9aR]EFZ-7(c'I&qN,hO3?J.J%q+P#taMQB[!WYi\.un8sJRKY[q)>Xfoed<F$<*=^!GF]:*Sk#"&@LXTVRaPX-<stU3Vh9l+%Snt[]X,qS-e_%Ms8A)*q4MbBW-G8%jM24H`=ut-Mf`#;FNHtJ6<?10%")J`n5?bmZo-m40UsD-4eo[j?2TF$$tKpS.+3KO0qp\GFA0nF9Wuk`V@_hu;jd-1kns/LKbcn*%=$A4DMj-./GFPEhaRh&6^XE2N$I]">$&]tg#`Bkj#7E3g_@&4cR#X_b*b2Gs/9'j4=.<MYhpIukr%ggBW@DHeW`.)t#BGu0`1dA.%"_"2g_>n#<B.PDQ<b0o%(f0:.F@Q=c4XiH[8#.5#a1*3B(.#2cV@_hqlOm1.#'a(P4Z#MXak.I<1>i`m`I3F@YGt4_Du1ZI&b(2,%"sDt65/T&\i@GP:`4;79&IA&+Wu4+m0e+<oH2pVV`#.N<;Lg*X6AT:/e==Bl4uK"kJ,j2u]#SnoCsHLPV\&3lm$&t'k$TUOMkCGh%*"#Xc.KmM=Ag/bP9-LLHNLDP;NnJ#kEea6bat:nSOpKKdkLf>eM%RqI*\^[,l6AC;&-mKn-2Ye=oQd-gU8DGjd_JnhKlK]N<^RkK%8I[6M/r4W[`]l6ckXq4HnQJlX"4.BQ<Wm2MCDa2lSiXjn:k14F6t6Lfk.nt#_Iscc4>D$)5luU+oc,-!_h]iO>f;/L6Q*`P!L6Qm%'@C(:&15`n'o">)*pI9EUbCG4B)5b=J[r\a$HTu6.P,m.YV(kX&j?s^$@V2RkQI#+"j)&,#t4+'p3kmJ,hK;\_0(S0[`oM@#a]'_%@Kk7a4S&sV/p$OsRenZg4=dIPN!q:YHR!+uGW+Q#G3jjIA0Nj(?C/G1[;%9sr:&Q..!"RPUbLR1%+j2HQ>X>mI#j&,l5L"tK:12t%)'Bt<$h4Gl*>.>.D:k4AW)BjRD6kS9Hs@GTm=C[6>G52W+'e(gECAQc3lX+[O".,>d5VGgpmu!D#T?q&o4)bF+>+,%#%;1!78P+3%_)d#!o`tT#_c=bmI2<5J1+j8d6B*3JCK&lgbADHf7.:p\m5!1E*==3&'VS2jnh)krE"W52k7';s!._[F@!!N.BWD=Y7b10r3=nC,%G<GYXFo\,+)2Ofp(lRPs&2:\C'6+*2AEMMcC,/sA,\lITCDDn*UC@XjVXOXe$GH#I-R``80qL#F*kJq8a=IMDBr<-NpbY[gJg5ji%:sFP;dLc]3QIIGfF4#\s2,Pn0H/2=d7"cYtTg.A@*4%dL[>PD"*7dE`%%n/+-q#Im7WFFg:OINnXJRZpktXT4i\h05Ip3cgK,*$I%^_EXh5*r7K&QhiT'iZ]^h:r#n8jbQ@&7KZQTTG7jh8eDm-565.f1bSQiH=tENW9RMd;Fh7aaX);E-k/e2._FOOu7<_dEn=Ys(#0/%D->X:.'Jm-$rHKeI7%iY0FYcP8n!fpD#."'6.Ic5,lA.2<Bi\+&Z$]'N\V.pdhO3`-O.=U_?JPNfFd_nG61.@>Tin-pd2Hs4h]mK%c!(\@#f*:2Ln!=r'lr.DM1@CtJ8569U5<:bc`ZRXV[QG'FVOmV+[ehdH6L?"!ja);!dbsHa2RL`F:rY=4/deaK+NGmJY4<2N$/g3%fHd!r,3r26CaM)]6ra:U1Df.uL`Ti/;^l0@0O4NJ6$ur<!3;ZY88.=h12kB[?)&+$-FU(;Tc)%Da<2nH\A)44Em^Y^P6rG:ED/e`%6un7hD5\/GCG8U!#(%2C,Ue@<4Y+GaQdF1e$A82VJ88sD)C*Y$-(MeZ:,3^r`C)0_$Rn,r4,<$!LJpM&l*`j:0FAUB2a5q<6jN7u%!,@&hi\E-4'o&:aMON!J.Ddc<dUb0D,I1$3ZM58p"[Teu3oVl"W:B?C^stl2,^gu.5]-2r;nE>i'K%X<"i>&R,Z0(H3i4eMZP's9%l\-d<S,iPRKX_pn4p[YBJj)YCo*:<>Uqd-)YF-4fMq(Y`eI+)0,ilS)9J\<dmD.n4MmRu:U]fIua`SJcQXM:<7@8q1rMX4rXogd0%F*1,5al+],("?16&rp*6dsiD>_t+L:5mRVSXN*I*FrDJWH\#`Yj9e)gZOjD#74C>I(#b.H-;5$X[CYn?8B%jQV0lJe^Y:@FPj8Tb%jNl:/:`"M<lpmDVk6ZW\i7U/C6,Ia;TeOt]nCY1H@hrDYLU,tlY2<&ROUbJGO'%Ds,[&V:&`FTe8:)1*X+hu6rZ/>!mnArQ0lG@g%CQ_UIOXjTQLDe@qH+.n!nVT":8-D`-c$Ae]jHucO#>!I0j(aC?!WHA`iGg.UK'`k+M,KTQK$5DI6n^PI-bZBe%eoj1jXfsBIJI>?%/0F=IN!WC4:-%=t=--(<L68cM(K;h]*7"pgh$8W<UX*4I5mUR)Y*KalUDZHfR$9k=kd,f"Ie6MmihB6%5jToh=hr@@%><#b1dnTf%L#M%N?If]9F@.&LYnoikq404&$),-\#9u6*r2AQ\"MYVJb!mge`+>%IM+&s[$l*e_@M'$uAq@+NK$ahY/'u!u,kM.4#rN8jB6[]:%AoeJs9uer@a.X"Ga4FEO0H%SF,_1MeKV(<fl^6VKrJ\VhJV`cPo/&f'4.%fFkFn/u&Pakq5^&%T)%S5a!/+RT9HNI2>!oQg`-]Tm%l,?$)6+hBGaGO%fPB<%RUjEns"tX-8n`W6U=n4<58!C#*_GGbZo,Af]\X'/FKKR++g-^h^NTd2iAiY03&lFMg@0(G6-&@B%iuH,D%*YB#oL8$RXfIOuWJP).mMhl/*QlRmR!Z_lK_S>,uMlBuJ7-#"kW!N2mqbfH\C!;.jF;%$%QtAuFbeikg3B/I?)A9*0#"C'l,%2=&%.Os!YHd%SeC&qg!NB(QFUg$W^SL1+<Ue2'V!>M=[cB^&fQrQkRCO2#C\#8qT?7JEX1`@#(;\Wc9Zd5I7DM78k(r>.(?:$*9_T>LX%k=K)168@Lu[Z"7/3<p6EJDe=AE_b4q\gnS\mjo'TiM$%^M5*b?(t%#m.]"A'b\2fO-6);![ce-YKLHeG8N[>^m?TdD,`5hA@k*IR%9UCniVIC^!o^'rTQP9`q(rYs]HQmf;0,4Z)DN%^8(DiL:(LWiZ4L::@$AFRGIMV3o:13jej+J*Om2W]/!&:(kmGRho+JG/U:@huh%M$V(]BhT;[Y<=g$9>sG,;iFP"qKMN*Uo%XB*Z/M'\[G[i%8jR)NlBm1cdOf_F7kVk5(=7ncLd)'Zf(V0;3RLdD7u;iZ3+&T;!dO6%?[4m\`_>-PJMuoJ]'YAGA?<Fp=EOJ>@<1g%%jK./N7V2Ugs*[IaWW)lCF7'7i\;Y=(.61fI$;FIM$L,IM/>C.gD"K1q1/*oF25\\%-jmLS;!>G.L58Xg;[t:m@6b*Z$C1t$b&o8i/B(OM1!:04-86"_jX-\<\1k+#:i)>);R>J!'4i<7\r<oh?qX"CKGV2CL4g'lpeWo?%j%3'1J2p+G:q*!8a0RJL97b$(on,TM?hF%g89qe5>";!,-).pSF=[F;=B>>geKb`4c&+54hE5gSka]cd8_o'ua!0?%U(F_rF\Ha@%WTkoRQfPei)VC>_@j>XE,OHH<m#[Th#g%aUE,mDr/7RZ?M2uh&`5B2Q&E-4>'&h_6+%!;ufXXm\l:A]8D7-s.7&pp>;bCNfPU`ML%%t<bq`a`hC-UFe2QrqYI>&mATjHin\n2*fK$[!P^D51BT\8D>@812)6,To1ugESd8dbCN)9VTVtX&6*[81m3[B$Gki$4@#."[t9q%&F;@n%)2+rV0J(m]^2$1mQ#`!pCu@!>Sh(MTEd/*+cf!H^N;oINJduBDF0'8=ee]m+i`TJ;bb:XVo=lX-K<=]LJC>bS'eLZGO[Su%I@_j]m<VHeG!k(q#)Hd2#SBRKS]>/Q>fO3@e>OjNaV2[>-`6liG%e>)KHF6[@[c>1f>No#,p&Y4EF+S!e$]YtV6acf-mr;Z8LJ;u%`44rdM4(MZ/0Od+**XSe.D16h3i"Z+;:@?_4>_/=6Om@0b91[A003O]B#7pd-dW60^MKYd='W\=mj2&RK'K1A7+A"UP%uO@ln<19%m\!A\J3m3D6&`p<M408uKY2kt.iT)@\&,Elki-&:<bOP,OUVM\UO@uT(%EpZ]]I4"85JDkED6)6VINNa_;K"Q'2b7[79,.%2]=#T%0Tmk[nLS1c7qCn>(u]BPg_L&]jD)_E2KAdn%m7\sn:Dr^0*LnZL3dnTA]d\)MT$TC='-&kI,0P+&Xidk>pT?mHkNXcP^sKDPX<mJ%a-alO'IF67XI\5l'Q7"mO]u#036-%o,i$h/Ro']8FGE'K6R5TH6n&Od#kdC-[.J3I*fJ(7&=7EJelZ/jl67!"gV[StP[QkNBsf[g%%8Os^'Z:\9cbpQmpm&_7Bl;26*;O"c!u)cJQ*kHS&ACjZ9.sjm;u*8MOPA/JA<`7o6s#AZA,lm]+9QWMcNbI8;MF1J7q$cc:r'TP%64AYd,X_lD@,Vs-As-N$MAT[Oj;?(#I0j.a^;PV0<FkW(Vi9c6p7[i4)N%i78$kN(*TR"#jS^g(a++Fi_QTb_:om;')*GD4S$`<g%F"'Ls/fj9/XCB,4=elFPaLc[>JIf(_0l7Q_WH7\j"W^59e+>&S(BD#a#AG#nIgaATbj\$07M'&^cY<Tg`XhU"(rgVE.)l`/hi8n7%?ra@']$s>4@DIL[kY`Z.iPE;J,e`9=U)<FqKe;A5(;^>q+VWQ#&_Xj8,f4Zb=WJ\s_.^\7:7kNq:!JkQV+iR,##*<#S\\b'_uW)4%&RAn#!gS+&"brA@KVZ3=+bUfFFPD_k!`pOHr(\)q\Rm;Y1WH0sN05k+4!5$/@H9V\q5nt:bn$JB8DGg2,8Br*g>eR@P<ZIDE6e!2%(53$hd:a%$eh,8jn%$W,9Po.Y\Y>RP![i(&V>*a[Pe_sY)9D:eS"EA8[Kp(LOLUA!QZj:nB=9o:_#)4BN(cb>J@VDOpum7uS-]YB%K*mOaQ``;+j7a.s(iH#IX=-JD0[n1#gM1sOG/Q&_EEqJe-A5a'j8)&TQAQ8pD]8sb42uK'RhKmf:V\q7O!;.>'C8aQjB_=--C0Lh%[)`^tK:Lqr6mUm8%ugZ]LR\m$+\.H!U[pr97+':AYP:O]E<#tZDdl>D/^+i)OX70>dTRl%D<ki;n;fh\8>m^=BP4d[;/R#'AsX=.%+EKk3S%%M`Se1+g=?3`JR5bnWS]Sh+9TBAedh"ek=!`Qol00sPK2[_;g_ubF.n#'+3BS(KS"9Z#cL@up&4jSjLCFj,;$e6C2I0`<%!HjX,62YsK9ls`,kJqRH12omVcGRd.^?+RT>`l?2=+k$*['ZjP"fe/r2i"Jg%_Yh9Th$N^gQNRD0,4`\e(MKjLmplQG9"L'U6+7R%7e`(?3sDh3,/A45^^2!&6!#]b8KR7e9U=/M`9HWE0i+B;n9)UKS:#5P]6)FO8g[d!!tk&2"-HYe_VH>,8a_0/*)99a_RR<tn/\`e%6C-OkZ&FdP.g/8RlN[c"m1qVk,_IdP<4[?C*/HsJD>Hi9M].W^d,g1C&a[4H),!aU+B&>e.G-G&(^Q\G7-;AHHojMJ97c`uWXn?V%LkN2jj5e'e\:3Y_!s?]Z6nG)0,3`21f"gemO*FT^'+pg9Xk5/d5<(2N9CWs2oU96Bg(W?I_O1X&Pr?+gi`X('545t&EVh4N"gr"T%%sMtACJLLe83"2fWJf+Cets*.JD\6_2]bbO[SWR"kHn-OQuCJbUCY@L.S:\#oM0\QAqZ`!qlM)`E!hf@`Y3RinY8QclNkDG[7KqR%@mX;K9Sb[>6BJJ$(!DtL*sl(=L`!E>7:n"#[rl,U.)Y%n<IQm#3"(T<XYr%sd6i!gF6LiejpBb8)_l?[@]1I0SjV+RbYkSi'"dC7%,6Mp+IN>3#KFk>$==dSE.L7]U1^b<(ftrN>@?s?k02!R^#$AC^ZTU\*U?N3mSmDca8&^.%=c7+EPpqGS[*uEJ1'3#n&dGUAP@Q;W%,!j0W9gV4#-6Ws=Pb`e!a^l(!K$k%fND[!R*75UR_N5k&3M8&BD^c+*L?2M],Lg:Ljg@Dh[2TsLJ5QbRZ7X1AaWU(8+fK3LpOB!0%'3U?I&.&(8!^\:Yipi[A$SNB:`.i?hcrPP95[6P5>F3VFA&R#u=t+pHGq:@dK^.^Wfrj8c*i`p3'B@5m68\Dp"_IlR:'06*Wg3/&%-)(V]HD)H=NN$?l97/B'%mtH8$5H'i\MACq$U]#9r'VN+B%cap5<PG_,S5OC;Am@X2,=@D:ulZA`9?V"/WNQ\*Nuju&DdX(+!$]2%+aA%dIFs+2)ukm>=i+ac&Y*m0=rC6H-Jq:e$spiH+aB'4i/JAupl!!7T>d>=:h9+d]6ABcDEn;fhmkLe;$8&ZK\<N-bPU;):T]j-%Y?$l,f>@T9R0G/YN!FMt.$$rFWIWm<XRUEik<kHLG^bglGeOIF=#EQ;A"YkP(Tdcg3e8T?hXD:r"YcOiLL3U]B-$H-W0s$.GPE<?%13"*:?Tq:kD0\\6dZ)'L(-sB#GY9Zq7E?s]h]lMP(iH'PjK(\dGJt0#k<mi5To5:JjGL[(qE;M+VB:U+e'SOIILq?'i/f@S@?Nd_%1;oIB28Y0+`*R&1;<)4&LF)qY_jM7T6`EDLU47G:'aCC:H?9:.g2TKT<8<nO-ASpMbmViOC>X/>]p+FVms'.QT#eFigV`574`1Cb%psN5@PD7.T0nm`"Z;=lQR#6]5>R_@g"H4rKQ4?<PIg1'A%rQE5FoebA78>hR<f'-nEP_Hn!oda^d<3ANc]'0O'p0V8J+JO_718`C%0u9R$_tOIG:96('4;ncthpW'ECP6u,8@5)&C_6u`/JuOog#<>k2$G][#q<_&DVs&Z8Kit]FA)i#iIu'Y^D)eQ11R2c3Lep*&skqS%/'qudEql+I3^qF"es9/?(qXW(mGVf+OkCf45cUG!;@oNBqIWGV&s"]ci`U6>(&F*]YYX%q-9((%$H!uE&l;iHG(^9?,R?-n;[W^;%0F:0S3(AIsR*B$7PX<F[^&eXNMShjb7pOK@C9kh'gfiWM+O2<n;LX#d!O#'=>2X*[5&rgU1nYjh<cP$^s0j9VSOD7Ii/"iUij_q2%Y]N>'0onCrLl+9R0eMfm@?QWc,$-.2pkAHgi+YIVe:LO0ELEp6Sgm-J'-6*I&lA@m*dES0"m.*7C&q<`oZoKd:$>N<='>sb`d:u8%fAOr!m_]GsaRGLNctG(kYAMWY`<`A=Kuh&.%2-m;.X-7ln.ZImGt-^@Fc(sV`2.F433T.LJ#u6]H&<H&2S*!@'SIZ$R)bG#:*:3O%6d*PLbhBI@]oXVE%#G'^'qtb*@n[7meM/+W.P"SN?aX`&&="mV^M-8K2&Zl^]$uLK?IJA!aCLr!G$sAm+Qh,D:3n@Ni;>[ZG;'T"%n";rjha+;6j?%$GSF<+Z,2Y\e8Y"OK8=]-V@$L,1#gXocR1.g=id;!Mhi(HA.*i,PD#pLi@,e7T-9T(!d'`Uo_F(smnV?Z"aa==6%OnfIo;u$n1'DW,ha7%baq$rcolNmg(89drM,VBg@Ei5ra4<VLZ7T>LpUm,"j@$ZZ^U)"a\#nIro@jJ>XaEFqD#GJeElkO`9,?"t8%NDh@*fR$NYaO_:(LXO]1Y;,O)(ZS1@>B4h+E(Bh'!.KKc7'>ae+7@?PV/-`0/i@ePikp(_)Sg"\4IIE,a?kZ"mQujc9^K,q^2UEu%N\,s@Hmc!g_mj98Ts6>)-(C*mB785a`>=/oVd$$CiIBqRN]RXM$lmOTH:?0!KYC9+74GmYd5>Zr`3H&n?6l\OLeD.fPWUuBB*UIA%*$,eD-%bdb.0RP545o\p7Mn)?'ZB4(,Qr@&LNEP@_Cs;uG*?$)fA_[iD`R`D#Y-k>@fJ#dZQ;ZV(?GOY9B[gT^XNi`[TQ'2*kLWq%pHqc^N?$f-!1t+VXEFL^O5i\R0JSO]ZRrDrjAh*RJ+CL@pJoRk0sAc!G?>t^iI1`WYk0qM.7DRJNcE)i`r!k_Ha.mAI?h@]pelXd%)%_KUe(rH/"`N.>jZRO6Uhm\(e2%@R&i\.:R\Hf&-(9alSlrq>'9u*2*ghW?d6g9pmOcK)Gck"[EGr"WYRFEDI7la=_0P>k5tkUq%lqm$Po15/.0a2[QW>-%I73E4u4qMb2f<1AOLfT_4<YoD("IRO1h'DM:--R0+;gdO2_d$GqDl#_g3uE2&l(nH>?bn&W*)]'"<gA7\%]YMR]0);(Eq4V1!KkU=S_N7j8*b=JcUA/dgjS+RB-i&W-!'cC;(JY_Q/:#33J</[BKQoTo6Qj%.!DgDU8qm1<"q`!Yo-*SS&dWqV%Tu"0?b2HDs$@U/aX<@#OGPq"d=55H-,:p34cl^C=UD,^]&b0>9kG]9I#>6=2a/(=6'Q9uo?3SrCpT>ZMPM5Eq]6/(@\R,BppPU"d%"H7%#:9Z6$oMVNQ\>fq?1lh4C<Eh3?i(\WY>77mt=/5u>!'UE/X>l%BNiNr;Nqe_ho6K:3^nr+A<f\_@nVeNcW[.<b8UZ!;0YXn*%*H7'maa;.>:X0Rhr[GUQjf(d8l.s71JACdL;N?-f,H_>kH473mq>4t<-"j2To[4o3+sAL":fDk%LCP>=[E:8-/U`^-UA7E(N7+d^%pQLH#)-gPKS+-lZn08C;`+qbG&R.]u^*(3Z(_sS^GZ0V9n[i^Q=4R'jG%A@M:@=J9-kZQ'(i=nO0d=%Z/r(e7Waqkl60A1[<[5hs%767dM&hSA@B+lM]#_B;OPSgI<9jr$1PL9kTK[Dj`Yp`*fE(,d)79+",j"DDC\ca@M[AlO*f+$2%1r*`$Q7!!lil*\V=N%S3K,jr/%=K]BtLbV[pL%8--GhYhg%WnB_GYBJ<KN(Vg0,3uhaAbV'$ENPLUH*G+=r&ne`Rf%TBp_5OZeE4Y=r[)7bM+@X$F!/5jhaXI5E=$a%fA#d5F\m'+m$BJaaU]<ZRK*n#@YalECn%"_$poYU9n@O`;(q$$2WsZW%hT+mb"A=M#$ta"Ml8t8I.=-h]j+)e1;f.5Y7+&=&*\[P%^>r=eLrePV^ip[F2OS[OMJsr^5ZIXp]uhb\;P5d9Zm+k)7nkFcnRiN=8d`H\+cg*o2,#J_Qof2DTH,*LTb+&"lPN^m0_`^Im`Vj(%St!Z<(66CE\e:'B9fe"ANu=UIO8qtloCRr(n<lb.O;$@W(4S*fYSf-OdS8@BY4(l,)BOtR,8_Ne3mtGK(u9IoO5C#h7Ip*sin;OR%OsK2VOVXn=3BLP.(E,Ct.7iMgNq`up'')"_Ukjl\$XJ*Z1GNoR&RpSY@>GXC+rD'T&"mD#n?s,r!YA^TQ-VUUXVoHY!,sD9UH6cE%?o3,D'PV9;:TnGQUQS":fF8m"1*dPY3Xf3d"V?P-TIou(<c"2'3K^",?*cp"_jEnh8NDqc4;-Q72pFE-^G28%!cChB6krIO<XS<C%a4/V[iU9CY#kEia0;S.RL38&9BFEFTpbEJM'%!A,@I]eF_W*2eq/ac_6sh#Aj4ALcFNQs%$nOIR0LmP[YB8ui5`<U.,Ueo/DMchL%%H</Xp`qL5-co:m4FRiEnabl[AYAK[At^X$:4=E\`%J*chiRDH'EjDN31<B"4>[%!qc/G5qi*>tlrRWd%$s]mjZUk1p8]F$CE$CR%*F3_+n('0(f+VkF3lGE8j-lF`(Iq6jSdrk\B^BF\^'m]#Eqgf/<g1EAX@@Ps8:];b`L.ig9cVR+IW^UpIdqM6Z8>@?!n>nAN+lq>%3l]Kp6[@c_]R7ffD9#b$90?OY<ZSC,k0c\GL-VR3XUG>3HC?jJ+n^-Y44sG#CX\L/Lj7]prdX7FQ5*&5,PhT:&%1Z`5jFc*9,kl)%:bZ4#iLMEDMY;RugJmp+n_ZFS,:)Af]W6BOWOG2$.H6!mI:l8h8`_WU#TO'EcN):.Z&-ABcs1up<q%YgobMf!I@#[RKk50FcHHs<%GJaH!Urn_gM0gLA`!KNUij6F.4:c06FPS6%Fkr$U`rZsocrC#`bApu=$mfZ7'L"2cnoWQ1KF!GC`H\7PIP/Q)5/Bj(:G^(X?LIl>%\`c<M6>5D).IOW^M5]D9d5,ecb0%7JW<NFWb:<>[6imsK,u]fUjR?L*@WR,j_a/!c7gkM?0W=@s_/lVl&u6Rb/Os.[Kfdf>0bfWO%W+.G8oOfl0"h@[rahU:X_\>Uh;9]keg^I5?C@9WuX@+o.'SUq3Jh(rQe8U$CK:=8,N3)]BWQlehd,@"AbA,^ff`MoUe[?4`,2_a`%Y=1X"dGj)<Qh)f47^LHl8d#rA7VC.`I4]>Q,tfFg?;IVua'J#k6C8f+E@['\o]/9I+G?FS3*[GgCRS?o=F/Yk^e4`q'IfMC4qNB,%bi/7X;O%f8+=cSA8kf\Fmn1780<'mara?JWLn=t@F>stEM<G?#9Ss-bJK:S>%QA)]eI'Z)p0"#%[Vj]C]aUPWh4\bT0g86dbH36O%L'?:+>oiI\$5$_3Fg/S*6(,ge*Ro/q14b_^*/&]uX>k`N`Y7rsWp*f/&Q'NA<C+[._X%?Lh]FjrFj%gg-KSWj/Z,3YXbUZA(&JB+%83#OMf9JsEd^Vj/'0/+:U+d/QJ$N/$89N!tA][Lu4)b4he0VF28S>=F@EE_]NSJ@6n.J$-p^XUG`Q-"#$f;<NST5Ck:eg7f\I,0^%5n9;CUOrZd"X"+_OH\P;A(H.=2S=WjO.ZS/dqdWVjlnf=1l;^1@gn.pH%@oeR8?[3-_58A.3LqS8$cY[h;Js@4),0JeF,3q>QA(@%lSE$>S*Z;8dAs^5_du4XJ[ef2hP>9-_#r@c`k0CIp6OhYOfb@0lHE5;8S:Te//he2/';TF_5)*QH!&LaC6^RmrJJ[7JWMO(6'h3r%(s1L"drq[bBQ_8a88uf\l]m44@_Z0mJpu%7dplbqbiA1%9l^+BT/V6EVON4ROCR$h%3qEjBZ\A1%!'3pCMn^%>Ys<GHd^p#g2'^Q%GJoYS_<`YbjA]Z`[$6ngVPf`l<nB@qH)Ys&*TV'>M.er++).V;I][`Nn7>;X?IFj!HZcI:/o%dsjT(Ti9umEoCl/H3#(J,(\//(_%?riFAc+ZZ4\VS7M4HA.Bi'>Y=0PsfdC+[s%F^qGo_Uu`$gHQ+s#*FH00nqhmNS:l#opc/O]_j.?%Ti<aQ(PpR8VD@Mg!R4]'GU_k%^(hlq^fI87'D(/0[Yu*o0E;6I<if4.*>*^tTT*`e<'>G=j@p7aR]GCY8!YUj6'>_c8`?N8`G6VilB#sl(p@?J2:Hk\2o>$s"?C*J%'=#Y9?"3rBaY]($`:TG>FaZ;0W)5LTkYC%:ZNt?\R,ri%gM!iCm)*l@3gZi%G[1kVC3%pV)4\+$5Uf"RX!Y=:%W$E]DEKoI7_4`#%V^>j),r$,2iG#lKCrCfqUJ:c3;;&#(.<MK)hj.MV/15HXdB:sI!6.&&\G$Wh<O-j$!jP"W:bhYfN;R#RbNamh6nEZXBLIc\JZ`sF%i%kP0[!fBX3p+J!.:cEmU_KDM.->=r1)MV2(i8PpF:4\BPG,G1rFXftRd.Id%l])^2k?YXFs/hA'008fe77g9B\GJH)8<A!r7M'd%9YFj/?<<''R\V$<_[UBbUJ&"6(2.Rq"',%1>88)OX(Gbq$aVmQ@!BCl3^"IKY4O6W+f0i.`.[&qc]$:!GtX?Mos+6G+u+O:\u/F;%#9mGZ,6uS5b9i9<mbQtFV^L+oN-J$=Qjgo=H62aNM@Z)s4k]"Meh1`$YnVk]<=;*.V9*J($]5-CJ`rk%U7Z5$m`XaS.gprS;rVIJ%Ya1bVD0.k[W?bQeNr+R<*^)p_K"X=mP`SBT$tGHLq^ig"7K2["7&tOMn`arD;0PS`)@^a[Ac]QUWH<Ne+hW6KKG:VF7=J,.nG,kn%g(qUn5=U-u8s0PV=*['>o,-@":[ZJDh93N/>3b!RRq6Q5Ik:F"49p&QEDQ6NPnP6_fmA(Ul>6.MTD+KC(u`$!56(SJVsYth^IK9t%mJ1BD#.X9UXi1dRC#0\.KfT\L5W__TL,)K8&?,i['s/7%4a,jkK/jKnn8a?M12hsR!6,'lYSAD!^lf9r(prGbW95BRVUPZJb'ZW>%pJf_u2Y.A*S>C3pn6HN-[#lhROFZhKS2]23euO+0pH8_Oru'T1>P;bQ#"EIt`uQ#A)d)hS@Rc+aC4n-uRlF^iFW+5UXL%NKNtn##%8drn\d#Eaire&FK^Cdf)Lb[tgdl6VhW]NO[o\-^NWW(Un;;8JD[\h5d(bJ@.7@K`Jh-GRd8Ec3M3Y8?9Q<+Z8\@C@t<IJ1':$'%E%8!JgA_A;k+:0"D.<;hnBYa3_=&'VW;l$QNU!i&HjNM2:u)`iaD?n=tu/uQ*,<(<[aURus<>fPcC`9)tQ_<#"sS<?&9k6WaX53>g[%"'8DrEY#HDC'/,i6I0DOW4B:3"jkRO)tD(d?Hs?.0.gb3X1;t<7l4&Fgsm1!B:Lu4=;rBKrN8S+!#b$9d/7d_PH:gDkW=Q=?W'H7%5jgAomC\%WT<nXkT)o6V3VpC5'dO*OQHF*(4=>XtL]%:C^8$<.!NH6Q./+EsR@&#8Yh1;V.q><XFDST/<lOb.J6@!Q.[6c=`1XjG%M/1%II=Tm!LK`!`.?K_J(Ca6^=b"gd<,l5lFK6uWaZ?iR2k8+7DPS/T69o?gXXY%e+<DNQg9OG'MooASOiD"&<Gq.kA1n0U)?F%(%fgt^_!fEXT25':I1#3_P/8nqt'#U:cXO$Ys7grb.6mA45]uI4j?5CQ(cR_<?fod=MI^?H8P\3W-cbn.?$SqR$`F+$`7);$era9HF%h6^HH;o%Oih;&VG,DH9KNR7,-Lp[;+8ZY`?Te&LO-00F^1he98.X@Z/-],6b2.>$-_2=BDA#U2<!nFDMo_S!XMG7[goP.9BA_"6a%&6?\6lB-Ln38MOUTj1Z*'16jTj`DuMj#D4+Yr=E^0n)X(Vs<LT`#WSnQp)R'd6K/b^o.rdNd5O[4^,Nl*da+uQ!d0.N?GOX,d6<9%a[/o56<"92@KFgZE+9iC^,j`J-E7[LYfj?:L1G'&.n7ZPDH>6mnA54/U[P[fp#'9<a#4Ek^'+g6ibr1&'j=aBDT]t2,(1":XV`98%'Cf]#FcCbIY#[K^")"$W:nC3[,nas#:?@Qq$qVOsKmo!X8>X3gE^H;`)e-RI7C[Qi)*R<o1`^k[W"*c:Teg>For<1hm#L?u-=9Y)%\asu%`tb0$GoMJ;V[U69q<>ehIVSoXnaeCeYQ'#ts5Aa2%j1fIqW[Bcn#sM*lg=Z8e(<29hO\(=J,]$+p"S69YQ$_7H@PhgmE>C]%o@JJ@q%&SQP=Y]3_iI%^jlq9UaIqJ~>%AI9_PrivateDataEnd